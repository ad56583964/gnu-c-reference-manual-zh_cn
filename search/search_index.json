{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GNU C Reference Manual \u7684\u4e2d\u6587\u7ffb\u8bd1 \u539f\u6587\u6863\u5730\u5740\u4f4d\u4e8e GNU C Reference Manual \u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\uff1b\u6216\u8005\u76f4\u63a5\u53d1 Pull Request","title":"Home"},{"location":"A-Sample-Program/","text":"\u4e3a\u4e86\u603b\u7ed3\u6211\u4eec\u5bf9 C \u8bed\u8a00\u7684\u63cf\u8ff0\uff0c\u8fd9\u91cc\u7528 C \u8bed\u8a00\u5199\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5305\u62ec\u4e00\u4e2a C \u6e90\u6587\u4ef6\u548c\u4e00\u4e2a\u5934\u6587\u4ef6\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684 \u201chello world\u201d \u7a0b\u5e8f\u7684\u6269\u5c55\u7248\u672c\uff0c\u4f5c\u4e3a\u7528\u5728 FSF Project GNU \u4e2d\u7684\u4ee3\u7801\u5982\u4f55\u683c\u5f0f\u548c\u7ec4\u7ec7\u7ed3\u6784\u7684\u6837\u4f8b\u3002\uff08\u4f60\u53ef\u4ee5\u4ece http://www.gnu.org/software/hello \u4e0b\u8f7d\u8be5\u7a0b\u5e8f\u7684\u6700\u65b0\u7248\u672c\uff0c\u5305\u62ec\u6837\u4f8b makefile \u548c\u5176\u4ed6\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199 GNU \u8f6f\u4ef6\u7684\u6837\u4f8b\uff09\u3002 \u8fd9\u4e2a\u7a0b\u5e8f\u4f7f\u7528\u4e86\u9884\u5904\u7406\u5668\u7279\u6027\uff1b\u5173\u4e8e\u9884\u5904\u7406\u5668\u5b8f\u7684\u63cf\u8ff0\uff0c\u8be6\u89c1 GCC \u6587\u6863 The C Preprocessor \u90e8\u5206\u3002 hello.c : system.h 7.1 hello.c \u00b6 /* hello.c -- print a greeting message and exit. Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006, 2007 Free Software Foundation, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. */ #include <config.h> #include \"system.h\" /* String containing name the program is called with. */ const char *program_name; static const struct option longopts[] = { { \"greeting\", required_argument, NULL, 'g' }, { \"help\", no_argument, NULL, 'h' }, { \"next-generation\", no_argument, NULL, 'n' }, { \"traditional\", no_argument, NULL, 't' }, { \"version\", no_argument, NULL, 'v' }, { NULL, 0, NULL, 0 } }; static void print_help (void); static void print_version (void); int main (int argc, char *argv[]) { int optc; int t = 0, n = 0, lose = 0; const char *greeting = NULL; program_name = argv[0]; /* Set locale via LC_ALL. */ setlocale (LC_ALL, \"\"); #if ENABLE_NLS /* Set the text message domain. */ bindtextdomain (PACKAGE, LOCALEDIR); textdomain (PACKAGE); #endif /* Even exiting has subtleties. The /dev/full device on GNU/Linux can be used for testing whether writes are checked properly. For instance, hello >/dev/full should exit unsuccessfully. On exit, if any writes failed, change the exit status. This is implemented in the Gnulib module \"closeout\". */ atexit (close_stdout); while ((optc = getopt_long (argc, argv, \"g:hntv\", longopts, NULL)) != -1) switch (optc) { /* One goal here is having --help and --version exit immediately, per GNU coding standards. */ case 'v': print_version (); exit (EXIT_SUCCESS); break; case 'g': greeting = optarg; break; case 'h': print_help (); exit (EXIT_SUCCESS); break; case 'n': n = 1; break; case 't': t = 1; break; default: lose = 1; break; } if (lose || optind < argc) { /* Print error message and exit. */ if (optind < argc) fprintf (stderr, _(\"%s: extra operand: %s\\n\"), program_name, argv[optind]); fprintf (stderr, _(\"Try `%s --help' for more information.\\n\"), program_name); exit (EXIT_FAILURE); } /* Print greeting message and exit. */ if (t) printf (_(\"hello, world\\n\")); else if (n) /* TRANSLATORS: Use box drawing characters or other fancy stuff if your encoding (e.g., UTF-8) allows it. If done so add the following note, please: [Note: For best viewing results use a UTF-8 locale, please.] */ printf (_(\"\\ +---------------+\\n\\ | Hello, world! |\\n\\ +---------------+\\n\\ \")); else { if (!greeting) greeting = _(\"Hello, world!\"); puts (greeting); } exit (EXIT_SUCCESS); } /* Print help info. This long message is split into several pieces to help translators be able to align different blocks and identify the various pieces. */ static void print_help (void) { /* TRANSLATORS: --help output 1 (synopsis) no-wrap */ printf (_(\"\\ Usage: %s [OPTION]...\\n\"), program_name); /* TRANSLATORS: --help output 2 (brief description) no-wrap */ fputs (_(\"\\ Print a friendly, customizable greeting.\\n\"), stdout); puts (\"\"); /* TRANSLATORS: --help output 3: options 1/2 no-wrap */ fputs (_(\"\\ -h, --help display this help and exit\\n\\ -v, --version display version information and exit\\n\"), stdout); puts (\"\"); /* TRANSLATORS: --help output 4: options 2/2 no-wrap */ fputs (_(\"\\ -t, --traditional use traditional greeting format\\n\\ -n, --next-generation use next-generation greeting format\\n\\ -g, --greeting=TEXT use TEXT as the greeting message\\n\"), stdout); printf (\"\\n\"); /* TRANSLATORS: --help output 5 (end) TRANSLATORS: the placeholder indicates the bug-reporting address for this application. Please add _another line_ with the address for translation bugs. no-wrap */ printf (_(\"\\ Report bugs to <%s>.\\n\"), PACKAGE_BUGREPORT); } /* Print version and copyright information. */ static void print_version (void) { printf (\"hello (GNU %s) %s\\n\", PACKAGE, VERSION); /* xgettext: no-wrap */ puts (\"\"); /* It is important to separate the year from the rest of the message, as done here, to avoid having to retranslate the message when a new year comes around. */ printf (_(\"\\ Copyright (C) %s Free Software Foundation, Inc.\\n\\ License GPLv3+: GNU GPL version 3 or later\\ <http://gnu.org/licenses/gpl.html>\\n\\ This is free software: you are free to change and redistribute it.\\n\\ There is NO WARRANTY, to the extent permitted by law.\\n\"), \"2007\"); } 7.2 system.h \u00b6 /* system.h: system-dependent declarations; include this first. Copyright (C) 1996, 2005, 2006, 2007 Free Software Foundation, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. */ #ifndef HELLO_SYSTEM_H #define HELLO_SYSTEM_H /* Assume ANSI C89 headers are available. */ #include <locale.h> #include <stdio.h> #include <stdlib.h> #include <string.h> /* Use POSIX headers. If they are not available, we use the substitute provided by gnulib. */ #include <getopt.h> #include <unistd.h> /* Internationalization. */ #include \"gettext.h\" #define _(str) gettext (str) #define N_(str) gettext_noop (str) /* Check for errors on write. */ #include \"closeout.h\" #endif /* HELLO_SYSTEM_H */","title":"7. \u793a\u4f8b\u7a0b\u5e8f"},{"location":"A-Sample-Program/#hello-c","text":"/* hello.c -- print a greeting message and exit. Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006, 2007 Free Software Foundation, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. */ #include <config.h> #include \"system.h\" /* String containing name the program is called with. */ const char *program_name; static const struct option longopts[] = { { \"greeting\", required_argument, NULL, 'g' }, { \"help\", no_argument, NULL, 'h' }, { \"next-generation\", no_argument, NULL, 'n' }, { \"traditional\", no_argument, NULL, 't' }, { \"version\", no_argument, NULL, 'v' }, { NULL, 0, NULL, 0 } }; static void print_help (void); static void print_version (void); int main (int argc, char *argv[]) { int optc; int t = 0, n = 0, lose = 0; const char *greeting = NULL; program_name = argv[0]; /* Set locale via LC_ALL. */ setlocale (LC_ALL, \"\"); #if ENABLE_NLS /* Set the text message domain. */ bindtextdomain (PACKAGE, LOCALEDIR); textdomain (PACKAGE); #endif /* Even exiting has subtleties. The /dev/full device on GNU/Linux can be used for testing whether writes are checked properly. For instance, hello >/dev/full should exit unsuccessfully. On exit, if any writes failed, change the exit status. This is implemented in the Gnulib module \"closeout\". */ atexit (close_stdout); while ((optc = getopt_long (argc, argv, \"g:hntv\", longopts, NULL)) != -1) switch (optc) { /* One goal here is having --help and --version exit immediately, per GNU coding standards. */ case 'v': print_version (); exit (EXIT_SUCCESS); break; case 'g': greeting = optarg; break; case 'h': print_help (); exit (EXIT_SUCCESS); break; case 'n': n = 1; break; case 't': t = 1; break; default: lose = 1; break; } if (lose || optind < argc) { /* Print error message and exit. */ if (optind < argc) fprintf (stderr, _(\"%s: extra operand: %s\\n\"), program_name, argv[optind]); fprintf (stderr, _(\"Try `%s --help' for more information.\\n\"), program_name); exit (EXIT_FAILURE); } /* Print greeting message and exit. */ if (t) printf (_(\"hello, world\\n\")); else if (n) /* TRANSLATORS: Use box drawing characters or other fancy stuff if your encoding (e.g., UTF-8) allows it. If done so add the following note, please: [Note: For best viewing results use a UTF-8 locale, please.] */ printf (_(\"\\ +---------------+\\n\\ | Hello, world! |\\n\\ +---------------+\\n\\ \")); else { if (!greeting) greeting = _(\"Hello, world!\"); puts (greeting); } exit (EXIT_SUCCESS); } /* Print help info. This long message is split into several pieces to help translators be able to align different blocks and identify the various pieces. */ static void print_help (void) { /* TRANSLATORS: --help output 1 (synopsis) no-wrap */ printf (_(\"\\ Usage: %s [OPTION]...\\n\"), program_name); /* TRANSLATORS: --help output 2 (brief description) no-wrap */ fputs (_(\"\\ Print a friendly, customizable greeting.\\n\"), stdout); puts (\"\"); /* TRANSLATORS: --help output 3: options 1/2 no-wrap */ fputs (_(\"\\ -h, --help display this help and exit\\n\\ -v, --version display version information and exit\\n\"), stdout); puts (\"\"); /* TRANSLATORS: --help output 4: options 2/2 no-wrap */ fputs (_(\"\\ -t, --traditional use traditional greeting format\\n\\ -n, --next-generation use next-generation greeting format\\n\\ -g, --greeting=TEXT use TEXT as the greeting message\\n\"), stdout); printf (\"\\n\"); /* TRANSLATORS: --help output 5 (end) TRANSLATORS: the placeholder indicates the bug-reporting address for this application. Please add _another line_ with the address for translation bugs. no-wrap */ printf (_(\"\\ Report bugs to <%s>.\\n\"), PACKAGE_BUGREPORT); } /* Print version and copyright information. */ static void print_version (void) { printf (\"hello (GNU %s) %s\\n\", PACKAGE, VERSION); /* xgettext: no-wrap */ puts (\"\"); /* It is important to separate the year from the rest of the message, as done here, to avoid having to retranslate the message when a new year comes around. */ printf (_(\"\\ Copyright (C) %s Free Software Foundation, Inc.\\n\\ License GPLv3+: GNU GPL version 3 or later\\ <http://gnu.org/licenses/gpl.html>\\n\\ This is free software: you are free to change and redistribute it.\\n\\ There is NO WARRANTY, to the extent permitted by law.\\n\"), \"2007\"); }","title":"7.1 hello.c"},{"location":"A-Sample-Program/#system-h","text":"/* system.h: system-dependent declarations; include this first. Copyright (C) 1996, 2005, 2006, 2007 Free Software Foundation, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. */ #ifndef HELLO_SYSTEM_H #define HELLO_SYSTEM_H /* Assume ANSI C89 headers are available. */ #include <locale.h> #include <stdio.h> #include <stdlib.h> #include <string.h> /* Use POSIX headers. If they are not available, we use the substitute provided by gnulib. */ #include <getopt.h> #include <unistd.h> /* Internationalization. */ #include \"gettext.h\" #define _(str) gettext (str) #define N_(str) gettext_noop (str) /* Check for errors on write. */ #include \"closeout.h\" #endif /* HELLO_SYSTEM_H */","title":"7.2 system.h"},{"location":"Appendix-A-Overflow/","text":"\u3010\u672c\u9644\u5f55\u5185\u5bb9\u7531 Paul Eggert \u5199\u5728 GNU Autoconf \u624b\u518c\u3002\u6211\u4eec\u8ba4\u4e3a\u628a\u5b83\u653e\u5728\u8fd9\u91cc\u4f1a\u6709\u5e2e\u52a9\u3002 -- TJR\u3011 \u5b9e\u8df5\u4e2d\uff0c\u5f88\u591a\u53ef\u79fb\u690d\u7684 C \u7a0b\u5e8f\u5047\u5b9a\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u90fd\u4f7f\u7528\u8865\u7801\u8fd0\u7b97\u5305\u88c5\u4e86\u3002\u4f46\u81f3\u4eca C \u6807\u51c6\u90fd\u8bf4\u7a0b\u5e8f\u7684\u6ea2\u51fa\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e76\u4e14\u4e00\u5c0f\u90e8\u5206 C \u7a0b\u5e8f\u5728\u73b0\u4ee3\u7f16\u8bd1\u5668\u5b9e\u73b0\u4e0d\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684\u6ea2\u51fa\u884c\u4e3a\u6ca1\u6709\u50cf\u4f5c\u8005\u671f\u671b\u7684\u90a3\u6837\u5305\u88c5\u3002\u76f8\u53cd\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u7684\u53d6\u4f59\uff0cC \u6807\u51c6\u6307\u5b9a\u7684\u6ea2\u51fa\u884c\u4e3a\u901a\u5e38\u90fd\u6ca1\u6709\u88ab\u5b9e\u73b0\u3002 Integer Overflow Basics : \u4e3a\u4ec0\u4e48\u6574\u6570\u6ea2\u51fa\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898 Signed Overflow Examples : \u5047\u5b9a\u5305\u88c5\u7684\u4f8b\u5b50 Optimization and Wraparound : \u505c\u6b62\u4f7f\u7528\u5305\u88c5\u7684\u4f18\u5316 Signed Overflow Advice : \u5173\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u7684\u5b9e\u7528\u5efa\u8bae Signed Integer Division : INT_MIN / -1 \u548c INT_MIN % -1 A.1 \u6574\u6570\u6ea2\u51fa\u57fa\u7840 \u00b6 \u5728\u7c7b\u4f3c C \u7684\u8bed\u8a00\u4e2d\uff0c\u65e0\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u53ef\u9760\u5730\u5305\u88c5\uff1b\u4f8b\u5982\uff1a UINT_MAX + 1 \u5f97\u5230 0\u3002C \u6807\u51c6\u4fdd\u8bc1\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u5728\u5b9e\u8df5\u4e2d\u662f\u53ef\u79fb\u690d\u7684\uff0c\u9664\u975e\u4f60\u6307\u5b9a\u4e86\u4fb5\u5165\u6027\u7684\u53ea\u9002\u7528\u4e8e\u7279\u5b9a\u7a0b\u5e8f\u7684\u975e\u6807\u51c6\u4f18\u5316\u9009\u9879\u3002 \u76f8\u53cd\uff0cC \u6807\u51c6\u8bf4\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u6b64\u65f6\u7a0b\u5e8f\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5305\u62ec\u6838\u5fc3\u8f6c\u50a8\u6216\u8005\u6ea2\u51fa\u7f13\u51b2\u533a\u3002\u4e0d\u5f53\u884c\u4e3a\u751a\u81f3\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002\u8fd9\u6837\u7684\u6ea2\u51fa\u53ef\u4ee5\u5728\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u548c\u5de6\u79fb\u65f6\u53d1\u751f\u3002 \u5f88\u591a C \u7a0b\u5e8f\u65e0\u89c6 C \u6807\u51c6\u7684\u9700\u6c42\uff0c\u5047\u5b9a\u4f60\u8981\u628a\u7ed3\u679c\u8f6c\u6210\u6709\u7b26\u53f7\u6574\u578b\u6216\u8005\u5b58\u5230\u6709\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u91cc\uff0c\u6709\u7b26\u53f7\u6574\u6570\u7684\u6ea2\u51fa\u4f1a\u9690\u5f0f\u4f7f\u7528\u8865\u7801\u8fd0\u7b97\u5305\u88c5\u5728\u5bf9 2 \u7684\u5e42\u53d6\u6a21\u91cc\u3002\u5982\u679c\u4f60\u4f7f\u7528\u4fdd\u5b88\u7684\u4f18\u5316\u9009\u9879\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u901a\u5e38\u5bf9\u4e8e\u4e3b\u6d41\u7684\u73b0\u4ee3\u5e73\u53f0\u90fd\u662f\u53ef\u79fb\u690d\u7684\uff0c\u4f46\u53c8\u4e00\u4e9b\u4f8b\u5916\uff0c\u6211\u4eec\u968f\u540e\u8ba8\u8bba\u3002 \u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cC \u6807\u51c6\u5141\u8bb8\u4f7f\u7528\u53cd\u7801\u6216\u8005\u7b26\u53f7\u5316\u6570\u503c\u8fd0\u7b97\u7684\u5b9e\u73b0\uff0c\u4f46\u5230\u4eca\u5929\u90fd\u8ba4\u540c\u8865\u7801\u662f\u5b89\u5168\u7684\u3002 \u6b64\u5916\uff0c\u6ea2\u51fa\u4f1a\u5728\u628a\u4e00\u4e2a\u8d85\u8303\u56f4\u7684\u503c\u8f6c\u6210\u6709\u7b26\u53f7\u6574\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u5b9e\u73b0\u5fc5\u987b\u5b9a\u4e49\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4f46\u8fd9\u53ef\u80fd\u5305\u62ec\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6240\u6709\u5df2\u77e5\u7684\u5b9e\u73b0\u90fd\u652f\u6301\u9690\u5f0f\u5730\u5305\u88c5\uff0c\u56e0\u6b64\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u5176\u4ed6\u53ef\u80fd\u3002 A.2 \u5047\u5b9a\u5305\u88c5\u6ea2\u51fa\u7684\u793a\u4f8b\u4ee3\u7801 \u00b6 \u957f\u671f\u4ee5\u6765\uff0cC \u6807\u51c6\u8981\u6c42\u7684\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\u884c\u4e3a\u548c C \u7a0b\u5e8f\u901a\u5e38\u5047\u8bbe\u7684\u884c\u4e3a\u6709\u4e00\u4e9b\u51fa\u5165\u3002\u6807\u51c6\u5141\u8bb8\u57fa\u4e8e\u6ea2\u51fa\u4e0d\u4f1a\u53d1\u751f\u7684\u5047\u8bbe\u7684\u4fb5\u5165\u5f0f\u4f18\u5316\uff0c\u4f46\u8bb8\u591a\u7a0b\u5e8f\u5374\u4f9d\u8d56\u6ea2\u51fa\u5305\u88c5\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u7b26\u5408\u6807\u51c6\uff0c\u4f46\u901a\u5e38\u90fd\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f5c\u8005\u663e\u7136\u4e0d\u613f\u610f\u5b9e\u73b0\u4f1a\u4e2d\u65ad\u7a0b\u5e8f\u7684\u4f18\u5316\uff0c\u9664\u975e\u7528\u6237\u6307\u5b9a\u4e86\u4fb5\u5165\u5f0f\u4f18\u5316\u3002 C \u6807\u51c6\u8bf4\u5982\u679c\u7a0b\u5e8f\u6709\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\uff0c\u90a3\u5b83\u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5e76\u4e14\u8be5\u672a\u5b9a\u4e49\u884c\u4e3a\u751a\u81f3\u53ef\u80fd\u9020\u6210\u6ea2\u51fa\u3002\u4f8b\u5982\uff1a if (password == expected_password) allow_superuser_privileges (); else if (counter++ == INT_MAX) abort (); else printf (\"%d password mismatches\\n\", counter); \u5982\u679c int \u53d8\u91cf counter \u7b49\u4e8e INT_MAX \uff0c\u5219 counter++ \u4e00\u5b9a\u4f1a\u6ea2\u51fa\uff0c\u800c\u8be5\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64 C \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a\u548c INT_MAX \u7684\u6bd4\u8f83\u548c abort \u51fd\u6570\u8c03\u7528\u4f18\u5316\u6389\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u66f4\u65e9\u7684\u4e00\u4e2a bug \u8ba9\u7f16\u8bd1\u5668\u63a8\u65ad\u51fa counter == INT_MAX \u6216\u8005 counter \u4e4b\u524d\u5c31\u6ea2\u51fa\u4e86\uff0cC \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a password \u7684\u6d4b\u8bd5\u4e5f\u4f18\u5316\u6389\uff1b\u8fd9\u6837\u751f\u6210\u7684\u4ee3\u7801\u65e0\u6761\u4ef6\u5730\u5141\u8bb8\u8d85\u7ea7\u7528\u6237\u6743\u9650\u3002 \u629b\u5f00\u6807\u51c6\u7684\u8fd9\u4e2a\u8981\u6c42\u4e0d\u8bf4\uff0c\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4 C \u4ee3\u7801\u90fd\u5047\u8bbe\u5728\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u53d1\u751f\u4e4b\u540e\u4f1a\u6709\u5305\u88c5\u8fd0\u7b97\uff0c\u800c\u6240\u6709\u7684\u5df2\u77e5 C \u5b9e\u73b0\u652f\u6301\u4e00\u4e9b\u5047\u8bbe\u4f1a\u5305\u88c5\u6ea2\u51fa\u7684 C \u65b9\u8a00\uff0c\u5373\u4f7f\u8fd9\u4e9b\u65b9\u8a00\u548c\u6807\u51c6\u5b8c\u5168\u4e0d\u7b26\u3002\u50cf\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u7f16\u8bd1\u5668\u4e2d\u7edd\u5bf9\u53ef\u4ee5\u5de5\u4f5c\uff1a \u4e0b\u9762\u7684\u4ee3\u7801\u6765\u81ea\u4e8e\u7b2c\u4e03\u7248 Unix \u7684 atoi \u5b9e\u73b0\uff081979-01-10\uff09\uff1a char *p; int f, n; \u2026 while (*p >= '0' && *p <= '9') n = n * 10 + *p++ - '0'; return (f ? -n : n); \u5373\u4f7f\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5728\u8303\u56f4\u5185\uff0c\u5f53\u8ba1\u7b97\u6700\u5927\u8d1f\u6570\u7684\u65f6\u5019\uff08\u5373 -n \u6ea2\u51fa\uff09\u6216\u8005\u8ba1\u7b97\u63a5\u8fd1\u6781\u5927\u6574\u6570\uff08\u6b63\u6570\u6ea2\u51fa\uff09\u5728\u5927\u591a\u6570\u73b0\u4ee3\u673a\u5668\u4e0a\u8fd8\u662f\u6709\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u95ee\u9898\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea\u7b2c\u4e03\u7248 Unix \u7684 rand \u5b9e\u73b0(1979-01-10)\u3002\u8be5\u7a0b\u5e8f\u671f\u671b\u4e58\u548c\u52a0\u4f1a\u5305\u88c5\u6ea2\u51fa\uff1a static long int randx = 1; \u2026 randx = randx * 1103515245 + 12345; return (randx >> 16) & 077777; \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea GNU C \u5e93 2.5 \u7684 mktime \u5b9e\u73b0\uff082006-09-09\uff09\uff0c\u8be5\u4ee3\u7801\u5047\u8bbe + \u8fd0\u7b97\u7b26\u5305\u88c5\u6ea2\u51fa\u6765\u68c0\u67e5\u6709\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a time_t t, t1, t2; int sec_requested, sec_adjustment; \u2026 t1 = t + sec_requested; t2 = t1 + sec_adjustment; if (((t1 < t) != (sec_requested < 0)) || ((t2 < t1) != (sec_adjustment < 0))) return -1; \u5982\u679c\u4f60\u7684\u4ee3\u7801\u50cf\u8fd9\u6837\uff0c\u90a3\u5b83\u57fa\u672c\u662f\u5b89\u5168\u7684\uff0c\u5373\u4f7f\u4e0d\u7b26\u5408 C \u6807\u51c6\u3002\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4eba\u4ee5\u4e3a\u53ef\u4ee5\u5047\u5b9a\u6ea2\u51fa\u4f1a\u88ab\u5305\u88c5\uff0c\u4f46\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u5c31\u50cf\u4e0b\u4e00\u8282\u770b\u5230\u7684\u3002 A.3 \u4e2d\u6b62\u5305\u88c5\u8fd0\u7b97\u7684\u4f18\u5316 \u00b6 \u6709\u65f6\u5019\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u5e76\u4e0d\u5305\u88c5\u6574\u6570\u8fd0\u7b97\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u4ee3\u6570\u5316\u7b80\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u628a (i * 2000) / 1000 \u7ffb\u8bd1\u6210 i * 2 \uff0c\u56e0\u4e3a\u5b83\u5047\u5b9a i * 2 \u4e0d\u4f1a\u6ea2\u51fa\u3002\u5f53\u6ea2\u51fa\u53d1\u751f\u65f6\uff0c\u7ffb\u8bd1\u7ed3\u679c\u5c31\u4e0d\u7b49\u4e8e\u539f\u6765\u7684\u542b\u4e49\u4e86\uff1a\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5178\u578b\u7684 32 \u4f4d\u6709\u7b26\u53f7\u8865\u7801\u5305\u88c5\u7684\u6574\u578b\u7684\u60c5\u51b5\uff0c\u5982\u679c i \u7684\u7c7b\u578b\u662f int \u5e76\u4e14\u503c\u662f 1073742\uff0c\u539f\u6765\u8868\u8fbe\u5f0f\u5f97\u5230\u7684\u662f -2147483\uff0c\u4f46\u4f18\u5316\u540e\u5f97\u5230\u7684\u662f\u7b97\u672f\u4e0a\u6b63\u786e\u7684 2147484\u3002 \u66f4\u5fae\u5999\u5730\uff0c\u5faa\u73af\u5f52\u7eb3\u4f18\u5316\u66f4\u5bb9\u6613\u66b4\u9732\u51fa\u6709\u7b26\u53f7\u6ea2\u51fa\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u770b\u4e0b\u9762\u8fd9\u4e2a\u6545\u610f\u8bbe\u8ba1\u7684\u51fd\u6570 sumc \uff1a int sumc (int lo, int hi) { int sum = 0; int i; for (i = lo; i <= hi; i++) sum ^= i * 53; return sum; } \u4e3a\u4e86\u907f\u514d\u6bcf\u4e00\u6b21\u5faa\u73af\u90fd\u4e58 53\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u5728\u5185\u90e8\u628a sumc \u8f6c\u6362\u6210\u4e86\uff1a int transformed_sumc (int lo, int hi) { int sum = 0; int hic = hi * 53; int ic; for (ic = lo * 53; ic <= hic; ic += 53) sum ^= ic; return sum; } \u8fd9\u4e2a\u8f6c\u6362\u662f\u9075\u5faa C \u6807\u51c6\u7684\uff0c\u4f46\u5f53 INT_MAX / 53 < hi \u6210\u7acb\u65f6\u5305\u88c5\u8fd0\u7b97\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u8ba1\u7b97\u50cf hi * 53 \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u65f6\u6ea2\u51fa\u53ef\u80fd\u4f1a\u9020\u6210\u8868\u8fbe\u5f0f i <= hi \u751f\u6210\u7684\u503c\u548c\u8f6c\u6362\u540e\u7684\u8868\u8fbe\u5f0f ic <= hic \u4e0d\u540c\u3002 \u56e0\u6b64\uff0c\u5f53\u6d89\u53ca\u50cf ic \u8fd9\u6837\u7684\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u65f6\uff0c\u4f7f\u7528\u5faa\u73af\u5f52\u7eb3\u548c\u76f8\u4f3c\u6280\u672f\u7684\u7f16\u8bd1\u5668\u901a\u5e38\u4e0d\u652f\u6301\u53ef\u9760\u7684\u5305\u88c5\u8fd0\u7b97\u3002\u65e2\u7136\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u662f\u7f16\u8bd1\u5668\u751f\u6210\u7684\uff0c\u800c\u5728\u6e90\u4ee3\u7801\u4e2d\u4e0d\u53ef\u89c1\uff0c\u56e0\u6b64\u5e76\u4e0d\u603b\u662f\u7b80\u5355\u7684\u8bf4\u8be5\u95ee\u9898\u662f\u5426\u5f71\u54cd\u4f60\u7684\u4ee3\u7801\u3002 \u5728\u50cf\u8fd9\u6837\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b9e\u9645\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u4f9d\u8d56\u5305\u88c5\u8fd0\u7b97\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5faa\u73af\u5f52\u7eb3\u4f18\u5316\u603b\u662f\u5f88\u6709\u7528\u7684\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u8fd8\u662f\u4f1a\u4ea7\u751f\u95ee\u9898\u7684\u3002\u5982\uff1a int j; for (j = 1; 0 < j; j *= 2) test (j); \u8fd9\u91cc\uff0c\u8be5\u5faa\u73af\u5c1d\u8bd5\u8fed\u4ee3\u6240\u6709 int \u7c7b\u578b\u80fd\u8868\u793a\u7684 2 \u7684\u5e42\uff0c\u4f46\u662f C \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a\u6bd4\u8f83\u4f18\u5316\u6389\uff0c\u5728\u6ea2\u51fa\u884c\u4e3a\u672a\u5b9a\u4e49\u7684\u60c5\u51b5\u4e0b\u751f\u6210\u65e0\u9650\u5faa\u73af\u7684\u4ee3\u7801\u3002\u7531\u6b64\uff0c\u4efb\u4f55\u751f\u4ea7\u7248\u672c\u7684\u5e26 -O2 \u7684GCC \u90fd\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\uff0c\u4f46\u662f\u5176\u4ed6\u7f16\u8bd1\u5668\u6216\u66f4\u591a\u7684\u4fb5\u5165\u5f0f\u7684 GCC \u4f18\u5316\u9009\u9879\u53ef\u80fd\u4f1a\u505a\u3002\u5e76\u4e14 GCC \u5f00\u53d1\u8005\u8fd8\u6ca1\u6709\u51b3\u5b9a\u5b83\u662f\u5426\u5c06\u7ee7\u7eed\u548c -O2 \u7684 GCC \u4e00\u8d77\u5de5\u4f5c\u3002 A.4 \u5173\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u7684\u5b9e\u8df5\u5efa\u8bae \u00b6 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6700\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u5b8c\u5168\u907f\u514d\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u3002\u4f8b\u5982\uff0c\u4e0d\u8981\u76f4\u63a5\u628a 2 \u4e2a\u6709\u7b26\u53f7\u6574\u6570\u76f8\u4e58\uff0c\u800c\u662f\u5148\u628a\u4ed6\u4eec\u8f6c\u6210\u65e0\u7b26\u53f7\u6574\u6570\u518d\u4e58\uff0c\u7136\u540e\u6d4b\u8bd5\u7ed3\u679c\u662f\u5426\u662f\u6709\u7b26\u53f7\u6570\u3002 \u7528\u8fd9\u79cd\u65b9\u5f0f\u91cd\u5199\u4ee3\u7801\u5f88\u4e0d\u65b9\u4fbf\uff0c\u5c24\u5176\u662f\u5728\u8be5\u6709\u7b26\u53f7\u6570\u662f\u8d1f\u6570\u7684\u65f6\u5019\u3002\u6b64\u5916\uff0c\u8fd8\u4f1a\u6709\u6027\u80fd\u95ee\u9898\u3002\u5728\u5904\u7406\u50cf uid_t \u8fd9\u6837\u7684\u5bbd\u5ea6\u548c\u7b26\u53f7\u6027\u5728\u5404\u4e2a\u5e73\u53f0\u90fd\u4e0d\u4e00\u6837\u7684\u6574\u6570\u7c7b\u578b\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u8fd0\u7b97\u6765\u68c0\u67e5\u6ea2\u51fa\u901a\u5e38\u5728\u79fb\u690d\u548c\u6548\u7387\u4e0a\u90fd\u6210\u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5f88\u591a C \u5e94\u7528\u666e\u904d\u5047\u5b9a\u5305\u88c5\u884c\u4e3a\uff0c\u5e76\u4e14\u901a\u5e38\u4e5f\u5f88\u96be\u627e\u51fa\u5e76\u6ea2\u51fa\u6240\u6709\u4f7f\u7528\u8fd9\u4e9b\u5047\u8bbe\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u7ef4\u6301\u5047\u5b9a\u6ea2\u51fa\u5305\u88c5\u7684\u975e\u6807\u51c6\u4ee3\u7801\u8fd8\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u662f\u91cd\u5199\u5b83\u3002\u672c\u8282\u5269\u4f59\u90e8\u5206\u5c1d\u8bd5\u7ed9\u8fd9\u4e2a\u95ee\u9898\u4e00\u4e9b\u5b9e\u9645\u5efa\u8bae\u3002 \u5982\u679c\u4f60\u60f3\u8981\u68c0\u6d4b\u5728 sum = a + b \u4e2d\u662f\u5426\u6709\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\uff0c\u4f7f\u7528\u50cf (sum < a) != (b < 0) \u8fd9\u6837\u7684\u4ee3\u7801\u901a\u5e38\u662f\u5b89\u5168\u7684\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4f7f\u7528\u6709\u7b26\u53f7\u5faa\u73af\u7d22\u5f15\uff0c\u786e\u4fdd\u8be5\u7d22\u5f15\u8fd8\u6709\u4f7f\u7528\u8be5\u7d22\u5f15\u7684\u8868\u8fbe\u5f0f\u4e0d\u80fd\u6ea2\u51fa\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8bbe\u8ba1\u597d\u7684 2 \u79cd\u6ea2\u51fa\u5b9e\u4f8b\u7684\u95ee\u9898\u4ee3\u7801\uff1a for (i = INT_MAX - 10; i <= INT_MAX; i++) if (i + 1 < 0) { report_overflow (); break; } \u7531\u4e8e\u8fd9 2 \u79cd\u6ea2\u51fa\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0d\u517c\u5bb9\u7684\u5305\u88c5\u5047\u8bbe\u6765\u4f18\u5316\u6389\u6216\u8005\u8f6c\u6362\u8fd9 2 \u4e2a\u6bd4\u8f83\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4f7f\u7528\u50cf (i * 2000) / 1000 \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u4f60\u5b9e\u9645\u60f3\u8981\u4e58\u6cd5\u5305\u88c5\u6ea2\u51fa\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u8fd0\u7b97\u6765\u505a\uff0c\u5982 ((int) (i * 2000u)) / 1000 \u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u5047\u8bbe\u5305\u88c5\u884c\u4e3a\uff0c\u5e76\u4e14\u4f60\u60f3\u5c06\u5176\u4e0e\u4efb\u4f55\u4e0d\u652f\u6301\u8be5\u884c\u4e3a\u7684 GCC \u4f18\u5316\u9694\u79bb\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 GCC \u7684 -fwrapv \u9009\u9879\uff0c\u8fd9\u4f1a\u53ef\u9760\u5730\u5305\u88c5\u6709\u7b26\u53f7\u6ea2\u51fa\uff08\u4e0d\u5305\u62ec\u9664\u6cd5\u548c\u53d6\u4f59\uff0c\u4e0b\u8282\u8ba8\u8bba\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ecb\u5165\u6709\u7b26\u53f7\u6574\u578b\u5305\u88c5\u4e0d\u53ef\u9760\u7684\u5e73\u53f0\uff08\u4f8b\u5982\uff0c\u7531\u4e8e\u786c\u4ef6\u6ea2\u51fa\u68c0\u67e5\uff0c\u6216\u8005\u9ad8\u5ea6\u4fb5\u5165\u4f18\u5316\uff09\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u4f7f\u7528 GCC \u7684 -ftrapv \u9009\u9879\u8c03\u8bd5\uff0c\u5b83\u4f1a\u5728\u6709\u7b26\u53f7\u6ea2\u51fa\u65f6\u629b\u51fa\u5f02\u5e38\u3002 A.5 \u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5\u548c\u53d6\u4f59\u6ea2\u51fa \u00b6 \u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5\u6ea2\u51fa\u5e76\u4e0d\u603b\u662f\u65e0\u5bb3\u7684\uff1a\u4f8b\u5982\uff0c\u5728 i386 \u5bb6\u65cf\u7684 CPU \u4e0a\uff0c\u7528 -1 \u53bb\u9664 INT_MIN \u4f1a\u4ea7\u751f SIGFPE \u4fe1\u53f7\uff0c\u5176\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u7a0b\u5e8f\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9 2 \u4e2a\u6570\u53d6\u4f59\u901a\u5e38\u4ea7\u751f\u540c\u6837\u7684\u4fe1\u53f7\uff0c\u5c3d\u7ba1 C \u6807\u51c6\u8981\u6c42 INT_MIN % -1 \u4e3a 0 \u56e0\u4e3a\u8be5\u8868\u8fbe\u5f0f\u5e76\u6ca1\u6709\u6ea2\u51fa\u3002","title":"\u9644\u5f55A\uff1a\u6ea2\u51fa"},{"location":"Appendix-A-Overflow/#Integer-Overflow-Basics","text":"\u5728\u7c7b\u4f3c C \u7684\u8bed\u8a00\u4e2d\uff0c\u65e0\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u53ef\u9760\u5730\u5305\u88c5\uff1b\u4f8b\u5982\uff1a UINT_MAX + 1 \u5f97\u5230 0\u3002C \u6807\u51c6\u4fdd\u8bc1\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u5728\u5b9e\u8df5\u4e2d\u662f\u53ef\u79fb\u690d\u7684\uff0c\u9664\u975e\u4f60\u6307\u5b9a\u4e86\u4fb5\u5165\u6027\u7684\u53ea\u9002\u7528\u4e8e\u7279\u5b9a\u7a0b\u5e8f\u7684\u975e\u6807\u51c6\u4f18\u5316\u9009\u9879\u3002 \u76f8\u53cd\uff0cC \u6807\u51c6\u8bf4\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u6b64\u65f6\u7a0b\u5e8f\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5305\u62ec\u6838\u5fc3\u8f6c\u50a8\u6216\u8005\u6ea2\u51fa\u7f13\u51b2\u533a\u3002\u4e0d\u5f53\u884c\u4e3a\u751a\u81f3\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002\u8fd9\u6837\u7684\u6ea2\u51fa\u53ef\u4ee5\u5728\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u548c\u5de6\u79fb\u65f6\u53d1\u751f\u3002 \u5f88\u591a C \u7a0b\u5e8f\u65e0\u89c6 C \u6807\u51c6\u7684\u9700\u6c42\uff0c\u5047\u5b9a\u4f60\u8981\u628a\u7ed3\u679c\u8f6c\u6210\u6709\u7b26\u53f7\u6574\u578b\u6216\u8005\u5b58\u5230\u6709\u7b26\u53f7\u6574\u578b\u53d8\u91cf\u91cc\uff0c\u6709\u7b26\u53f7\u6574\u6570\u7684\u6ea2\u51fa\u4f1a\u9690\u5f0f\u4f7f\u7528\u8865\u7801\u8fd0\u7b97\u5305\u88c5\u5728\u5bf9 2 \u7684\u5e42\u53d6\u6a21\u91cc\u3002\u5982\u679c\u4f60\u4f7f\u7528\u4fdd\u5b88\u7684\u4f18\u5316\u9009\u9879\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u901a\u5e38\u5bf9\u4e8e\u4e3b\u6d41\u7684\u73b0\u4ee3\u5e73\u53f0\u90fd\u662f\u53ef\u79fb\u690d\u7684\uff0c\u4f46\u53c8\u4e00\u4e9b\u4f8b\u5916\uff0c\u6211\u4eec\u968f\u540e\u8ba8\u8bba\u3002 \u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cC \u6807\u51c6\u5141\u8bb8\u4f7f\u7528\u53cd\u7801\u6216\u8005\u7b26\u53f7\u5316\u6570\u503c\u8fd0\u7b97\u7684\u5b9e\u73b0\uff0c\u4f46\u5230\u4eca\u5929\u90fd\u8ba4\u540c\u8865\u7801\u662f\u5b89\u5168\u7684\u3002 \u6b64\u5916\uff0c\u6ea2\u51fa\u4f1a\u5728\u628a\u4e00\u4e2a\u8d85\u8303\u56f4\u7684\u503c\u8f6c\u6210\u6709\u7b26\u53f7\u6574\u578b\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u5b9e\u73b0\u5fc5\u987b\u5b9a\u4e49\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4f46\u8fd9\u53ef\u80fd\u5305\u62ec\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6240\u6709\u5df2\u77e5\u7684\u5b9e\u73b0\u90fd\u652f\u6301\u9690\u5f0f\u5730\u5305\u88c5\uff0c\u56e0\u6b64\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u5176\u4ed6\u53ef\u80fd\u3002","title":"A.1 \u6574\u6570\u6ea2\u51fa\u57fa\u7840"},{"location":"Appendix-A-Overflow/#Signed-Overflow-Examples","text":"\u957f\u671f\u4ee5\u6765\uff0cC \u6807\u51c6\u8981\u6c42\u7684\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\u884c\u4e3a\u548c C \u7a0b\u5e8f\u901a\u5e38\u5047\u8bbe\u7684\u884c\u4e3a\u6709\u4e00\u4e9b\u51fa\u5165\u3002\u6807\u51c6\u5141\u8bb8\u57fa\u4e8e\u6ea2\u51fa\u4e0d\u4f1a\u53d1\u751f\u7684\u5047\u8bbe\u7684\u4fb5\u5165\u5f0f\u4f18\u5316\uff0c\u4f46\u8bb8\u591a\u7a0b\u5e8f\u5374\u4f9d\u8d56\u6ea2\u51fa\u5305\u88c5\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u7b26\u5408\u6807\u51c6\uff0c\u4f46\u901a\u5e38\u90fd\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f5c\u8005\u663e\u7136\u4e0d\u613f\u610f\u5b9e\u73b0\u4f1a\u4e2d\u65ad\u7a0b\u5e8f\u7684\u4f18\u5316\uff0c\u9664\u975e\u7528\u6237\u6307\u5b9a\u4e86\u4fb5\u5165\u5f0f\u4f18\u5316\u3002 C \u6807\u51c6\u8bf4\u5982\u679c\u7a0b\u5e8f\u6709\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\uff0c\u90a3\u5b83\u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5e76\u4e14\u8be5\u672a\u5b9a\u4e49\u884c\u4e3a\u751a\u81f3\u53ef\u80fd\u9020\u6210\u6ea2\u51fa\u3002\u4f8b\u5982\uff1a if (password == expected_password) allow_superuser_privileges (); else if (counter++ == INT_MAX) abort (); else printf (\"%d password mismatches\\n\", counter); \u5982\u679c int \u53d8\u91cf counter \u7b49\u4e8e INT_MAX \uff0c\u5219 counter++ \u4e00\u5b9a\u4f1a\u6ea2\u51fa\uff0c\u800c\u8be5\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64 C \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a\u548c INT_MAX \u7684\u6bd4\u8f83\u548c abort \u51fd\u6570\u8c03\u7528\u4f18\u5316\u6389\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u66f4\u65e9\u7684\u4e00\u4e2a bug \u8ba9\u7f16\u8bd1\u5668\u63a8\u65ad\u51fa counter == INT_MAX \u6216\u8005 counter \u4e4b\u524d\u5c31\u6ea2\u51fa\u4e86\uff0cC \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a password \u7684\u6d4b\u8bd5\u4e5f\u4f18\u5316\u6389\uff1b\u8fd9\u6837\u751f\u6210\u7684\u4ee3\u7801\u65e0\u6761\u4ef6\u5730\u5141\u8bb8\u8d85\u7ea7\u7528\u6237\u6743\u9650\u3002 \u629b\u5f00\u6807\u51c6\u7684\u8fd9\u4e2a\u8981\u6c42\u4e0d\u8bf4\uff0c\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4 C \u4ee3\u7801\u90fd\u5047\u8bbe\u5728\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u53d1\u751f\u4e4b\u540e\u4f1a\u6709\u5305\u88c5\u8fd0\u7b97\uff0c\u800c\u6240\u6709\u7684\u5df2\u77e5 C \u5b9e\u73b0\u652f\u6301\u4e00\u4e9b\u5047\u8bbe\u4f1a\u5305\u88c5\u6ea2\u51fa\u7684 C \u65b9\u8a00\uff0c\u5373\u4f7f\u8fd9\u4e9b\u65b9\u8a00\u548c\u6807\u51c6\u5b8c\u5168\u4e0d\u7b26\u3002\u50cf\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u7f16\u8bd1\u5668\u4e2d\u7edd\u5bf9\u53ef\u4ee5\u5de5\u4f5c\uff1a \u4e0b\u9762\u7684\u4ee3\u7801\u6765\u81ea\u4e8e\u7b2c\u4e03\u7248 Unix \u7684 atoi \u5b9e\u73b0\uff081979-01-10\uff09\uff1a char *p; int f, n; \u2026 while (*p >= '0' && *p <= '9') n = n * 10 + *p++ - '0'; return (f ? -n : n); \u5373\u4f7f\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5728\u8303\u56f4\u5185\uff0c\u5f53\u8ba1\u7b97\u6700\u5927\u8d1f\u6570\u7684\u65f6\u5019\uff08\u5373 -n \u6ea2\u51fa\uff09\u6216\u8005\u8ba1\u7b97\u63a5\u8fd1\u6781\u5927\u6574\u6570\uff08\u6b63\u6570\u6ea2\u51fa\uff09\u5728\u5927\u591a\u6570\u73b0\u4ee3\u673a\u5668\u4e0a\u8fd8\u662f\u6709\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u95ee\u9898\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea\u7b2c\u4e03\u7248 Unix \u7684 rand \u5b9e\u73b0(1979-01-10)\u3002\u8be5\u7a0b\u5e8f\u671f\u671b\u4e58\u548c\u52a0\u4f1a\u5305\u88c5\u6ea2\u51fa\uff1a static long int randx = 1; \u2026 randx = randx * 1103515245 + 12345; return (randx >> 16) & 077777; \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea GNU C \u5e93 2.5 \u7684 mktime \u5b9e\u73b0\uff082006-09-09\uff09\uff0c\u8be5\u4ee3\u7801\u5047\u8bbe + \u8fd0\u7b97\u7b26\u5305\u88c5\u6ea2\u51fa\u6765\u68c0\u67e5\u6709\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a time_t t, t1, t2; int sec_requested, sec_adjustment; \u2026 t1 = t + sec_requested; t2 = t1 + sec_adjustment; if (((t1 < t) != (sec_requested < 0)) || ((t2 < t1) != (sec_adjustment < 0))) return -1; \u5982\u679c\u4f60\u7684\u4ee3\u7801\u50cf\u8fd9\u6837\uff0c\u90a3\u5b83\u57fa\u672c\u662f\u5b89\u5168\u7684\uff0c\u5373\u4f7f\u4e0d\u7b26\u5408 C \u6807\u51c6\u3002\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4eba\u4ee5\u4e3a\u53ef\u4ee5\u5047\u5b9a\u6ea2\u51fa\u4f1a\u88ab\u5305\u88c5\uff0c\u4f46\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u5c31\u50cf\u4e0b\u4e00\u8282\u770b\u5230\u7684\u3002","title":"A.2 \u5047\u5b9a\u5305\u88c5\u6ea2\u51fa\u7684\u793a\u4f8b\u4ee3\u7801"},{"location":"Appendix-A-Overflow/#Optimization-and-Wraparound","text":"\u6709\u65f6\u5019\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u5e76\u4e0d\u5305\u88c5\u6574\u6570\u8fd0\u7b97\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u662f\u4ee3\u6570\u5316\u7b80\uff1a\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u628a (i * 2000) / 1000 \u7ffb\u8bd1\u6210 i * 2 \uff0c\u56e0\u4e3a\u5b83\u5047\u5b9a i * 2 \u4e0d\u4f1a\u6ea2\u51fa\u3002\u5f53\u6ea2\u51fa\u53d1\u751f\u65f6\uff0c\u7ffb\u8bd1\u7ed3\u679c\u5c31\u4e0d\u7b49\u4e8e\u539f\u6765\u7684\u542b\u4e49\u4e86\uff1a\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5178\u578b\u7684 32 \u4f4d\u6709\u7b26\u53f7\u8865\u7801\u5305\u88c5\u7684\u6574\u578b\u7684\u60c5\u51b5\uff0c\u5982\u679c i \u7684\u7c7b\u578b\u662f int \u5e76\u4e14\u503c\u662f 1073742\uff0c\u539f\u6765\u8868\u8fbe\u5f0f\u5f97\u5230\u7684\u662f -2147483\uff0c\u4f46\u4f18\u5316\u540e\u5f97\u5230\u7684\u662f\u7b97\u672f\u4e0a\u6b63\u786e\u7684 2147484\u3002 \u66f4\u5fae\u5999\u5730\uff0c\u5faa\u73af\u5f52\u7eb3\u4f18\u5316\u66f4\u5bb9\u6613\u66b4\u9732\u51fa\u6709\u7b26\u53f7\u6ea2\u51fa\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u3002\u770b\u4e0b\u9762\u8fd9\u4e2a\u6545\u610f\u8bbe\u8ba1\u7684\u51fd\u6570 sumc \uff1a int sumc (int lo, int hi) { int sum = 0; int i; for (i = lo; i <= hi; i++) sum ^= i * 53; return sum; } \u4e3a\u4e86\u907f\u514d\u6bcf\u4e00\u6b21\u5faa\u73af\u90fd\u4e58 53\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u5728\u5185\u90e8\u628a sumc \u8f6c\u6362\u6210\u4e86\uff1a int transformed_sumc (int lo, int hi) { int sum = 0; int hic = hi * 53; int ic; for (ic = lo * 53; ic <= hic; ic += 53) sum ^= ic; return sum; } \u8fd9\u4e2a\u8f6c\u6362\u662f\u9075\u5faa C \u6807\u51c6\u7684\uff0c\u4f46\u5f53 INT_MAX / 53 < hi \u6210\u7acb\u65f6\u5305\u88c5\u8fd0\u7b97\u662f\u975e\u6cd5\u7684\uff0c\u56e0\u4e3a\u8ba1\u7b97\u50cf hi * 53 \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u65f6\u6ea2\u51fa\u53ef\u80fd\u4f1a\u9020\u6210\u8868\u8fbe\u5f0f i <= hi \u751f\u6210\u7684\u503c\u548c\u8f6c\u6362\u540e\u7684\u8868\u8fbe\u5f0f ic <= hic \u4e0d\u540c\u3002 \u56e0\u6b64\uff0c\u5f53\u6d89\u53ca\u50cf ic \u8fd9\u6837\u7684\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u65f6\uff0c\u4f7f\u7528\u5faa\u73af\u5f52\u7eb3\u548c\u76f8\u4f3c\u6280\u672f\u7684\u7f16\u8bd1\u5668\u901a\u5e38\u4e0d\u652f\u6301\u53ef\u9760\u7684\u5305\u88c5\u8fd0\u7b97\u3002\u65e2\u7136\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u662f\u7f16\u8bd1\u5668\u751f\u6210\u7684\uff0c\u800c\u5728\u6e90\u4ee3\u7801\u4e2d\u4e0d\u53ef\u89c1\uff0c\u56e0\u6b64\u5e76\u4e0d\u603b\u662f\u7b80\u5355\u7684\u8bf4\u8be5\u95ee\u9898\u662f\u5426\u5f71\u54cd\u4f60\u7684\u4ee3\u7801\u3002 \u5728\u50cf\u8fd9\u6837\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b9e\u9645\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u4f9d\u8d56\u5305\u88c5\u8fd0\u7b97\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5faa\u73af\u5f52\u7eb3\u4f18\u5316\u603b\u662f\u5f88\u6709\u7528\u7684\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u8fd8\u662f\u4f1a\u4ea7\u751f\u95ee\u9898\u7684\u3002\u5982\uff1a int j; for (j = 1; 0 < j; j *= 2) test (j); \u8fd9\u91cc\uff0c\u8be5\u5faa\u73af\u5c1d\u8bd5\u8fed\u4ee3\u6240\u6709 int \u7c7b\u578b\u80fd\u8868\u793a\u7684 2 \u7684\u5e42\uff0c\u4f46\u662f C \u6807\u51c6\u5141\u8bb8\u7f16\u8bd1\u5668\u628a\u6bd4\u8f83\u4f18\u5316\u6389\uff0c\u5728\u6ea2\u51fa\u884c\u4e3a\u672a\u5b9a\u4e49\u7684\u60c5\u51b5\u4e0b\u751f\u6210\u65e0\u9650\u5faa\u73af\u7684\u4ee3\u7801\u3002\u7531\u6b64\uff0c\u4efb\u4f55\u751f\u4ea7\u7248\u672c\u7684\u5e26 -O2 \u7684GCC \u90fd\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\uff0c\u4f46\u662f\u5176\u4ed6\u7f16\u8bd1\u5668\u6216\u66f4\u591a\u7684\u4fb5\u5165\u5f0f\u7684 GCC \u4f18\u5316\u9009\u9879\u53ef\u80fd\u4f1a\u505a\u3002\u5e76\u4e14 GCC \u5f00\u53d1\u8005\u8fd8\u6ca1\u6709\u51b3\u5b9a\u5b83\u662f\u5426\u5c06\u7ee7\u7eed\u548c -O2 \u7684 GCC \u4e00\u8d77\u5de5\u4f5c\u3002","title":"A.3 \u4e2d\u6b62\u5305\u88c5\u8fd0\u7b97\u7684\u4f18\u5316"},{"location":"Appendix-A-Overflow/#Signed-Overflow-Advice","text":"\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6700\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u5b8c\u5168\u907f\u514d\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u3002\u4f8b\u5982\uff0c\u4e0d\u8981\u76f4\u63a5\u628a 2 \u4e2a\u6709\u7b26\u53f7\u6574\u6570\u76f8\u4e58\uff0c\u800c\u662f\u5148\u628a\u4ed6\u4eec\u8f6c\u6210\u65e0\u7b26\u53f7\u6574\u6570\u518d\u4e58\uff0c\u7136\u540e\u6d4b\u8bd5\u7ed3\u679c\u662f\u5426\u662f\u6709\u7b26\u53f7\u6570\u3002 \u7528\u8fd9\u79cd\u65b9\u5f0f\u91cd\u5199\u4ee3\u7801\u5f88\u4e0d\u65b9\u4fbf\uff0c\u5c24\u5176\u662f\u5728\u8be5\u6709\u7b26\u53f7\u6570\u662f\u8d1f\u6570\u7684\u65f6\u5019\u3002\u6b64\u5916\uff0c\u8fd8\u4f1a\u6709\u6027\u80fd\u95ee\u9898\u3002\u5728\u5904\u7406\u50cf uid_t \u8fd9\u6837\u7684\u5bbd\u5ea6\u548c\u7b26\u53f7\u6027\u5728\u5404\u4e2a\u5e73\u53f0\u90fd\u4e0d\u4e00\u6837\u7684\u6574\u6570\u7c7b\u578b\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u8fd0\u7b97\u6765\u68c0\u67e5\u6ea2\u51fa\u901a\u5e38\u5728\u79fb\u690d\u548c\u6548\u7387\u4e0a\u90fd\u6210\u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5f88\u591a C \u5e94\u7528\u666e\u904d\u5047\u5b9a\u5305\u88c5\u884c\u4e3a\uff0c\u5e76\u4e14\u901a\u5e38\u4e5f\u5f88\u96be\u627e\u51fa\u5e76\u6ea2\u51fa\u6240\u6709\u4f7f\u7528\u8fd9\u4e9b\u5047\u8bbe\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u7ef4\u6301\u5047\u5b9a\u6ea2\u51fa\u5305\u88c5\u7684\u975e\u6807\u51c6\u4ee3\u7801\u8fd8\u662f\u5f88\u6709\u7528\u7684\uff0c\u800c\u4e0d\u662f\u91cd\u5199\u5b83\u3002\u672c\u8282\u5269\u4f59\u90e8\u5206\u5c1d\u8bd5\u7ed9\u8fd9\u4e2a\u95ee\u9898\u4e00\u4e9b\u5b9e\u9645\u5efa\u8bae\u3002 \u5982\u679c\u4f60\u60f3\u8981\u68c0\u6d4b\u5728 sum = a + b \u4e2d\u662f\u5426\u6709\u6709\u7b26\u53f7\u6574\u578b\u6ea2\u51fa\uff0c\u4f7f\u7528\u50cf (sum < a) != (b < 0) \u8fd9\u6837\u7684\u4ee3\u7801\u901a\u5e38\u662f\u5b89\u5168\u7684\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4f7f\u7528\u6709\u7b26\u53f7\u5faa\u73af\u7d22\u5f15\uff0c\u786e\u4fdd\u8be5\u7d22\u5f15\u8fd8\u6709\u4f7f\u7528\u8be5\u7d22\u5f15\u7684\u8868\u8fbe\u5f0f\u4e0d\u80fd\u6ea2\u51fa\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8bbe\u8ba1\u597d\u7684 2 \u79cd\u6ea2\u51fa\u5b9e\u4f8b\u7684\u95ee\u9898\u4ee3\u7801\uff1a for (i = INT_MAX - 10; i <= INT_MAX; i++) if (i + 1 < 0) { report_overflow (); break; } \u7531\u4e8e\u8fd9 2 \u79cd\u6ea2\u51fa\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0d\u517c\u5bb9\u7684\u5305\u88c5\u5047\u8bbe\u6765\u4f18\u5316\u6389\u6216\u8005\u8f6c\u6362\u8fd9 2 \u4e2a\u6bd4\u8f83\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4f7f\u7528\u50cf (i * 2000) / 1000 \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u4f60\u5b9e\u9645\u60f3\u8981\u4e58\u6cd5\u5305\u88c5\u6ea2\u51fa\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u8fd0\u7b97\u6765\u505a\uff0c\u5982 ((int) (i * 2000u)) / 1000 \u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u5047\u8bbe\u5305\u88c5\u884c\u4e3a\uff0c\u5e76\u4e14\u4f60\u60f3\u5c06\u5176\u4e0e\u4efb\u4f55\u4e0d\u652f\u6301\u8be5\u884c\u4e3a\u7684 GCC \u4f18\u5316\u9694\u79bb\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 GCC \u7684 -fwrapv \u9009\u9879\uff0c\u8fd9\u4f1a\u53ef\u9760\u5730\u5305\u88c5\u6709\u7b26\u53f7\u6ea2\u51fa\uff08\u4e0d\u5305\u62ec\u9664\u6cd5\u548c\u53d6\u4f59\uff0c\u4e0b\u8282\u8ba8\u8bba\uff09\u3002 \u5982\u679c\u4f60\u9700\u8981\u4ecb\u5165\u6709\u7b26\u53f7\u6574\u578b\u5305\u88c5\u4e0d\u53ef\u9760\u7684\u5e73\u53f0\uff08\u4f8b\u5982\uff0c\u7531\u4e8e\u786c\u4ef6\u6ea2\u51fa\u68c0\u67e5\uff0c\u6216\u8005\u9ad8\u5ea6\u4fb5\u5165\u4f18\u5316\uff09\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u4f7f\u7528 GCC \u7684 -ftrapv \u9009\u9879\u8c03\u8bd5\uff0c\u5b83\u4f1a\u5728\u6709\u7b26\u53f7\u6ea2\u51fa\u65f6\u629b\u51fa\u5f02\u5e38\u3002","title":"A.4 \u5173\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u6ea2\u51fa\u7684\u5b9e\u8df5\u5efa\u8bae"},{"location":"Appendix-A-Overflow/#Signed-Integer-Division","text":"\u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5\u6ea2\u51fa\u5e76\u4e0d\u603b\u662f\u65e0\u5bb3\u7684\uff1a\u4f8b\u5982\uff0c\u5728 i386 \u5bb6\u65cf\u7684 CPU \u4e0a\uff0c\u7528 -1 \u53bb\u9664 INT_MIN \u4f1a\u4ea7\u751f SIGFPE \u4fe1\u53f7\uff0c\u5176\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u7a0b\u5e8f\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9 2 \u4e2a\u6570\u53d6\u4f59\u901a\u5e38\u4ea7\u751f\u540c\u6837\u7684\u4fe1\u53f7\uff0c\u5c3d\u7ba1 C \u6807\u51c6\u8981\u6c42 INT_MIN % -1 \u4e3a 0 \u56e0\u4e3a\u8be5\u8868\u8fbe\u5f0f\u5e76\u6ca1\u6709\u6ea2\u51fa\u3002","title":"A.5 \u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5\u548c\u53d6\u4f59\u6ea2\u51fa"},{"location":"Data-Types/","text":"2.1 \u57fa\u7840\u6570\u636e\u7c7b\u578b \u00b6 2.1.1 \u6574\u578b \u00b6 \u6574\u578b\u7684\u8303\u56f4\u5728 8 \u4f4d\u5230 32 \u4f4d\u4e4b\u95f4\u3002C99 \u6269\u5c55\u5230\u4e86 64 \u4f4d\u3002\u4f60\u5e94\u8be5\u4f7f\u7528\u6574\u578b\u6765\u5b58\u50a8\u6574\u6570\uff08\u5e76\u4e14\u4f7f\u7528 char \u7c7b\u578b\u5b58\u50a8\u5b57\u7b26\uff09\u3002\u4ee5\u4e0b\u5217\u51fa\u7684\u6240\u6709\u6574\u578b\u7684\u5927\u5c0f\u548c\u8303\u56f4\u90fd\u662f\u6700\u5c0f\u7684\uff1b\u6839\u636e\u4f60\u7684\u8ba1\u7b97\u673a\u5e73\u53f0\uff0c\u4ed6\u4eec\u7684\u5927\u5c0f\u548c\u8303\u56f4\u53ef\u80fd\u66f4\u5927\u3002 \u5c3d\u7ba1\u8fd9\u4e9b\u6574\u578b\u7684\u8303\u56f4\u5f88\u81ea\u7136\u5730\u6392\u5217[\u8bd1\u6ce8]\uff0c\u4f46\u6807\u51c6\u5e76\u4e0d\u8981\u6c42\u4efb\u4f55 2 \u79cd\u7c7b\u578b\u7684\u8303\u56f4\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u4f17\u6240\u5468\u77e5 int \u548c long \u7684\u8303\u56f4\u662f\u76f8\u540c\u7684\u3002\u6807\u51c6\u751a\u81f3\u5141\u8bb8 singed char \u548c long \u8303\u56f4\u76f8\u540c\uff0c\u5c3d\u7ba1\u8fd9\u6837\u7684\u5e73\u53f0\u5f88\u5c11\u89c1\u3002 singed char 8 \u4f4d signed char \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -128 \u548c 127 \u4e4b\u95f4\u7684\u6574\u6570 unsigned char 8 \u4f4d unsigned char \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 255 \u4e4b\u95f4\u7684\u6574\u6570 char \u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c char \u7c7b\u578b\u8981\u4e48\u548c signed char \u76f8\u540c\uff0c\u8981\u4e48\u548c unsigned char \u76f8\u540c\uff08\u7136\u800c\u4ed6\u4eec\u662f 3 \u79cd\u4e0d\u540c\u7684\u7c7b\u578b\uff09\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 char \u7c7b\u578b\u6765\u5b58\u50a8 ASCII \u5b57\u7b26\uff08\u5982 'm' \uff09\uff0c\u5305\u62ec\u8f6c\u4e49\u5b57\u7b26\uff08\u5982 '\\n' \uff09 short int 16 \u4f4d short int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -32768 \u548c 32767 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 short , signed short int \u6216\u8005 signed short unsigned short int 16 \u4f4d unsigned short int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 65535 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned short int 32 \u4f4d int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -2147483648 \u548c 2147483647 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 signed int \u6216\u8005 signed unsigned int 32 \u4f4d unsigned int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 4294967295 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u7b80\u5199\u6210 unsigned long int 32 \u4f4d long int \u7c7b\u578b\u81f3\u5c11\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -2147483648 \u548c 2147483647 \u4e4b\u95f4\u7684\u6574\u6570\uff08\u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c\u8be5\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u662f 64 \u4f4d\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u5c31\u76f8\u5f53\u4e8e long long int \u7c7b\u578b\u4e86\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 long \uff0c signed long int \uff0c\u6216\u8005 signed long unsigned long int 32 \u4f4d unsigned long int \u7c7b\u578b\u81f3\u5c11\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 4294967295 \u4e4b\u95f4\u7684\u6574\u6570\uff08\u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c\u8be5\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u662f 64 \u4f4d\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u5c31\u76f8\u5f53\u4e8e unsigned long long int \u7c7b\u578b\u4e86\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned long long long int 64 \u4f4d long long int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -9223372036854775808 \u548c 9223372036854775807 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 long long \uff0c signed long long int \u6216\u8005 signed long long \u3002\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u5c5e\u4e8e C89 \u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5c5e\u4e8e C99 \u548c GNU C \u6269\u5c55 unsigned long long int 64 \u4f4d unsigned long long int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 18446744073709551615 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned long long \u3002\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u5c5e\u4e8e C89 \u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5c5e\u4e8e C99 \u548c GNU C \u6269\u5c55 \u4e0b\u9762\u662f\u51e0\u4e2a\u58f0\u660e\u548c\u5b9a\u4e49\u6574\u578b\u7684\u4f8b\u5b50\uff1a int foo; unsigned int bar = 42; char quux = 'a'; \u7b2c\u4e00\u884c\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505a foo \u7684\u6574\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u7ed9\u4ed6\u5b9a\u4e49\u503c\uff1b\u5b83\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u4e0d\u80fd\u5047\u8bbe\u4efb\u4f55\u503c\u3002 2.1.2 \u5b9e\u6570\u7c7b\u578b \u00b6 \u5171\u6709 3 \u79cd\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u5206\u6570\u3002\u5c3d\u7ba1\u5728\u73b0\u5728\u4f7f\u7528\u7684\u5927\u591a\u6570\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e0a\u5b83\u4eec\u7684\u5927\u5c0f\u548c\u8303\u56f4\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5728\u5386\u53f2\u4e0a\u4e0d\u540c\u7684\u7cfb\u7edf\u5374\u662f\u4e0d\u540c\u7684\u3002\u56e0\u6b64\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4ee5\u5b8f\u5b9a\u4e49\u7684\u5f62\u5f0f\u88ab\u5b58\u5728\u5e93\u5934\u6587\u4ef6 float.h \u4e2d\u3002\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u7528\u5b8f\u5b9a\u4e49\u7684\u540d\u5b57\u6765\u4ee3\u66ff\u5b83\u4eec\u7684\u53ef\u80fd\u503c\uff1b\u4f60\u53ef\u4ee5\u67e5\u770b\u4f60\u7cfb\u7edf\u7684 float.h \u6765\u6216\u8005\u660e\u786e\u5730\u503c\u3002 float float \u7c7b\u578b\u662f 3 \u79cd\u6d6e\u70b9\u7c7b\u578b\u4e2d\u6700\u5c0f\u7684\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u5927\u5c0f\u6839\u672c\u4e0d\u540c\u7684\u8bdd\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 FLT_MIN \u4e2d\uff0c\u5e76\u5e94\u8be5\u4e0d\u5927\u4e8e 1e-37 \uff1b\u6700\u5927\u503c\u5b58\u5728 FLT_MAX \u4e2d\uff0c\u5e76\u5e94\u8be5\u4e0d\u5c0f\u4e8e 1e37 double double \u7c7b\u578b\u81f3\u5c11\u8981\u548c float \u7c7b\u578b\u4e00\u6837\u5927\uff0c\u5e76\u5e94\u8be5\u66f4\u5927\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 DBL_MIN \u4e2d\uff1b\u6700\u5927\u503c\u5b58\u5728 DBL_MAX \u4e2d long double long double \u7c7b\u578b\u81f3\u5c11\u8981\u548c float \u7c7b\u578b\u4e00\u6837\u5927\uff0c\u5e76\u5e94\u8be5\u66f4\u5927\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 LDBL_MIN \u4e2d\uff1b\u6700\u5927\u503c\u5b58\u5728 LDBL_MAX \u4e2d \u6240\u6709\u6d6e\u70b9\u7c7b\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\uff1b\u4f7f\u7528 unsigned float \u4f1a\u9020\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\u7684\u3002 \u8fd9\u91cc\u6709\u51e0\u4e2a\u58f0\u660e\u548c\u5b9a\u4e49\u5b9e\u6570\u7c7b\u578b\u53d8\u91cf\u7684\u4f8b\u5b50\uff1a float foo; double bar = 114.3943; \u7b2c\u4e00\u884c\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505a foo \u7684 float \u7c7b\u578b\u53d8\u91cf\u4f46\u672a\u5b9a\u4e49\u503c\uff1b\u5b83\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u4e0d\u80fd\u5047\u8bbe\u4efb\u4f55\u503c\u3002 C \u4e2d\u63d0\u4f9b\u7684\u5b9e\u6570\u7c7b\u578b\u7cbe\u5ea6\u6709\u9650\uff0c\u6240\u4ee5\u5e76\u4e0d\u80fd\u7cbe\u786e\u8868\u793a\u6240\u6709\u7684\u5b9e\u6570\u3002\u5927\u591a\u6570\u4f7f\u7528 GCC \u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u4f7f\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u5b9e\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u8868\u793a\u50cf 4.2 \u8fd9\u6837\u7684\u6570\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u63a8\u8350\u4f60\u5728\u5224\u5b9e\u6570\u76f8\u7b49\u7684\u65f6\u5019\u4e0d\u8981\u4f7f\u7528 == \u64cd\u4f5c\u7b26\uff0c\u800c\u662f\u68c0\u67e5 2 \u4e2a\u5b9e\u6570\u7684\u5dee\u662f\u5426\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002 \u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u7531\u4e8e\u4e0d\u7cbe\u786e\u8868\u793a\u9020\u6210\u7684\u4e9b\u8bb8\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8be6\u60c5\u53c2\u89c1 David Goldberg \u7684\u8bba\u6587 What Every Computer Scientist Should Know About Floating-Point Arithmetic \u4ee5\u53ca Donald Knuth \u7684 The Art of Computer Programming \u7684 4.2.2 \u8282\u3002 2.1.3 \u590d\u6570\u7c7b\u578b \u00b6 GCC \u5f15\u5165\u4e00\u4e9b\u590d\u6570\u7c7b\u578b\u4f5c\u4e3a C89 \u7684\u6269\u5c55\u3002\u7c7b\u4f3c\u7684\u7279\u6027\u4e5f\u88ab\u5f15\u5165 C99\uff0c\u4f46\u5b83\u4eec\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u6211\u4eec\u5148\u4ecb\u7ecd\u6807\u51c6\u7684\u590d\u6570\u7c7b\u578b\u3002 2.1.3.1 \u6807\u51c6\u590d\u6570\u7c7b\u578b \u00b6 Complex \u7c7b\u578b\u5728 C99 \u4e2d\u88ab\u5f15\u5165\u3002\u5171\u6709 3 \u79cd\u590d\u6570\u7c7b\u578b\uff1a float _Complex double _Complex ong double _Complex \u8fd9\u91cc\u7684\u540d\u5b57\u90fd\u662f\u4ee5\u4e00\u4e2a\u4e0b\u5212\u7ebf\u8ddf\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u59cb\uff0c\u4ee5\u514d\u548c\u73b0\u6709\u7a0b\u5e8f\u7684\u6807\u8bc6\u7b26\u51b2\u7a81\u3002\u7136\u800c\uff0cC99 \u7684\u6807\u51c6\u5934\u6587\u4ef6 <ltcomplex.h> \u5f15\u5165\u4e86\u4e00\u4e9b\u5b8f\u6765\u7b80\u5316\u590d\u6570\u7c7b\u578b\u7684\u4f7f\u7528\u3002 complex \u4ee3\u66ff _Complex \u3002\u4f7f\u5f97\u53ef\u4ee5\u8fd9\u6837 double complex \u58f0\u660e\u53d8\u91cf\uff0c\u770b\u8d77\u6765\u66f4\u81ea\u7136\u4e00\u4e9b\u3002 I I \u662f const float _Complex \u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u503c\u662f\u590d\u6570\u7684\u865a\u90e8\u5355\u4f4d\uff0c\u901a\u5e38\u8bf4\u7684 i \u3002 <complex.h> \u4e5f\u58f0\u660e\u4e86\u4e00\u4e9b\u590d\u6570\u8fd0\u7b97\u51fd\u6570\uff0c\u5982 creal \u548c cimag \u51fd\u6570\u5206\u522b\u7528\u6765\u83b7\u53d6 double complex \u7c7b\u578b\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002\u8fd8\u6709\u5176\u4ed6\u51fd\u6570\uff0c\u50cf\u4e0b\u9762\u4f8b\u5b50\u6240\u793a\u7684\uff1a #include <complex.h> #include <stdio.h> void example (void) { complex double z = 1.0 + 3.0*I; printf (\"Phase is %f, modulus is %f\\n\", carg (z), cabs (z)); } 2.1.3.2 GNU \u6269\u5c55\u7684\u590d\u6570\u7c7b\u578b \u00b6 GCC \u4e5f\u5f15\u5165\u4e86\u590d\u6570\u7c7b\u578b\u4f5c\u4e3a C89 \u7684 GNU \u6269\u5c55\uff0c\u4f46\u662f\u5199\u6cd5\u4e0d\u540c\u3002\u5728 C89 \u7684 GCC \u6269\u5c55\u4e2d\uff0c\u6d6e\u70b9\u590d\u6570\u7684\u5199\u6cd5\u5982\u4e0b\uff1a __complex__ float __complex__ double __complex__ long double GCC \u6269\u5c55\u4e0d\u6b62\u5141\u8bb8\u590d\u6570\u662f\u6d6e\u70b9\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u590d\u6570\u7c7b\u578b\u548c\u6574\u6570\u590d\u6570\u7c7b\u578b\uff1b\u5b9e\u9645\u4e0a __complex__ \u53ef\u4ee5\u7528\u5728\u4efb\u4f55\u57fa\u7840\u6570\u636e\u7c7b\u578b\u4e0a\u3002\u8fd9\u91cc\u4e0d\u4f1a\u7ed9\u51fa\u6240\u6709\u7684\u7ec4\u5408\uff0c\u4f46\u4f1a\u7ed9\u51e0\u4e2a\u4f8b\u5b50\uff1a __complex__ float __complex__ float \u7c7b\u578b\u6709 2 \u90e8\u5206\uff1a\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u4ed6\u4eec\u90fd\u662f float \u7c7b\u578b __complex__ int __complex__ int \u4e5f\u6709 2 \u90e8\u5206\uff1a\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u5b83\u4eec\u90fd\u662f int \u7c7b\u578b \u4e3a\u4e86\u83b7\u53d6\u4e00\u4e2a\u590d\u6570\u503c\u8868\u8fbe\u5f0f\u7684\u5b9e\u90e8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 __real__ \u5173\u952e\u5b57\uff0c\u540e\u9762\u8ddf\u4e0a\u8be5\u8868\u8fbe\u5f0f\uff1b\u540c\u6837\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 __imag__ \u83b7\u53d6\u865a\u90e8\u3002 __complex__ float a = 4 + 3i; float b = __real__ a; /* b is now 4. */ float c = __imag__ a; /* c is now 3. */ \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u6d6e\u70b9\u590d\u6570\u7c7b\u578b\u7684\u53d8\u91cf a \uff0c\u5b83\u7684\u5b9e\u90e8\u662f 4\uff0c\u865a\u90e8\u662f 3\u3002\u7136\u540e\u5c06\u5176\u5b9e\u90e8\u8d4b\u7ed9\u4e86\u6d6e\u70b9\u53d8\u91cf b \uff0c\u5c06\u865a\u90e8\u8d4b\u7ed9\u4e86\u6d6e\u70b9\u53d8\u91cf c \u3002 2.2 \u679a\u4e3e\u7c7b\u578b \u00b6 \u679a\u4e3e\u662f\u7528\u6765\u5b58\u50a8\u6574\u578b\u5e38\u91cf\u5e76\u901a\u8fc7\u540d\u5b57\u5f15\u7528\u4ed6\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u503c\u7684\u7c7b\u578b\u662f signed int \uff1b\u7136\u800c\u4f60\u53ef\u4ee5\u4f7f\u7528 GCC \u7f16\u8bd1\u9009\u9879 -fshort-enums \u5c06\u5176\u53d8\u4e3a\u53ef\u80fd\u6700\u5c0f\u7684\u6574\u6570\u7c7b\u578b\u3002\u8fd9\u4e9b\u884c\u4e3a\u540c\u6837\u9002\u7528\u4e8e C89 \u6807\u51c6\uff0c\u4f46\u5728\u540c\u4e00\u7a0b\u5e8f\u91cc\u6df7\u5408\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u53ef\u80fd\u4f1a\u9020\u6210\u517c\u5bb9\u6027\u95ee\u9898\u3002 2.2.1 \u5b9a\u4e49\u679a\u4e3e \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 enum \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u679a\u4e3e\uff0c\u540e\u9762\u8ddf\u4e0a\u679a\u4e3e\u7684\u540d\u5b57\uff08\u8fd9\u662f\u53ef\u9009\u7684\uff09\uff0c\u7136\u540e\u8ddf\u4e0a\u4e00\u5217\u5e38\u91cf\u540d\u5b57\uff08\u4f7f\u7528\u9017\u53f7\u5206\u9694\u5e76\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u6700\u540e\u4ee5\u5206\u53f7\u7ed3\u675f\u3002 enum fruit {grape, cherry, lemon, kiwi}; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u679a\u4e3e fruit \uff0c\u5b83\u5305\u542b\u4e86 4 \u4e2a\u6574\u578b\u5e38\u91cf\u503c grape \u3001 cherry \u3001 lemon \u548c kiwi \uff0c\u5b83\u4eec\u7684\u503c\u5206\u522b\u4e3a\u9ed8\u8ba4\u503c 0\u30011\u30012 \u548c 3\u3002\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5b9a\u503c\uff1a enum more_fruit {banana = -17, apple, blueberry, mango}; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49 banana \u4e3a -17\uff0c\u5269\u4f59\u7684\u503c\u4f1a\u81ea\u52a8\u52a0 1\uff1a apple \u662f -16\uff0c blueberry \u662f -15\uff0c mango \u662f -14\u3002\u9664\u975e\u6307\u5b9a\uff0c\u5426\u5219\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u7684\u503c\u662f\u4e0a\u4e00\u4e2a\u503c\u52a0 1\uff08\u7b2c\u4e00\u4e2a\u503c\u9ed8\u8ba4\u4e3a 0\uff09\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u679a\u4e3e\u4e2d\u4e4b\u524d\u5b9a\u4e49\u7684\u503c\u6765\u5b9a\u4e49\u65b0\u7684\u503c\uff1a enum yet_more_fruit {kumquat, raspberry, peach, plum = peach + 2}; \u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c kumquat \u662f 0\uff0c raspberry \u662f 1\uff0c peach \u662f 2\uff0c plum \u662f 4\u3002 \u4f60\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684 enum \u3001 struct \u548c union \u3002 2.2.2 \u58f0\u660e\u679a\u4e3e \u00b6 \u4f60\u65e2\u53ef\u4ee5\u5728\u5b9a\u4e49\u679a\u4e3e\u7c7b\u578b\u7684\u65f6\u5019\u58f0\u660e\u4e00\u4e2a\u679a\u4e3e\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4e4b\u540e\u518d\u58f0\u660e\u3002\u4e0b\u9762\u4f8b\u5b50\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb my_fruit \u7684 enum fruit \u7c7b\u578b\u7684\u53d8\u91cf\uff1a enum fruit {banana, apple, blueberry, mango} my_fruit; \u800c\u8fd9\u4e2a\u4f8b\u5b50\u628a\u7c7b\u578b\u58f0\u660e\u548c\u53d8\u91cf\u58f0\u660e\u5206\u5f00\u4e86\uff1a enum fruit {banana, apple, blueberry, mango}; enum fruit my_fruit; \uff08\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u547d\u540d\u8fd9\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u5c31\u4e0d\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u4e86\uff09 \u5c3d\u7ba1\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5f53\u4f5c\u679a\u4e3e\u7c7b\u578b\uff0c\u4f46\u4f60\u53ef\u4ee5\u7ed9\u4ed6\u4eec\u8d4b\u503c\u4efb\u4f55\u53ef\u4ee5\u8d4b\u503c\u7ed9 int \u53d8\u91cf\u7684\u503c\uff0c\u5305\u62ec\u4ece\u5176\u4ed6\u679a\u4e3e\u53d8\u91cf\u8d4b\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u53ef\u4ee5\u8d4b\u503c int \u503c\u7684\u53d8\u91cf\u90fd\u80fd\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u3002 \u7136\u800c\uff0c\u4e00\u65e6\u5b9a\u4e49\u4e86\u4e00\u4e2a\u679a\u4e3e\u540e\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u4ed6\u7684\u503c\uff1b\u5b83\u4eec\u662f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c\u8fd9\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1a enum fruit {banana, apple, blueberry, mango}; banana = 15; /* You can\u2019t do this! */ \u679a\u4e3e\u8fde\u540c swich \u8bed\u53e5\u4e00\u8d77\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u5c11\u5904\u7406\u4e00\u4e2a\u679a\u4e3e\u503c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8b66\u544a\u4f60\u3002\u90a3\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4ec5\u4ec5\u5904\u7406\u4e86 banana \u3001 apple \u548c mango \u4f46\u6ca1\u6709\u5904\u7406 blueberry \uff0cGCC \u4f1a\u8b66\u544a\u4f60\u3002 2.3 \u8054\u5408\u4f53 \u00b6 \u8054\u5408\u4f53\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u88ab\u7528\u6765\u5728\u540c\u4e00\u5757\u513f\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u591a\u4e2a\u53d8\u91cf\u3002\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8bbf\u95ee\u8054\u5408\u4f53\u4e2d\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u4f46\u4f60\u5e94\u8be5\u4e00\u6b21\u4ec5\u4ec5\u8bfb\u4e00\u4e2a\u503c -- \u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u4f1a\u8986\u76d6\u5176\u4ed6\u7684\u53d8\u91cf\u3002 2.3.1 \u5b9a\u4e49\u8054\u5408\u4f53 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 union \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u8054\u5408\u4f53\uff0c\u540e\u9762\u8ddf\u4e0a\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8be5\u8054\u5408\u4f53\u7684\u6210\u5458\u58f0\u660e\u3002\u58f0\u660e\u6bcf\u4e00\u4e2a\u8054\u5408\u4f53\u6210\u5458\u5c31\u50cf\u5e73\u65f6\u58f0\u660e\u53d8\u91cf\u4e00\u6837 -- \u4f7f\u7528\u6570\u636e\u7c7b\u578b\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u540d\u5b57\u5e76\u7528\u9017\u53f7\u5206\u5272\u7684\u5f62\u5f0f\u672b\u5c3e\u8ddf\u4e0a\u4e00\u4e2a\u5206\u53f7\u3002\u8054\u5408\u4f53\u5b9a\u4e49\u7ed3\u675f\u8981\u5728\u53f3\u82b1\u62ec\u53f7\u540e\u9762\u52a0\u4e0a\u5206\u53f7\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7ed9\u8054\u5408\u4f53\u52a0\u4e0a\u4e00\u4e2a\u540d\u5b57\uff0c\u653e\u5728 union \u5173\u952e\u5b57\u548c\u5de6\u82b1\u62ec\u53f7\u4e2d\u95f4\u3002\u8fd9\u5728\u8bed\u6cd5\u4e0a\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u52a0\uff0c\u968f\u540e\u4f60\u5c31\u6ca1\u529e\u6cd5\u4f7f\u7528\u8be5\u8054\u5408\u4f53\u4e86\uff08\u6ca1\u6709 typedef \u7684\u8bdd\uff0c\u8be6\u89c1 typedef \u8bed\u53e5 \uff09\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u653e\u6574\u6570\u503c\u548c\u6d6e\u70b9\u6570\u503c\u7684\u7b80\u5355\u8054\u5408\u4f53\uff1a union numbers { int i; float f; }; \u8be5\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb numbers \u7684\u8054\u5408\u4f53\uff0c\u5b83\u5305\u542b 2 \u4e2a\u6210\u5458 i \u548c f \uff0c\u5206\u522b\u662f int \u7c7b\u578b\u548c float \u7c7b\u578b\u3002 2.3.2 \u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf \u00b6 \u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5b9a\u4e49\u8054\u5408\u4f53\u65f6\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u7ed9\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u547d\u540d\u7684\u8bdd\u3002 2.3.2.1 \u5b9a\u4e49\u65f6\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf \u00b6 \u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8054\u5408\u4f53\u65f6\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u65b9\u6cd5\u662f\u628a\u53d8\u91cf\u540d\u653e\u5728\u8054\u5408\u4f53\u58f0\u660e\u7684\u53f3\u82b1\u62ec\u53f7\u4e4b\u540e\uff0c\u4f46\u5728\u6700\u540e\u7684\u5206\u53f7\u4e4b\u524d\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u4e0d\u6b62\u4e00\u4e2a\u53d8\u91cf\uff0c\u8981\u5c06\u53d8\u91cf\u540d\u7528\u9017\u53f7\u5206\u5f00\u3002 union numbers { int i; float f; } first_number, second_number; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a union numbers \u7c7b\u578b\u7684\u53d8\u91cf first_number \u548c second_number \u3002 2.3.2.2 \u5b9a\u4e49\u540e\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf \u00b6 \u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8054\u5408\u4f53\u540e\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u65b9\u6cd5\u662f\u4f7f\u7528 union \u5173\u952e\u5b57\u548c\u4f60\u7ed9\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u8d77\u7684\u540d\u5b57\uff0c\u8ddf\u4e0a\u4e00\u4e2a\u6216\u591a\u4e2a\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\u5b57\u3002 union numbers { int i; float f; }; union numbers first_number, second_number; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a union numbers \u7c7b\u578b\u7684\u53d8\u91cf first_number \u548c second_number \u3002 2.3.2.3 \u521d\u59cb\u5316\u8054\u5408\u4f53\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u4e00\u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u65f6\u5c31\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u6210\u5458\uff1a union numbers { int i; float f; }; union numbers first_number = { 5 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c first_number \u7684\u6210\u5458 i \u7ed9\u4e86\u503c 5\u3002\u800c\u6210\u5458 f \u6ca1\u6709\u8d4b\u503c\u3002 \u5176\u4ed6\u521d\u59cb\u5316\u8054\u5408\u4f53\u6210\u5458\u7684\u65b9\u6cd5\u662f\u5236\u5b9a\u8be5\u6210\u5458\u7684\u540d\u5b57\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u521d\u59cb\u5316\u4f60\u60f3\u521d\u59cb\u5316\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u6210\u5458\u3002\u6709 2 \u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528--\u4e00\u79cd\u662f\u5728\u6210\u5458\u540e\u9762\u8ddf\u4e00\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8981\u8d4b\u7684\u503c\uff1a union numbers first_number = { f: 3.14159 }; \u6216\u8005\u5728\u6210\u5458\u540d\u5b57\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\u8d4b\u4e00\u4e2a\u503c\uff1a union numbers first_number = { .f = 3.14159 }; \u4f60\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u65f6\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u8054\u5408\u4f53\u6210\u5458\uff1a union numbers { int i; float f; } first_number = { 5 }; 2.3.3 \u8bbf\u95ee\u8054\u5408\u4f53\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u4e00\u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u53d8\u91cf\u540d\u653e\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u6210\u5458\u540d\u653e\u64cd\u4f5c\u7b26\u53f3\u8fb9\u3002 union numbers { int i; float f; }; union numbers first_number; first_number.i = 5; first_number.f = 3.9; \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7ed9\u6210\u5458 f \u8d4b\u503c\u4e4b\u540e\u4f1a\u8986\u76d6\u6210\u5458 i \u7684\u503c\u3002 2.3.4 \u8054\u5408\u4f53\u7684\u5927\u5c0f \u00b6 \u8054\u5408\u4f53\u7684\u5927\u5c0f\u7b49\u4e8e\u5b83\u6700\u5927\u6210\u5458\u7684\u5927\u5c0f\u3002\u8003\u8651\u672c\u8282\u4e2d\u7684\u4f8b\u5b50\uff1a union numbers { int i; float f; }; \u8fd9\u4e2a\u8054\u5408\u4f53\u7c7b\u578b\u7684\u5927\u5c0f\u7b49\u4e8e sizeof(float) \uff0c\u56e0\u4e3a float \u7c7b\u578b\u6bd4 int \u7c7b\u578b\u8981\u5927\u3002\u65e2\u7136\u8054\u5408\u4f53\u7684\u6240\u6709\u6210\u5458\u90fd\u5360\u7528\u540c\u4e00\u5757\u513f\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u8054\u5408\u4f53\u7c7b\u578b\u4e0d\u9700\u8981\u5927\u5230\u8db3\u591f\u653e\u4e0b\u6240\u6709\u6210\u5458\uff1b\u5b83\u53ea\u9700\u8981\u8db3\u591f\u653e\u4e0b\u6700\u5927\u7684\u6210\u5458\u3002 2.4 \u7ed3\u6784\u4f53 \u00b6 \u7ed3\u6784\u4f53\u662f\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7531\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u7ec4\u6210\uff08\u4e5f\u6709\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u7ed3\u6784\u4f53\u7c7b\u578b\uff09\u3002 2.4.1 \u5b9a\u4e49\u7ed3\u6784\u4f53 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 struct \u5173\u952e\u5b57\u540e\u8ddf\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7ed3\u6784\u4f53\u6210\u5458\u58f0\u660e\u6765\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u5728\u58f0\u660e\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u7684\u65f6\u5019\u5c31\u50cf\u58f0\u660e\u666e\u901a\u53d8\u91cf\u4e00\u6837--\u6570\u636e\u7c7b\u578b\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\uff0c\u672b\u5c3e\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u7ed3\u6784\u4f53\u5b9a\u4e49\u8981\u5728\u53f3\u82b1\u62ec\u53f7\u540e\u52a0\u5206\u53f7\u7ed3\u675f\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728 struct \u5173\u952e\u5b57\u548c\u5de6\u62ec\u53f7\u4e4b\u95f4\u52a0\u4e00\u4e2a\u7ed3\u6784\u4f53\u540d\u5b57\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u52a0\uff0c\u5728\u5b9a\u4e49\u4e4b\u540e\u4f60\u5c31\u65e0\u6cd5\u4f7f\u7528\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u4e86\uff08\u5728\u4e0d\u4f7f\u7528 typedef \u7684\u60c5\u51b5\u4e0b\uff0c\u8be6\u89c1 typedef \u8bed\u53e5 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5b9a\u4e49\u7b80\u5355\u7ed3\u6784\u4f53\u7684\u4f8b\u5b50\uff0c\u653e\u4e86\u4e00\u4e2a\u70b9\u7684 X \u548c Y \u5750\u6807\uff1a struct point { int x, y; }; \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a struct point \u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b 2 \u4e2a\u6210\u5458 x \u548c y \uff0c\u90fd\u662f int \u7c7b\u578b\u3002 \u7ed3\u6784\u4f53\uff08\u548c\u8054\u5408\u4f53\uff09\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u7ed3\u6784\u4f53\u548c\u8054\u5408\u4f53\uff0c\u4f46\u4e0d\u80fd\u5305\u542b\u5b83\u4eec\u81ea\u8eab\u3002\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u6216\u8054\u5408\u4f53\u6765\u8bf4\u5305\u542b\u4e00\u4e2a\u6307\u5411\u76f8\u540c\u7c7b\u578b\u7684\u6307\u9488\u57df\u662f\u53ef\u4ee5\u7684\uff08\u8be6\u89c1 \u4e0d\u5b8c\u6574\u7c7b\u578b \u3002 2.4.2 \u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf \u00b6 \u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u65f6\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u7ed9\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u547d\u540d\u7684\u8bdd\u3002 2.4.2.1 \u5b9a\u4e49\u65f6\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf \u00b6 \u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u65f6\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\uff0c\u4f60\u9700\u8981\u628a\u53d8\u91cf\u540d\u653e\u5728\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9a\u4e49\u7684\u53f3\u82b1\u62ec\u53f7\u4e4b\u540e\uff0c\u4f46\u5728\u6700\u540e\u7684\u5206\u53f7\u4e4b\u524d\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u5206\u5272\u7684\u5f62\u5f0f\u6765\u58f0\u660e\u4e0d\u6b62\u4e00\u4e2a\u53d8\u91cf\u3002 struct point { int x, y; } first_point, second_point; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a struct point \u7c7b\u578b\u53d8\u91cf first_point \u548c second_point \u3002 2.4.2.2 \u5b9a\u4e49\u540e\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u5728\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9a\u4e49\u4e4b\u540e\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u53d8\u91cf\u3002\u4f60\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u4f60\u7ed9\u7ed3\u6784\u4f53\u7c7b\u578b\u8d77\u7684\u540d\u5b57\uff0c\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\u3002 struct point { int x, y; }; struct point first_point, second_point; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a struct point \u7c7b\u578b\u53d8\u91cf first_point \u548c second_point \u3002 2.4.2.3 \u521d\u59cb\u5316\u7ed3\u6784\u4f53\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf\u65f6\u5c31\u7ed9\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6210\u5458\u521d\u59cb\u5316\u786e\u5b9a\u7684\u503c\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8be5\u53d8\u91cf\u662f\u5426\u662f\u9759\u6001\u5b58\u50a8\u7684\uff08\u8be6\u89c1 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26 \uff09\u3002\u5982\u679c\u662f\uff0c\u6570\u5b57\u7c7b\u578b\u7684\u6210\u5458\u88ab\u521d\u59cb\u5316\u4e3a 0\uff0c\u6307\u9488\u7c7b\u578b\u7684\u6210\u5458\u88ab\u521d\u59cb\u5316\u4e3a NULL\uff1b\u5426\u5219\uff0c\u7ed3\u6784\u4f53\u6210\u5458\u7684\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u4e00\u79cd\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u662f\u5728\u82b1\u62ec\u53f7\u4e2d\u6307\u5b9a\u503c\uff0c\u5e76\u7528\u9017\u53f7\u5206\u5272\u3002\u8fd9\u4e9b\u503c\u6309\u7167\u548c\u7ed3\u6784\u4f53\u5b9a\u4e49\u76f8\u540c\u7684\u987a\u5e8f\u8d4b\u503c\u7ed9\u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002 struct point { int x, y; }; struct point first_point = { 5, 10 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c first_point \u4e2d\u7684 x \u6210\u5458\u8d4b\u503c\u4e86 5\uff0c y \u6210\u5458\u8d4b\u503c\u4e86 10. \u5176\u4ed6\u521d\u59cb\u5316\u6210\u5458\u7684\u65b9\u5f0f\u662f\u6307\u5b9a\u4f60\u8981\u521d\u59cb\u5316\u7684\u6210\u5458\u540d\u5b57\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u521d\u59cb\u5316\uff0c\u751a\u81f3\u53ef\u4ee5\u7559\u4e00\u4e9b\u4e0d\u521d\u59cb\u5316\u3002\u6709 2 \u79cd\u65b9\u5f0f\u4f60\u53ef\u4ee5\u4f7f\u7528\u3002\u7b2c\u4e00\u79cd\u5728 C99 \u4e2d\u53ef\u7528\uff0c\u53e6\u4e00\u79cd\u662f GCC \u7684 C89 \u6269\u5c55\uff1a struct point first_point = { .y = 10, .x = 5 }; \u4f60\u53ef\u4ee5\u7701\u7565\u6389\u70b9\u53f7\u5e76\u4f7f\u7528\u5192\u53f7\u800c\u4e0d\u662f\u7b49\u53f7\uff0c\u5c3d\u7ba1\u8fd9\u662f GNU C \u7684\u6269\u5c55\uff1a struct point first_point = { y: 10, x: 5 }; \u4f60\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u671f\u95f4\u8fdb\u884c\u53d8\u91cf\u58f0\u660e\u65f6\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u53d8\u91cf\uff1a struct point { int x, y; } first_point = { 5, 10 }; \u4f60\u4e0d\u5fc5\u521d\u59cb\u5316\u6240\u6709\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff1a struct pointy { int x, y; char *p; }; struct pointy first_pointy = { 5 }; \u8fd9\u91cc\u7684\u8bdd\uff0c x \u88ab\u521d\u59cb\u5316\u4e3a 5\uff0c y \u521d\u59cb\u5316\u4e3a 0\uff0c\u800c p \u88ab\u521d\u59cb\u5316\u4e3a NULL\u3002\u8fd9\u4e2a\u89c4\u5219\u5c31\u50cf y \u548c p \u662f\u9759\u6001\u53d8\u91cf\u4e00\u6837\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\uff0c\u800c\u8be5\u6210\u5458\u4e5f\u662f\u7ed3\u6784\u4f53\uff1a struct point { int x, y; }; struct rectangle { struct point top_left, bottom_right; }; struct rectangle my_rectangle = { {0, 5}, {10, 0} }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a rectangle \u7684\u7ed3\u6784\u4f53\u5305\u542b 2 \u4e2a point \u7ed3\u6784\u4f53\u53d8\u91cf\u3002\u7136\u540e\u58f0\u660e\u4e86\u4e00\u4e2a struct rectangle \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u5b83\u7684\u6210\u5458\u3002\u65e2\u7136\u5b83\u7684\u6210\u5458\u662f\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u6211\u4eec\u5f97\u518d\u4f7f\u7528\u4e00\u4e2a\u82b1\u62ec\u53f7\u6765\u62ec\u4f4f point \u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002\u7136\u800c\uff0c\u8be5\u82b1\u62ec\u53f7\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8fd9\u6837\u505a\u4ec5\u4ec5\u4f7f\u4ee3\u7801\u6613\u8bfb\u3002 2.4.3 \u8bbf\u95ee\u7ed3\u6784\u4f53\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u4f60\u8981\u628a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u628a\u6210\u5458\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u53f3\u8fb9\u3002 struct point { int x, y; }; struct point first_point; first_point.x = 0; first_point.y = 5; \u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u800c\u8be5\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u5176\u4ed6\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002 struct rectangle { struct point top_left, bottom_right; }; struct rectangle my_rectangle; my_rectangle.top_left.x = 0; my_rectangle.top_left.y = 5; my_rectangle.bottom_right.x = 10; my_rectangle.bottom_right.y = 0; 2.4.4 \u4f4d\u57df \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u975e\u6807\u51c6\u5927\u5c0f\u7684\u6574\u578b\u6765\u521b\u5efa\u7ed3\u6784\u4f53\uff0c\u79f0\u4e4b\u4e3a \u4f4d\u57df \u3002\u8981\u4f7f\u7528\u4f4d\u57df\uff0c\u4f60\u53ef\u4ee5\u50cf\u901a\u5e38\u90a3\u6837\u6307\u5b9a\u4e00\u4e2a\u6574\u578b\u6210\u5458\uff08 int \uff0c char \uff0c long int \u7b49\uff09\uff0c\u5e76\u5728\u6210\u5458\u540d\u5b57\u548c\u5206\u53f7\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u5192\u53f7\u548c\u8be5\u6210\u5458\u5360\u7684\u4f4d\u6570\u3002 struct card { unsigned int suit : 2; unsigned int face_value : 4; }; \u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5b83\u6709 2 \u4e2a\u4f4d\u57df suit \u548c face_value \uff0c\u5206\u522b\u5360 2 \u4e2a\u4f4d\u548c 4 \u4e2a\u4f4d\u3002 suit \u80fd\u653e 0~3\uff0c\u800c face_value \u80fd\u653e 0~15\u3002\u6ce8\u610f\u8fd9\u4e9b\u4f4d\u57df\u88ab\u58f0\u660e\u4e3a\u4e86 unsigned int \u7c7b\u578b\uff1b\u5982\u679c\u5b83\u4eec\u88ab\u58f0\u660e\u4e3a signed int \u7c7b\u578b\uff0c\u90a3\u5b83\u4eec\u7684\u503c\u8303\u56f4\u5c06\u5206\u522b\u662f -2~1 \u548c -8~7\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c N \u4f4d unsigned \u7684\u4f4d\u57df\u8303\u56f4\u662f 0 \u5230 2^N-1 \uff0c\u800c N \u4f4d signed \u7684\u4f4d\u57df\u8303\u56f4\u662f -(2^N) / 2 \u5230 ((2^N) / 2) -1 \u3002 \u4f4d\u57df\u53ef\u4ee5\u4e0d\u8981\u540d\u5b57\uff0c\u4ee5\u4fbf\u63a7\u5236\u5bb9\u7eb3\u5355\u5143\u4e2d\u54ea\u4e9b\u5b9e\u9645\u7684\u4f4d\u88ab\u4f7f\u7528\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\u4e0d\u53ef\u79fb\u690d\u7684\uff0c\u6240\u4ee5\u5f88\u5c11\u4f7f\u7528\u3002\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4f4d\u57df\u7684\u5927\u5c0f\u4e3a 0\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u4f4d\u57df\u540e\u9762\u7684\u4f4d\u57df\u5e94\u8be5\u6253\u5305\u8fdb\u524d\u9762\u7684\u4f4d\u57df\u4e2d\u3002\u8fd9\u901a\u5e38\u4e5f\u6ca1\u5565\u7528\u3002 \u4f60\u4e0d\u80fd\u5bf9\u4f4d\u57df\u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26 & \u6765\u5bf9\u5176\u53d6\u5730\u5740\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09 2.4.5 \u7ed3\u6784\u4f53\u5927\u5c0f \u00b6 \u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5927\u5c0f\u7b49\u4e8e\u5176\u6240\u6709\u6210\u5458\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u53ef\u80fd\u5305\u62ec\u4f7f\u7ed3\u6784\u7c7b\u578b\u4e0e\u7279\u5b9a\u5b57\u8282\u8fb9\u754c\u5bf9\u9f50\u7684\u586b\u5145\u3002\u5bf9\u9f50\u7ec6\u8282\u4f1a\u6839\u636e\u4f60\u7684\u8ba1\u7b97\u673a\u5e73\u53f0\u800c\u4e0d\u540c\uff0c\u4f46\u4e00\u822c\u4f1a\u770b\u5230\u5bf9 4 \u5b57\u8282\u6216 8 \u5b57\u8282\u8fb9\u754c\u5bf9\u9f50\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u52a0\u901f\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9e\u4f8b\u7684\u5185\u5b58\u8bbf\u95ee\u3002 GNU \u6269\u5c55\u5141\u8bb8\u7ed3\u6784\u4f53\u6ca1\u6709\u4efb\u4f55\u6210\u5458\uff0c\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\u5927\u5c0f\u4e3a 0. \u5982\u679c\u4f60\u660e\u786e\u4e0d\u8981\u586b\u5145\u4f60\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\uff08\u8fd9\u6837\u505a\u53cd\u800c\u4f1a\u964d\u4f4e\u5bf9\u7ed3\u6784\u4f53\u7684\u8bbf\u5b58\u901f\u5ea6\uff09\uff0cGCC \u63d0\u4f9b\u4e86\u51e0\u79cd\u5173\u95ed\u586b\u5145\u7684\u65b9\u6cd5\u3002\u8f83\u5feb\u4e14\u6613\u7528\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 -fpack-struct \u7f16\u8bd1\u9009\u9879\u3002\u66f4\u591a\u5173\u4e8e\u7701\u7565\u586b\u5145\u7684\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003\u4f60\u4f7f\u7528\u7684\u7f16\u8bd1\u5668\u7248\u672c\u7684\u5bf9\u5e94\u624b\u518c\u3002 2.5 \u6570\u7ec4 \u00b6 \u6570\u7ec4\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u80fd\u8ba9\u4f60\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u5b58\u50a8\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u5728 C \u4e2d\uff0c\u6570\u7ec4\u5143\u7d20\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u800c\u4e0d\u662f 1. 2.5.1 \u58f0\u660e\u6570\u7ec4 \u00b6 \u8981\u58f0\u660e\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5b83\u7684\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7684\u540d\u5b57\u4ee5\u53ca\u5b83\u80fd\u5b58\u50a8\u591a\u5c11\u5143\u7d20\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u58f0\u660e\u4e86\u53ef\u4ee5\u5b58\u653e 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u7684\u4f8b\u5b50\uff1a int my_array[10]; \u5bf9\u4e8e\u6807\u51c6 C \u4ee3\u7801\uff0c\u5143\u7d20\u7684\u4e2a\u6570\u53ea\u80fd\u662f\u6b63\u6570\u3002 GNU \u6269\u5c55\u5141\u8bb8\u5143\u7d20\u7684\u4e2a\u6570\u53ef\u4ee5\u5c0f\u5230 0. 0 \u957f\u5ea6\u7684\u6570\u7ec4\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f88\u6709\u7528\uff0c\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u53d8\u957f\u5ea6\u5bf9\u8c61\u7684\u5934\u90e8\u3002 struct line { int length; char contents[0]; }; { struct line *this_line = (struct line *) malloc (sizeof (struct line) + this_length); this_line -> length = this_length; } \u5176\u4ed6\u7684 GNU \u6269\u5c55\u5141\u8bb8\u4f60\u4f7f\u7528\u53d8\u91cf\u6765\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e2d\uff0c\u4f7f\u7528\u5b83\u7684\u53c2\u6570\u4f5c\u4e3a\u5143\u7d20\u4e2a\u6570\u6765\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\uff1a int my_function (int number) { int my_array[number]; \u2026; } 2.5.2 \u521d\u59cb\u5316\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u6570\u7ec4\u7684\u65f6\u5019\u901a\u8fc7\u82b1\u62ec\u53f7\u5217\u51fa\u9017\u53f7\u5206\u5272\u7684\u521d\u59cb\u5316\u503c\u6765\u521d\u59cb\u5316\u6570\u7ec4\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff1a int my_array[5] = { 0, 1, 2, 3, 4 }; \u4f60\u4e0d\u5fc5\u5b8c\u5168\u521d\u59cb\u5316\u6240\u6709\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u521d\u59cb\u5316\u4e86\u524d\u9762 3 \u4e2a\u5143\u7d20\uff0c\u540e\u9762 2 \u4e2a\u88ab\u521d\u59cb\u5316\u4e86\u9ed8\u8ba4\u503c 0. int my_array[5] = { 0, 1, 2 }; \u5728\u4f7f\u7528 ISO C99 \u6216\u8005 GNU \u6269\u5c55\u7684 C89 \u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f\u521d\u59cb\u5316\uff0c\u800c\u662f\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u4e0b\u6807\u3002\u8981\u8fd9\u6837\u505a\uff0c\u4f60\u5f97\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4e0b\u6807\uff0c\u5e76\u4e14\u540e\u9762\uff08\u8981\u521d\u59cb\u5316\u7684\u503c\u524d\u9762\uff09\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u53ef\u9009\u7684\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002\u4f8b\u5982\uff1a int my_array[5] = { [2] 5, [4] 9 }; \u6216\u8005\u4f7f\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\uff1a int my_array[5] = { [2] = 5, [4] = 9 }; \u8fd9 2 \u79cd\u65b9\u5f0f\u548c\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7b49\u4ef7\u7684\uff1a int my_array[5] = { 0, 0, 5, 0, 9 }; \u5728\u4f7f\u7528 GNU \u6269\u5c55\u7684\u65f6\u5019\uff0c\u4f60\u8fd8\u53ef\u4ee5\u7ed9\u4e00\u5217\u8fde\u7eed\u7684\u5143\u7d20\u8d4b\u7ed9\u76f8\u540c\u7684\u503c\uff0c\u53ea\u8981\u6307\u5b9a\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5f62\u5f0f\u5982 [first] ... [last] \u3002\u4f8b\u5982\uff1a int new_array[100] = { [0 ... 9] = 1, [10 ... 98] = 2, 3 }; \u8fd9\u5c06\u5143\u7d20 0 \u5230 9\u521d\u59cb\u5316\u4e3a 1\uff0c10 \u5230 98 \u521d\u59cb\u5316\u4e3a 2\uff0c\u5143\u7d20 99 \u521d\u59cb\u5316\u4e3a 3\u3002\uff08\u4f60\u5f53\u7136\u4e5f\u53ef\u4ee5\u660e\u786e\u5f97\u5199\u6210 [99] = 3\uff09\u3002\u6b64\u5916\uff0c\u4f60\u8981\u6ce8\u610f\u5728 ... \u7684\u4e24\u8fb9\u90fd\u6709\u7a7a\u683c\u3002 \u5982\u679c\u4f60\u521d\u59cb\u5316\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\uff0c\u5219\u4f60\u4e0d\u5fc5\u6307\u5b9a\u5b83\u7684\u5927\u5c0f\u4e86\uff1b\u5b83\u7684\u5927\u5c0f\u4f1a\u6839\u636e\u4f60\u521d\u59cb\u5316\u7684\u5143\u7d20\u7684\u4e2a\u6570\u800c\u51b3\u5b9a\u3002\u4f8b\u5982\uff1a int my_array[] = { 0, 1, 2, 3, 4 }; \u5c3d\u7ba1\u8fd9\u91cc\u6ca1\u6709\u7528 my_array[5] \u6765\u660e\u786e\u6307\u660e\u8be5\u6570\u7ec4\u6709 5 \u4e2a\u5143\u7d20\uff0c\u4f46\u5b83\u521d\u59cb\u5316\u4e86 5 \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u8be5\u6570\u7ec4\u5c31\u6709 5 \u4e2a\u5143\u7d20\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u901a\u8fc7\u6307\u5b9a\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\u5143\u7d20\uff0c\u90a3\u8be5\u6570\u7ec4\u7684\u5927\u5c0f\u5c31\u662f\u4f60\u521d\u59cb\u5316\u7684\u6700\u9ad8\u7684\u5143\u7d20\u4e0b\u6807\u52a0\u4e0a 1\u3002\u4f8b\u5982\uff1a int my_array[] = { 0, 1, 2, [99] = 99 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u867d\u7136\u53ea\u521d\u59cb\u5316\u4e86 4 \u4e2a\u5143\u7d20\uff0c\u4f46\u6700\u540e\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u5143\u7d20\u7684\u4e0b\u6807\u662f 99\uff0c\u56e0\u6b64\u8be5\u6570\u7ec4\u6709 100 \u4e2a\u5143\u7d20\u3002 2.5.3 \u8bbf\u95ee\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u540d\u5e76\u5728\u540e\u9762\u8ddf\u4e0a\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5143\u7d20\u4e0b\u6807\u6765\u8bbf\u95ee\u8be5\u5143\u7d20\u3002\u8bb0\u5f97\uff0c\u6570\u7ec4\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002\u4f8b\u5982\uff1a my_array[0] = 5; \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u503c 5 \u8d4b\u7ed9\u4e86\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u5728\u4f4d\u7f6e 0 \u4e0a\u3002\u4f60\u53ef\u4ee5\u628a\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u5f53\u505a\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u5c31\u662f\u5176\u6570\u7ec4\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u90a3\u6837\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff1a struct point { int x, y; }; struct point point_array[2] = { {4, 5}, {8, 9} }; point_array[0].x = 3; 2.5.4 \u591a\u7ef4\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u9020\u51fa\u591a\u7ef4\u6570\u7ec4\uff0c\u6216\u8005\u53eb\u201c\u6570\u7ec4\u7684\u6570\u7ec4\u201d\u3002\u53ea\u8981\u518d\u52a0\u4e0a\u4e00\u4e2a\u65b9\u62ec\u53f7\u4ee5\u53ca\u4e00\u4e2a\u6570\u7ec4\u957f\u5ea6\u4ee3\u8868\u65b0\u7ef4\u5ea6\u7684\u6bcf\u4e00\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u58f0\u660e\u4e86\u4e00\u4e2a\u6709 2 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u62e5\u6709 5 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff1a int two_dimensions[2][5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} }; \u591a\u7ef4\u6570\u7ec4\u5143\u7d20\u7684\u8bbf\u95ee\u8981\u6307\u5b9a\u6bcf\u4e00\u7ef4\u7684\u4e0b\u6807\uff1a two_dimensions[1][3] = 12; \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c two_dimensions[0] \u672c\u8eab\u662f\u4e00\u4e2a\u6570\u7ec4\u3002\u5143\u7d20 two_dimensions[0][2] \u540e\u9762\u662f two_dimensions[0][3] \u800c\u4e0d\u662f two_dimensions[1][2] \u3002 2.5.5 \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u6765\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u8be6\u89c1 \u5b57\u7b26\u4e32\u5e38\u91cf \uff09\u3002\u8be5\u6570\u7ec4\u5e94\u8be5\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\u7684\u5b57\u7b26\u7c7b\u578b\u3002 \u5f53\u4f60\u58f0\u660e\u6570\u7ec4\u65f6\u4f60\u53ef\u4ee5\u6307\u5b9a\u6570\u7ec4\u5927\u5c0f\u3002\u8be5\u5927\u5c0f\u662f\u6570\u7ec4\u80fd\u5b58\u653e\u7684\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5305\u62ec\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684 null \u5b57\u7b26\u3002\u5982\u679c\u4f60\u6307\u5b9a\u4e86\u5927\u5c0f\uff0c\u90a3\u5c31\u4e0d\u5fc5\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u5b83\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u5927\u5c0f\u8db3\u591f\u5b58\u653e\u4f60\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u3002 \u6709 2 \u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4e00\u5217\u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\uff0c\u6216\u8005\u6307\u5b9a\u53cc\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u3002 \u4f8b\u5982\uff1a char blue[26]; char yellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', '\\0'}; char orange[26] = \"orange\"; char gray[] = {'g', 'r', 'a', 'y', '\\0'}; char salmon[] = \"salmon\"; \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u672b\u5c3e\u90fd\u52a0\u4e86 null \u5b57\u7b26\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u663e\u793a\u5730\u5199\u660e\u3002\uff08\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7528\u5b57\u7b26\u7684\u5f62\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u90a3\u5c31\u5fc5\u987b\u663e\u793a\u6dfb\u52a0 null \u5b57\u7b26\u3002\u867d\u7136\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4f1a\u610f\u5916\u5b58\u5728\u672b\u5c3e\u7684 null \u5b57\u7b26\uff0c\u4f46\u4f60\u4e0d\u80fd\u4ee5\u6765\u8fd9\u79cd\u5076\u7136\uff09 \u521d\u59cb\u5316\u540e\u4f60\u5c31\u4e0d\u80fd\u518d\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\u6765\u8d4b\u503c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u4e86\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4e0d\u80fd\u5de5\u4f5c\uff1a char lemon[26] = \"custard\"; lemon = \"steak sauce\"; /* Fails! */ \u7136\u800c\uff0cGNU C \u5e93\u4e2d\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u64cd\u4f5c\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u62f7\u8d1d\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u50cf\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\uff0c\u901a\u8fc7\u8bbf\u95ee\u5b57\u7b26\u4e32 \u5404\u4e2a\u5143\u7d20\u7684\u65b9\u5f0f\u6765\u4e00\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u7b26\uff1a char name[] = \"bob\"; name[0] = 'r'; \u6709\u65f6\u5019\u4f60\u53ef\u80fd\u6307\u5b9a\u4e86\u6570\u7ec4\u5927\u5c0f\uff0c\u4f46\u7ed9\u5b83\u521d\u59cb\u5316\u65f6\u5374\u7528\u4e86\u4e00\u4e2a\u6bd4\u5b83\u957f\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e0d\u662f\u4e2a\u597d\u4e8b\u60c5\u3002\u8be5\u5b57\u7b26\u4e32\u5e76\u4e0d\u80fd\u53d6\u4ee3\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5e76\u4e14\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u8b66\u544a\u3002\u56e0\u4e3a\u539f\u6765\u7684\u6570\u7ec4\u5927\u5c0f\u56fa\u5b9a\uff0c\u5219\u5b57\u7b26\u4e32\u7684\u8d85\u51fa\u90e8\u5206\u4f1a\u5199\u5230\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u7ec4\u7684\u5185\u5b58\u7a7a\u95f4\u3002 2.5.6 \u8054\u5408\u4f53\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u5408\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5c31\u50cf\u521b\u5efa\u57fa\u7840\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\u3002 union numbers { int i; float f; }; union numbers number_array [3]; \u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a 3 \u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6570\u7ec4\uff0c\u540d\u5b57\u53eb number_array \u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u8054\u5408\u4f53\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff1a union numbers number_array [3] = { {3}, {4}, {5} }; \u5185\u90e8\u7684\u5206\u7ec4\u82b1\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002 \u5728\u521d\u59cb\u5316\u540e\uff0c\u4f60\u4ecd\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u8054\u5408\u4f53\u6210\u5458\u3002\u64cd\u4f5c\u7b26\u7684\u5de6\u8fb9\u662f\u6570\u7ec4\u540d\u548c\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff08\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u53f3\u8fb9\u662f\u6210\u5458\u540d\u5b57\u3002 union numbers number_array [3]; number_array[0].i = 2; 2.5.7 \u7ed3\u6784\u4f53\u6570\u7ec4 \u00b6 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5c31\u50cf\u521b\u5efa\u57fa\u7840\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\u3002 struct point { int x, y; }; struct point point_array [3]; \u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a 3 \u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6570\u7ec4\uff0c\u540d\u5b57\u53eb point_array \u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u5143\u7d20\uff1a struct point point_array [3] = { {2, 3}, {4, 5}, {6, 7} }; \u5c31\u548c\u521d\u59cb\u5316\u5305\u542b\u7ed3\u6784\u4f53\u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4e00\u6837\uff0c\u5185\u90e8\u7684\u5206\u7ec4\u82b1\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e26\u4e0a\u4e86\u5206\u7ec4\u82b1\u62ec\u53f7\uff0c\u4f60\u53ef\u4ee5\u53ea\u521d\u59cb\u5316\u67d0\u4e9b\u5143\u7d20\u7684\u90e8\u5206\u6210\u5458\u3002 struct point point_array [3] = { {2}, {4, 5}, {6, 7} }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ea\u521d\u59cb\u5316\u4e86 x \u6210\u5458\u3002\u56e0\u4e3a\u5206\u7ec4\u82b1\u62ec\u53f7\uff0c \u503c 4 \u88ab\u8d4b\u7ed9\u4e86\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 x \u6210\u5458\uff0c\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 y \u6210\u5458\u3002\u800c\u5982\u679c\u6ca1\u6709\u5206\u7ec4\u82b1\u62ec\u53f7\u5219\u76f8\u53cd\u3002 \u5728\u521d\u59cb\u5316\u540e\uff0c\u4f60\u4ecd\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u7ed3\u6784\u4f53\u6210\u5458\u3002\u64cd\u4f5c\u7b26\u7684\u5de6\u8fb9\u662f\u6570\u7ec4\u540d\u548c\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff08\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u53f3\u8fb9\u662f\u6210\u5458\u540d\u5b57\u3002 struct point point_array [3]; point_array[0].x = 2; point_array[0].y = 3; 2.6 \u6307\u9488 \u00b6 \u6307\u9488\u7528\u6765\u5b58\u653e\u5e38\u91cf\u6216\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002\u5bf9\u4e8e\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec\u57fa\u7840\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6307\u9488\u6765\u5b58\u653e\u8be5\u7c7b\u578b\u5b9e\u4f8b\u7684\u5185\u5b58\u5730\u5740\u3002 2.6.1 \u58f0\u660e\u6307\u9488 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u540d\u5b57\u548c\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u6765\u58f0\u660e\u6307\u9488\u3002\u6570\u636e\u7c7b\u578b\u662f\u6307\u8be5\u6307\u9488\u8981\u5b58\u653e\u7684\u662f\u54ea\u79cd\u7c7b\u578b\u53d8\u91cf\u5185\u5b58\u5730\u5740\u3002 \u8981\u58f0\u660e\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u6807\u8bc6\u7b26\u524d\u9762\u52a0\u4e0a\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09\u4e0b\u9762\u662f\u4e00\u822c\u5f62\u5f0f\uff1a data-type * name; \u5728\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\u4e24\u8fb9\u7684\u7a7a\u767d\u7b26\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff1a data-type *name; data-type* name; \u4e0b\u9762\u7684\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u5b58\u653e int \u53d8\u91cf\u5730\u5740\u7684\u6307\u9488\uff1a int *ip; \u8981\u5f53\u5fc3\u7684\u662f\uff0c\u5728\u540c\u4e00\u4e2a\u8bed\u53e5\u4e2d\u58f0\u660e\u591a\u4e2a\u6307\u9488\u65f6\uff0c\u4e00\u5b9a\u8981\u5728\u6bcf\u4e00\u4e2a\u6307\u9488\u524d\u90fd\u4f7f\u7528\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\uff1a int *foo, *bar; /* Two pointers. */ int *baz, quux; /* A pointer and an integer variable. */ 2.6.2 \u521d\u59cb\u5316\u6307\u9488 \u00b6 \u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u6307\u9488\u65f6\u901a\u8fc7\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\u5730\u5740\u521d\u59cb\u5316\u5b83\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u58f0\u660e\u4e86\u4e00\u4e2a int \u53d8\u91cf i \uff0c\u548c\u4e00\u4e2a\u6307\u9488 ip \uff0c\u5e76\u521d\u59cb\u5316\u4e3a\u4e86 i \u7684\u5730\u5740\uff1a int i; int *ip = &i; \u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09\u6765\u83b7\u53d6\u53d8\u91cf\u7684\u5730\u5740\u3002\u5728\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u540e\uff0c\u8981\u7ed9\u8be5\u6307\u9488\u8d4b\u503c\u4e00\u4e2a\u65b0\u7684\u5730\u5740\u65f6\u5c31\u4e0d\u8981\u5728\u6307\u9488\u7684\u540d\u5b57\u524d\u4f7f\u7528\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\u4e86\u3002\u76f8\u53cd\uff0c\u8fd9\u6837\u505a\u4f1a\u6539\u53d8\u6307\u9488\u6307\u5411\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u662f\u6307\u9488\u5b83\u81ea\u5df1\u7684\u503c\uff0c\u4f8b\u5982\uff1a int i, j; int *ip = &i; /* \u2018ip\u2019 now holds the address of \u2018i\u2019. */ ip = &j; /* \u2018ip\u2019 now holds the address of \u2018j\u2019. */ *ip = &i; /* \u2018j\u2019 now holds the address of \u2018i\u2019. */ \u5b58\u5728\u6307\u9488\u91cc\u9762\u7684\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff1a\u4e00\u4e2a\u8ba1\u7b97\u673a\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3002\u5982\u679c\u4f60\u60f3\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u8d4b\u7ed9\u6307\u9488\u4e00\u4e2a\u6570\u5b57\u5e38\u91cf\uff0c\u4f1a\u8f6c\u6362\u6570\u5b57\u5e38\u91cf\u4e3a\u6b63\u786e\u7684\u6307\u9488\u7c7b\u578b\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u9664\u975e\u4f60\u80fd\u6781\u597d\u5730\u63a7\u5236\u4f60\u5728\u5185\u5b58\u4e2d\u5b58\u653e\u4e86\u4ec0\u4e48\uff0c\u5e76\u6e05\u695a\u5730\u4e86\u89e3\u4f60\u5728\u505a\u4ec0\u4e48\u3002\u56e0\u4e3a\u8fd9\u6837\u505a\u5f88\u5bb9\u6613\u4e0d\u5c0f\u5fc3\u8986\u76d6\u6389\u4f60\u5e76\u4e0d\u50cf\u8986\u76d6\u7684\u5185\u5bb9\u3002\u5e76\u4e14\u5927\u591a\u6570\u8fd9\u6837\u7684\u6280\u672f\u90fd\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 \u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff1a\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u5730\u5740\u6765\u521d\u59cb\u5316\u6307\u9488\uff0c\u90a3\u5b83\u901a\u5e38\u4e0d\u6307\u5411\u4efb\u4f55\u5730\u65b9\uff1b\u5982\u679c\u4f60\u4f7f\u7528\u5b83\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u4f60\u7684\u7a0b\u5e8f\u6302\u6389\uff08\u901a\u5e38\u8fd9\u79cd\u884c\u4e3a\u88ab\u79f0\u4f5c\u672a\u5b9a\u4e49\u884c\u4e3a\uff09 2.6.3 \u8054\u5408\u4f53\u6307\u9488 \u00b6 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u5408\u4f53\u6307\u9488\uff0c\u5c31\u50cf\u521b\u5efa\u5176\u4ed6\u57fa\u7840\u7c7b\u578b\u6307\u9488\u4e00\u6837\u3002 union numbers { int i; float f; }; union numbers foo = {4}; union numbers *number_ptr = &foo; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u8054\u5408\u4f53\u7c7b\u578b union numbers \uff0c\u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf foo \uff08\u540c\u65f6\u521d\u59cb\u5316\u4e86\u7b2c\u4e00\u4e2a\u6210\u5458\uff09\u3002\u6700\u540e\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u5c06 foo \u7684\u5730\u5740\u8d4b\u7ed9\u4e86\u5b83\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u4f46\u4f60\u4e0d\u80fd\u50cf\u524d\u9762\u90a3\u6837\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u4e86\u3002\u800c\u662f\u8981\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f \uff09\u3002\u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u6539\u53d8 foo \u53d8\u91cf\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\u7684\u503c\uff1a number_ptr -> i = 450; Now the i member in foo is 450. 2.6.4 \u7ed3\u6784\u4f53\u6307\u9488 \u00b6 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u6307\u9488\uff0c\u5c31\u50cf\u521b\u5efa\u5176\u4ed6\u57fa\u7840\u7c7b\u578b\u6307\u9488\u4e00\u6837\u3002 struct fish { float length, weight; }; struct fish salmon = {4.3, 5.8}; struct fish *fish_ptr = &salmon; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u7c7b\u578b struct fish \uff0c\u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf salmon \uff08\u540c\u65f6\u521d\u59cb\u5316\uff09\u3002\u6700\u540e\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u5c06 salmon \u7684\u5730\u5740\u8d4b\u7ed9\u4e86\u5b83\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u4f46\u4f60\u4e0d\u80fd\u50cf\u524d\u9762\u90a3\u6837\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u4e86\u3002\u800c\u662f\u8981\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f \uff09\u3002\u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u6539\u53d8 salmon \u53d8\u91cf\u7684\u6210\u5458\u7684\u503c\uff1a fish_ptr -> length = 5.1; fish_ptr -> weight = 6.2; \u73b0\u5728 salmon \u7684\u6210\u5458 length \u548c width \u7684\u503c\u5206\u522b\u662f 5.1 \u548c 6.2 \u4e86\u3002 2.7 \u4e0d\u5b8c\u6574\u7c7b\u578b \u00b6 \u4f60\u53ef\u4ee5\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u8054\u5408\u4f53\u548c\u679a\u4e3e\u800c\u4e0d\u5217\u51fa\u4ed6\u4eec\u7684\u6210\u5458\uff08\u5728\u679a\u4e3e\u4e2d\u53eb\u505a\u503c\uff09\u3002\u8fd9\u6837\u505a\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7c7b\u578b\u3002\u4f60\u4e0d\u80fd\u4f7f\u7528\u4e0d\u5b8c\u6574\u7c7b\u578b\u6765\u58f0\u660e\u53d8\u91cf\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528\u6307\u5411\u8fd9\u79cd\u7c7b\u578b\u7684\u6307\u9488\u3002 struct point; \u5728\u4f60\u7a0b\u5e8f\u7684\u540e\u9762\u4f60\u4f1a\u8865\u5168\u8fd9\u4e2a\u7c7b\u578b\u3002\u5c31\u50cf\u4f60\u5e73\u5e38\u5b9a\u4e49\u4e00\u6837\uff1a struct point { int x, y; }; \u8fd9\u79cd\u6280\u672f\u7ecf\u5e38\u7528\u4e8e\u94fe\u8868\uff1a struct singly_linked_list { struct singly_linked_list *next; int x; /* other members here perhaps */ }; struct singly_linked_list *list_head; 2.8 \u7c7b\u578b\u9650\u5b9a\u7b26 \u00b6 \u6709 2 \u79cd\u7c7b\u578b\u9650\u5b9a\u53ef\u4ee5\u52a0\u5728\u53d8\u91cf\u58f0\u660e\u524d\u9762\u6765\u6539\u53d8\u53d8\u91cf\u7684\u8bbf\u95ee\uff1a const \u548c volatile \u3002 const \u628a\u53d8\u91cf\u53d8\u6210\u53ea\u8bfb\u7684\uff1b\u521d\u59cb\u5316\u4e4b\u540e\u503c\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u3002 const float pi = 3.14159f; \u9664\u4e86\u9632\u6b62\u503c\u610f\u5916\u88ab\u6539\u53d8\uff0c\u58f0\u660e const \u53d8\u91cf\u8fd8\u80fd\u5e2e\u52a9\u7f16\u8bd1\u5668\u4f18\u5316\u4ee3\u7801\u3002 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u8be5\u53d8\u91cf\u7ecf\u5e38\u6539\u53d8\uff0c\u770b\u4f3c\u65e0\u7528\u7684\u53d8\u91cf\u8bbf\u95ee\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u6307\u9488\uff09\u4e0d\u5e94\u8be5\u88ab\u4f18\u5316\u6389\u3002\u4f60\u53ef\u80fd\u4f1a\u5728\u56de\u8c03\u51fd\u6570\u4f1a\u66f4\u65b0\u5b58\u50a8\u6570\u636e\u548c\u4fe1\u53f7\u5904\u7406\u65f6\u4f7f\u7528 volatile \u53d8\u91cf\u3002\u53c2\u89c1 \u5e8f\u5217\u70b9\u548c\u4fe1\u53f7\u4f20\u9012 volatile float currentTemperature = 40.0; 2.9 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26 \u00b6 \u6709 4 \u79cd\u5b58\u50a8\u7c7b\u522b\u53ef\u4ee5\u52a0\u5728\u4f60\u7684\u53d8\u91cf\u524d\u9762\u6765\u6539\u53d8\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5982\u4f55\u5b58\u50a8\uff1a auto \uff0c extern \uff0c register \u548c static \u3002 \u4f7f\u7528 auto \u4f1a\u5c06\u53d8\u91cf\u5b58\u5728\u51fd\u6570\u672c\u5730\uff0c\u53d8\u91cf\u7684\u503c\u5728\u51fd\u6570\u8fd4\u56de\u540e\u4f1a\u88ab\u9500\u6bc1\u3002\u8fd9\u662f\u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u53d8\u91cf\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 void foo (int value) { auto int x = value; \u2026 return; } register \u4f5c\u7528\u548c auto \u975e\u5e38\u7c7b\u4f3c\uff0c\u9664\u4e86\u5b83\u4f1a\u5efa\u8bae\u7f16\u8bd1\u5668\u8be5\u53d8\u91cf\u4f1a\u7ecf\u5e38\u7528\u5230\uff0c\u5982\u679c\u53ef\u80fd\u5c31\u628a\u8be5\u53d8\u91cf\u5b58\u5728\u5bc4\u5b58\u5668\u91cc\u3002\u4f60\u4e0d\u80fd\u4f7f\u7528\u53d6\u5730\u5740\u64cd\u4f5c\u7b26\u6765\u83b7\u53d6 register \u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5f15\u7528 register \u6570\u7ec4\u7684\u5143\u7d20\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u6570\u7ec4\u4f60\u552f\u4e00\u80fd\u505a\u7684\u5c31\u662f\u4f7f\u7528 sizeof \u6765\u83b7\u53d6\u957f\u5ea6\u3002GCC \u901a\u5e38\u5bf9\u54ea\u4e9b\u503c\u5e94\u8be5\u653e\u8fdb\u5bc4\u5b58\u5668\u4f1a\u6709\u5f88\u597d\u7684\u9009\u62e9\uff0c\u6240\u4ee5 register \u4e0d\u4f1a\u5e38\u7528\u5230\u3002 static \u672c\u8d28\u4e0a\u548c auto \u662f\u76f8\u5bf9\u7684\uff1a\u5982\u679c\u5728\u51fd\u6570\u548c\u4ee3\u7801\u5757\u91cc\u4f7f\u7528 static \uff0c\u53d8\u91cf\u4f1a\u4e00\u76f4\u4fdd\u7559\u4ed6\u4eec\u7684\u503c\uff0c\u5373\u4f7f\u51fd\u6570\u6216\u4ee3\u7801\u5757\u7ed3\u675f\u3002\u8fd9\u5c31\u662f\u9759\u6001\u5b58\u50a8\u671f\u3002 int sum (int x) { static int sumSoFar = 0; sumSoFar = sumSoFar + x; return sumSoFar; } \u4f60\u4e5f\u53ef\u4ee5\u5728\u6700\u5916\u5c42\uff08\u4e5f\u5c31\u662f\u4e0d\u5728\u51fd\u6570\u91cc\u9762\uff09\u58f0\u660e static \u53d8\u91cf\uff08\u6216\u51fd\u6570\uff09\uff1b\u8fd9\u79cd\u53d8\u91cf\u5bf9\u5f53\u524d\u6574\u4e2a\u6e90\u6587\u4ef6\u5168\u5c40\u53ef\u89c1\uff08\u4f46\u662f\u5bf9\u5176\u4ed6\u6e90\u6587\u4ef6\u4e0d\u53ef\u89c1\uff09\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6837 static \u5c31\u6709\u4e86\u4e8c\u4e49\u6027\uff1b\u7b2c\u4e8c\u79cd\u542b\u4e49\u4e5f\u53eb\u505a \u9759\u6001\u8fde\u63a5 \u30022 \u4e2a\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u9759\u6001\u51fd\u6570\u6216\u53d8\u91cf\u662f\u5b8c\u5168\u9694\u79bb\u7684\uff1b\u4efb\u4f55\u4e00\u4e2a\u5bf9\u9664\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5916\u90fd\u4e0d\u53ef\u89c1\u3002 \u672a\u521d\u59cb\u5316\u7684 extern \u53d8\u91cf\u4f1a\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u503c 0, 0.0 \u6216\u8005 NULL\uff0c\u53d6\u51b3\u4e8e\u53d8\u91cf\u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u672a\u521d\u59cb\u5316\u7684 auto \u6216 register \u53d8\u91cf\uff08\u5305\u62ec\u9ed8\u8ba4\u7684 auto \uff09\u90fd\u4fdd\u6301\u672a\u521d\u59cb\u5316\u72b6\u6001\uff0c\u56e0\u6b64\u4e0d\u8981\u5047\u8bbe\u5b83\u7684\u503c\u3002 extern \u5bf9\u60f3\u8981\u58f0\u660e\u6574\u4e2a\u8fde\u63a5\u7684\u9879\u76ee\u53ef\u89c1\u7684\u53d8\u91cf\u5341\u5206\u6709\u7528\u3002\u4f60\u4e0d\u80fd\u521d\u59cb\u5316\u4e00\u4e2a extern \u58f0\u660e\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u5728\u58f0\u660e\u671f\u95f4\u5e76\u6ca1\u6709\u7ed9\u5b83\u5206\u914d\u7a7a\u95f4\u3002\u4f60\u5fc5\u987b\u65e2\u8981\u505a extern \u58f0\u660e\uff08\u901a\u5e38\u5728\u4f1a\u88ab\u5176\u4ed6\u6e90\u6587\u4ef6\u5305\u542b\u7684\u7528\u4ee5\u8bbf\u95ee\u8be5\u53d8\u91cf\u7684\u5934\u6587\u4ef6\u91cc\uff09\u53c8\u8981\u505a\u975e extern \u58f0\u660e\uff0c\u975e extern \u58f0\u660e\u5b9e\u9645\u662f\u7528\u6765\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u7684\u3002 extern \u58f0\u660e\u53ef\u4ee5\u6709\u5f88\u591a\u6b21\u3002 extern int numberOfClients; \u2026 int numberOfClients = 0; \u7a0b\u5e8f\u7ed3\u6784\u76f8\u5173\u4fe1\u606f\u8be6\u89c1 \u7a0b\u5e8f\u7ed3\u6784\u548c\u4f5c\u7528\u57df \u3002 2.10 \u7c7b\u578b\u522b\u540d \u00b6 \u6709\u65f6\u7ed9\u7c7b\u578b\u8d77\u4e00\u4e2a\u65b0\u540d\u5b57\u662f\u5f88\u65b9\u4fbf\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 typedef \u8bed\u53e5\u6765\u7ed9\u7c7b\u578b\u8d77\u522b\u540d\u3002\u8be6\u89c1 typedef \u8bed\u53e5 \u3002","title":"2. \u6570\u636e\u7c7b\u578b"},{"location":"Data-Types/#Data-Types","text":"","title":"2.1 \u57fa\u7840\u6570\u636e\u7c7b\u578b"},{"location":"Data-Types/#Integer-Types","text":"\u6574\u578b\u7684\u8303\u56f4\u5728 8 \u4f4d\u5230 32 \u4f4d\u4e4b\u95f4\u3002C99 \u6269\u5c55\u5230\u4e86 64 \u4f4d\u3002\u4f60\u5e94\u8be5\u4f7f\u7528\u6574\u578b\u6765\u5b58\u50a8\u6574\u6570\uff08\u5e76\u4e14\u4f7f\u7528 char \u7c7b\u578b\u5b58\u50a8\u5b57\u7b26\uff09\u3002\u4ee5\u4e0b\u5217\u51fa\u7684\u6240\u6709\u6574\u578b\u7684\u5927\u5c0f\u548c\u8303\u56f4\u90fd\u662f\u6700\u5c0f\u7684\uff1b\u6839\u636e\u4f60\u7684\u8ba1\u7b97\u673a\u5e73\u53f0\uff0c\u4ed6\u4eec\u7684\u5927\u5c0f\u548c\u8303\u56f4\u53ef\u80fd\u66f4\u5927\u3002 \u5c3d\u7ba1\u8fd9\u4e9b\u6574\u578b\u7684\u8303\u56f4\u5f88\u81ea\u7136\u5730\u6392\u5217[\u8bd1\u6ce8]\uff0c\u4f46\u6807\u51c6\u5e76\u4e0d\u8981\u6c42\u4efb\u4f55 2 \u79cd\u7c7b\u578b\u7684\u8303\u56f4\u4e0d\u540c\u3002\u4f8b\u5982\uff0c\u4f17\u6240\u5468\u77e5 int \u548c long \u7684\u8303\u56f4\u662f\u76f8\u540c\u7684\u3002\u6807\u51c6\u751a\u81f3\u5141\u8bb8 singed char \u548c long \u8303\u56f4\u76f8\u540c\uff0c\u5c3d\u7ba1\u8fd9\u6837\u7684\u5e73\u53f0\u5f88\u5c11\u89c1\u3002 singed char 8 \u4f4d signed char \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -128 \u548c 127 \u4e4b\u95f4\u7684\u6574\u6570 unsigned char 8 \u4f4d unsigned char \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 255 \u4e4b\u95f4\u7684\u6574\u6570 char \u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c char \u7c7b\u578b\u8981\u4e48\u548c signed char \u76f8\u540c\uff0c\u8981\u4e48\u548c unsigned char \u76f8\u540c\uff08\u7136\u800c\u4ed6\u4eec\u662f 3 \u79cd\u4e0d\u540c\u7684\u7c7b\u578b\uff09\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 char \u7c7b\u578b\u6765\u5b58\u50a8 ASCII \u5b57\u7b26\uff08\u5982 'm' \uff09\uff0c\u5305\u62ec\u8f6c\u4e49\u5b57\u7b26\uff08\u5982 '\\n' \uff09 short int 16 \u4f4d short int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -32768 \u548c 32767 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 short , signed short int \u6216\u8005 signed short unsigned short int 16 \u4f4d unsigned short int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 65535 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned short int 32 \u4f4d int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -2147483648 \u548c 2147483647 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 signed int \u6216\u8005 signed unsigned int 32 \u4f4d unsigned int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 4294967295 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u7b80\u5199\u6210 unsigned long int 32 \u4f4d long int \u7c7b\u578b\u81f3\u5c11\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -2147483648 \u548c 2147483647 \u4e4b\u95f4\u7684\u6574\u6570\uff08\u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c\u8be5\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u662f 64 \u4f4d\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u5c31\u76f8\u5f53\u4e8e long long int \u7c7b\u578b\u4e86\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 long \uff0c signed long int \uff0c\u6216\u8005 signed long unsigned long int 32 \u4f4d unsigned long int \u7c7b\u578b\u81f3\u5c11\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 4294967295 \u4e4b\u95f4\u7684\u6574\u6570\uff08\u6839\u636e\u4f60\u7684\u7cfb\u7edf\u4e0d\u540c\uff0c\u8be5\u6570\u636e\u7c7b\u578b\u53ef\u80fd\u662f 64 \u4f4d\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5b83\u5c31\u76f8\u5f53\u4e8e unsigned long long int \u7c7b\u578b\u4e86\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned long long long int 64 \u4f4d long long int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 -9223372036854775808 \u548c 9223372036854775807 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 long long \uff0c signed long long int \u6216\u8005 signed long long \u3002\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u5c5e\u4e8e C89 \u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5c5e\u4e8e C99 \u548c GNU C \u6269\u5c55 unsigned long long int 64 \u4f4d unsigned long long int \u7c7b\u578b\u80fd\u653e\u5f97\u4e0b\u8303\u56f4\u5728 0 \u548c 18446744073709551615 \u4e4b\u95f4\u7684\u6574\u6570\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210 unsigned long long \u3002\u8fd9\u4e2a\u7c7b\u578b\u4e0d\u5c5e\u4e8e C89 \u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5c5e\u4e8e C99 \u548c GNU C \u6269\u5c55 \u4e0b\u9762\u662f\u51e0\u4e2a\u58f0\u660e\u548c\u5b9a\u4e49\u6574\u578b\u7684\u4f8b\u5b50\uff1a int foo; unsigned int bar = 42; char quux = 'a'; \u7b2c\u4e00\u884c\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505a foo \u7684\u6574\u6570\uff0c\u4f46\u662f\u6ca1\u6709\u7ed9\u4ed6\u5b9a\u4e49\u503c\uff1b\u5b83\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u4e0d\u80fd\u5047\u8bbe\u4efb\u4f55\u503c\u3002","title":"2.1.1 \u6574\u578b"},{"location":"Data-Types/#Real-Number-Types","text":"\u5171\u6709 3 \u79cd\u6570\u636e\u7c7b\u578b\u6765\u8868\u793a\u5206\u6570\u3002\u5c3d\u7ba1\u5728\u73b0\u5728\u4f7f\u7528\u7684\u5927\u591a\u6570\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e0a\u5b83\u4eec\u7684\u5927\u5c0f\u548c\u8303\u56f4\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5728\u5386\u53f2\u4e0a\u4e0d\u540c\u7684\u7cfb\u7edf\u5374\u662f\u4e0d\u540c\u7684\u3002\u56e0\u6b64\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4ee5\u5b8f\u5b9a\u4e49\u7684\u5f62\u5f0f\u88ab\u5b58\u5728\u5e93\u5934\u6587\u4ef6 float.h \u4e2d\u3002\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u7528\u5b8f\u5b9a\u4e49\u7684\u540d\u5b57\u6765\u4ee3\u66ff\u5b83\u4eec\u7684\u53ef\u80fd\u503c\uff1b\u4f60\u53ef\u4ee5\u67e5\u770b\u4f60\u7cfb\u7edf\u7684 float.h \u6765\u6216\u8005\u660e\u786e\u5730\u503c\u3002 float float \u7c7b\u578b\u662f 3 \u79cd\u6d6e\u70b9\u7c7b\u578b\u4e2d\u6700\u5c0f\u7684\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u5927\u5c0f\u6839\u672c\u4e0d\u540c\u7684\u8bdd\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 FLT_MIN \u4e2d\uff0c\u5e76\u5e94\u8be5\u4e0d\u5927\u4e8e 1e-37 \uff1b\u6700\u5927\u503c\u5b58\u5728 FLT_MAX \u4e2d\uff0c\u5e76\u5e94\u8be5\u4e0d\u5c0f\u4e8e 1e37 double double \u7c7b\u578b\u81f3\u5c11\u8981\u548c float \u7c7b\u578b\u4e00\u6837\u5927\uff0c\u5e76\u5e94\u8be5\u66f4\u5927\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 DBL_MIN \u4e2d\uff1b\u6700\u5927\u503c\u5b58\u5728 DBL_MAX \u4e2d long double long double \u7c7b\u578b\u81f3\u5c11\u8981\u548c float \u7c7b\u578b\u4e00\u6837\u5927\uff0c\u5e76\u5e94\u8be5\u66f4\u5927\u3002\u5b83\u7684\u6700\u5c0f\u503c\u5b58\u5728 LDBL_MIN \u4e2d\uff1b\u6700\u5927\u503c\u5b58\u5728 LDBL_MAX \u4e2d \u6240\u6709\u6d6e\u70b9\u7c7b\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\uff1b\u4f7f\u7528 unsigned float \u4f1a\u9020\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\u7684\u3002 \u8fd9\u91cc\u6709\u51e0\u4e2a\u58f0\u660e\u548c\u5b9a\u4e49\u5b9e\u6570\u7c7b\u578b\u53d8\u91cf\u7684\u4f8b\u5b50\uff1a float foo; double bar = 114.3943; \u7b2c\u4e00\u884c\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505a foo \u7684 float \u7c7b\u578b\u53d8\u91cf\u4f46\u672a\u5b9a\u4e49\u503c\uff1b\u5b83\u662f\u672a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u4f60\u901a\u5e38\u4e0d\u80fd\u5047\u8bbe\u4efb\u4f55\u503c\u3002 C \u4e2d\u63d0\u4f9b\u7684\u5b9e\u6570\u7c7b\u578b\u7cbe\u5ea6\u6709\u9650\uff0c\u6240\u4ee5\u5e76\u4e0d\u80fd\u7cbe\u786e\u8868\u793a\u6240\u6709\u7684\u5b9e\u6570\u3002\u5927\u591a\u6570\u4f7f\u7528 GCC \u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u4f7f\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u5b9e\u6570\uff0c\u56e0\u6b64\u4e0d\u80fd\u8868\u793a\u50cf 4.2 \u8fd9\u6837\u7684\u6570\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u63a8\u8350\u4f60\u5728\u5224\u5b9e\u6570\u76f8\u7b49\u7684\u65f6\u5019\u4e0d\u8981\u4f7f\u7528 == \u64cd\u4f5c\u7b26\uff0c\u800c\u662f\u68c0\u67e5 2 \u4e2a\u5b9e\u6570\u7684\u5dee\u662f\u5426\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002 \u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u7531\u4e8e\u4e0d\u7cbe\u786e\u8868\u793a\u9020\u6210\u7684\u4e9b\u8bb8\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8be6\u60c5\u53c2\u89c1 David Goldberg \u7684\u8bba\u6587 What Every Computer Scientist Should Know About Floating-Point Arithmetic \u4ee5\u53ca Donald Knuth \u7684 The Art of Computer Programming \u7684 4.2.2 \u8282\u3002","title":"2.1.2 \u5b9e\u6570\u7c7b\u578b"},{"location":"Data-Types/#Complex-Number-Types","text":"GCC \u5f15\u5165\u4e00\u4e9b\u590d\u6570\u7c7b\u578b\u4f5c\u4e3a C89 \u7684\u6269\u5c55\u3002\u7c7b\u4f3c\u7684\u7279\u6027\u4e5f\u88ab\u5f15\u5165 C99\uff0c\u4f46\u5b83\u4eec\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u6211\u4eec\u5148\u4ecb\u7ecd\u6807\u51c6\u7684\u590d\u6570\u7c7b\u578b\u3002","title":"2.1.3 \u590d\u6570\u7c7b\u578b"},{"location":"Data-Types/#Standard-Complex-Number-Types","text":"Complex \u7c7b\u578b\u5728 C99 \u4e2d\u88ab\u5f15\u5165\u3002\u5171\u6709 3 \u79cd\u590d\u6570\u7c7b\u578b\uff1a float _Complex double _Complex ong double _Complex \u8fd9\u91cc\u7684\u540d\u5b57\u90fd\u662f\u4ee5\u4e00\u4e2a\u4e0b\u5212\u7ebf\u8ddf\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u59cb\uff0c\u4ee5\u514d\u548c\u73b0\u6709\u7a0b\u5e8f\u7684\u6807\u8bc6\u7b26\u51b2\u7a81\u3002\u7136\u800c\uff0cC99 \u7684\u6807\u51c6\u5934\u6587\u4ef6 <ltcomplex.h> \u5f15\u5165\u4e86\u4e00\u4e9b\u5b8f\u6765\u7b80\u5316\u590d\u6570\u7c7b\u578b\u7684\u4f7f\u7528\u3002 complex \u4ee3\u66ff _Complex \u3002\u4f7f\u5f97\u53ef\u4ee5\u8fd9\u6837 double complex \u58f0\u660e\u53d8\u91cf\uff0c\u770b\u8d77\u6765\u66f4\u81ea\u7136\u4e00\u4e9b\u3002 I I \u662f const float _Complex \u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u503c\u662f\u590d\u6570\u7684\u865a\u90e8\u5355\u4f4d\uff0c\u901a\u5e38\u8bf4\u7684 i \u3002 <complex.h> \u4e5f\u58f0\u660e\u4e86\u4e00\u4e9b\u590d\u6570\u8fd0\u7b97\u51fd\u6570\uff0c\u5982 creal \u548c cimag \u51fd\u6570\u5206\u522b\u7528\u6765\u83b7\u53d6 double complex \u7c7b\u578b\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u3002\u8fd8\u6709\u5176\u4ed6\u51fd\u6570\uff0c\u50cf\u4e0b\u9762\u4f8b\u5b50\u6240\u793a\u7684\uff1a #include <complex.h> #include <stdio.h> void example (void) { complex double z = 1.0 + 3.0*I; printf (\"Phase is %f, modulus is %f\\n\", carg (z), cabs (z)); }","title":"2.1.3.1 \u6807\u51c6\u590d\u6570\u7c7b\u578b"},{"location":"Data-Types/#GNU-Extensions-for-Complex-Number-Types","text":"GCC \u4e5f\u5f15\u5165\u4e86\u590d\u6570\u7c7b\u578b\u4f5c\u4e3a C89 \u7684 GNU \u6269\u5c55\uff0c\u4f46\u662f\u5199\u6cd5\u4e0d\u540c\u3002\u5728 C89 \u7684 GCC \u6269\u5c55\u4e2d\uff0c\u6d6e\u70b9\u590d\u6570\u7684\u5199\u6cd5\u5982\u4e0b\uff1a __complex__ float __complex__ double __complex__ long double GCC \u6269\u5c55\u4e0d\u6b62\u5141\u8bb8\u590d\u6570\u662f\u6d6e\u70b9\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u590d\u6570\u7c7b\u578b\u548c\u6574\u6570\u590d\u6570\u7c7b\u578b\uff1b\u5b9e\u9645\u4e0a __complex__ \u53ef\u4ee5\u7528\u5728\u4efb\u4f55\u57fa\u7840\u6570\u636e\u7c7b\u578b\u4e0a\u3002\u8fd9\u91cc\u4e0d\u4f1a\u7ed9\u51fa\u6240\u6709\u7684\u7ec4\u5408\uff0c\u4f46\u4f1a\u7ed9\u51e0\u4e2a\u4f8b\u5b50\uff1a __complex__ float __complex__ float \u7c7b\u578b\u6709 2 \u90e8\u5206\uff1a\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u4ed6\u4eec\u90fd\u662f float \u7c7b\u578b __complex__ int __complex__ int \u4e5f\u6709 2 \u90e8\u5206\uff1a\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u5b83\u4eec\u90fd\u662f int \u7c7b\u578b \u4e3a\u4e86\u83b7\u53d6\u4e00\u4e2a\u590d\u6570\u503c\u8868\u8fbe\u5f0f\u7684\u5b9e\u90e8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 __real__ \u5173\u952e\u5b57\uff0c\u540e\u9762\u8ddf\u4e0a\u8be5\u8868\u8fbe\u5f0f\uff1b\u540c\u6837\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 __imag__ \u83b7\u53d6\u865a\u90e8\u3002 __complex__ float a = 4 + 3i; float b = __real__ a; /* b is now 4. */ float c = __imag__ a; /* c is now 3. */ \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u6d6e\u70b9\u590d\u6570\u7c7b\u578b\u7684\u53d8\u91cf a \uff0c\u5b83\u7684\u5b9e\u90e8\u662f 4\uff0c\u865a\u90e8\u662f 3\u3002\u7136\u540e\u5c06\u5176\u5b9e\u90e8\u8d4b\u7ed9\u4e86\u6d6e\u70b9\u53d8\u91cf b \uff0c\u5c06\u865a\u90e8\u8d4b\u7ed9\u4e86\u6d6e\u70b9\u53d8\u91cf c \u3002","title":"2.1.3.2 GNU \u6269\u5c55\u7684\u590d\u6570\u7c7b\u578b"},{"location":"Data-Types/#Enumerations","text":"\u679a\u4e3e\u662f\u7528\u6765\u5b58\u50a8\u6574\u578b\u5e38\u91cf\u5e76\u901a\u8fc7\u540d\u5b57\u5f15\u7528\u4ed6\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u503c\u7684\u7c7b\u578b\u662f signed int \uff1b\u7136\u800c\u4f60\u53ef\u4ee5\u4f7f\u7528 GCC \u7f16\u8bd1\u9009\u9879 -fshort-enums \u5c06\u5176\u53d8\u4e3a\u53ef\u80fd\u6700\u5c0f\u7684\u6574\u6570\u7c7b\u578b\u3002\u8fd9\u4e9b\u884c\u4e3a\u540c\u6837\u9002\u7528\u4e8e C89 \u6807\u51c6\uff0c\u4f46\u5728\u540c\u4e00\u7a0b\u5e8f\u91cc\u6df7\u5408\u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u53ef\u80fd\u4f1a\u9020\u6210\u517c\u5bb9\u6027\u95ee\u9898\u3002","title":"2.2 \u679a\u4e3e\u7c7b\u578b"},{"location":"Data-Types/#Defining-Enumerations","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 enum \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u679a\u4e3e\uff0c\u540e\u9762\u8ddf\u4e0a\u679a\u4e3e\u7684\u540d\u5b57\uff08\u8fd9\u662f\u53ef\u9009\u7684\uff09\uff0c\u7136\u540e\u8ddf\u4e0a\u4e00\u5217\u5e38\u91cf\u540d\u5b57\uff08\u4f7f\u7528\u9017\u53f7\u5206\u9694\u5e76\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u6700\u540e\u4ee5\u5206\u53f7\u7ed3\u675f\u3002 enum fruit {grape, cherry, lemon, kiwi}; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u679a\u4e3e fruit \uff0c\u5b83\u5305\u542b\u4e86 4 \u4e2a\u6574\u578b\u5e38\u91cf\u503c grape \u3001 cherry \u3001 lemon \u548c kiwi \uff0c\u5b83\u4eec\u7684\u503c\u5206\u522b\u4e3a\u9ed8\u8ba4\u503c 0\u30011\u30012 \u548c 3\u3002\u4f60\u4e5f\u53ef\u4ee5\u4e3a\u5176\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5b9a\u503c\uff1a enum more_fruit {banana = -17, apple, blueberry, mango}; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49 banana \u4e3a -17\uff0c\u5269\u4f59\u7684\u503c\u4f1a\u81ea\u52a8\u52a0 1\uff1a apple \u662f -16\uff0c blueberry \u662f -15\uff0c mango \u662f -14\u3002\u9664\u975e\u6307\u5b9a\uff0c\u5426\u5219\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u7684\u503c\u662f\u4e0a\u4e00\u4e2a\u503c\u52a0 1\uff08\u7b2c\u4e00\u4e2a\u503c\u9ed8\u8ba4\u4e3a 0\uff09\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u679a\u4e3e\u4e2d\u4e4b\u524d\u5b9a\u4e49\u7684\u503c\u6765\u5b9a\u4e49\u65b0\u7684\u503c\uff1a enum yet_more_fruit {kumquat, raspberry, peach, plum = peach + 2}; \u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c kumquat \u662f 0\uff0c raspberry \u662f 1\uff0c peach \u662f 2\uff0c plum \u662f 4\u3002 \u4f60\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684 enum \u3001 struct \u548c union \u3002","title":"2.2.1 \u5b9a\u4e49\u679a\u4e3e"},{"location":"Data-Types/#Declaring-Enumerations","text":"\u4f60\u65e2\u53ef\u4ee5\u5728\u5b9a\u4e49\u679a\u4e3e\u7c7b\u578b\u7684\u65f6\u5019\u58f0\u660e\u4e00\u4e2a\u679a\u4e3e\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4e4b\u540e\u518d\u58f0\u660e\u3002\u4e0b\u9762\u4f8b\u5b50\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb my_fruit \u7684 enum fruit \u7c7b\u578b\u7684\u53d8\u91cf\uff1a enum fruit {banana, apple, blueberry, mango} my_fruit; \u800c\u8fd9\u4e2a\u4f8b\u5b50\u628a\u7c7b\u578b\u58f0\u660e\u548c\u53d8\u91cf\u58f0\u660e\u5206\u5f00\u4e86\uff1a enum fruit {banana, apple, blueberry, mango}; enum fruit my_fruit; \uff08\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u547d\u540d\u8fd9\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u5c31\u4e0d\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u4e86\uff09 \u5c3d\u7ba1\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5f53\u4f5c\u679a\u4e3e\u7c7b\u578b\uff0c\u4f46\u4f60\u53ef\u4ee5\u7ed9\u4ed6\u4eec\u8d4b\u503c\u4efb\u4f55\u53ef\u4ee5\u8d4b\u503c\u7ed9 int \u53d8\u91cf\u7684\u503c\uff0c\u5305\u62ec\u4ece\u5176\u4ed6\u679a\u4e3e\u53d8\u91cf\u8d4b\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u53ef\u4ee5\u8d4b\u503c int \u503c\u7684\u53d8\u91cf\u90fd\u80fd\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u3002 \u7136\u800c\uff0c\u4e00\u65e6\u5b9a\u4e49\u4e86\u4e00\u4e2a\u679a\u4e3e\u540e\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u4ed6\u7684\u503c\uff1b\u5b83\u4eec\u662f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c\u8fd9\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1a enum fruit {banana, apple, blueberry, mango}; banana = 15; /* You can\u2019t do this! */ \u679a\u4e3e\u8fde\u540c swich \u8bed\u53e5\u4e00\u8d77\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u5c11\u5904\u7406\u4e00\u4e2a\u679a\u4e3e\u503c\u7f16\u8bd1\u5668\u5c31\u4f1a\u8b66\u544a\u4f60\u3002\u90a3\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4ec5\u4ec5\u5904\u7406\u4e86 banana \u3001 apple \u548c mango \u4f46\u6ca1\u6709\u5904\u7406 blueberry \uff0cGCC \u4f1a\u8b66\u544a\u4f60\u3002","title":"2.2.2 \u58f0\u660e\u679a\u4e3e"},{"location":"Data-Types/#Unions","text":"\u8054\u5408\u4f53\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u88ab\u7528\u6765\u5728\u540c\u4e00\u5757\u513f\u5185\u5b58\u7a7a\u95f4\u5b58\u50a8\u591a\u4e2a\u53d8\u91cf\u3002\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8bbf\u95ee\u8054\u5408\u4f53\u4e2d\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u4f46\u4f60\u5e94\u8be5\u4e00\u6b21\u4ec5\u4ec5\u8bfb\u4e00\u4e2a\u503c -- \u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u4f1a\u8986\u76d6\u5176\u4ed6\u7684\u53d8\u91cf\u3002","title":"2.3 \u8054\u5408\u4f53"},{"location":"Data-Types/#Defining-Unions","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 union \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u8054\u5408\u4f53\uff0c\u540e\u9762\u8ddf\u4e0a\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8be5\u8054\u5408\u4f53\u7684\u6210\u5458\u58f0\u660e\u3002\u58f0\u660e\u6bcf\u4e00\u4e2a\u8054\u5408\u4f53\u6210\u5458\u5c31\u50cf\u5e73\u65f6\u58f0\u660e\u53d8\u91cf\u4e00\u6837 -- \u4f7f\u7528\u6570\u636e\u7c7b\u578b\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u540d\u5b57\u5e76\u7528\u9017\u53f7\u5206\u5272\u7684\u5f62\u5f0f\u672b\u5c3e\u8ddf\u4e0a\u4e00\u4e2a\u5206\u53f7\u3002\u8054\u5408\u4f53\u5b9a\u4e49\u7ed3\u675f\u8981\u5728\u53f3\u82b1\u62ec\u53f7\u540e\u9762\u52a0\u4e0a\u5206\u53f7\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7ed9\u8054\u5408\u4f53\u52a0\u4e0a\u4e00\u4e2a\u540d\u5b57\uff0c\u653e\u5728 union \u5173\u952e\u5b57\u548c\u5de6\u82b1\u62ec\u53f7\u4e2d\u95f4\u3002\u8fd9\u5728\u8bed\u6cd5\u4e0a\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u52a0\uff0c\u968f\u540e\u4f60\u5c31\u6ca1\u529e\u6cd5\u4f7f\u7528\u8be5\u8054\u5408\u4f53\u4e86\uff08\u6ca1\u6709 typedef \u7684\u8bdd\uff0c\u8be6\u89c1 typedef \u8bed\u53e5 \uff09\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u653e\u6574\u6570\u503c\u548c\u6d6e\u70b9\u6570\u503c\u7684\u7b80\u5355\u8054\u5408\u4f53\uff1a union numbers { int i; float f; }; \u8be5\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb numbers \u7684\u8054\u5408\u4f53\uff0c\u5b83\u5305\u542b 2 \u4e2a\u6210\u5458 i \u548c f \uff0c\u5206\u522b\u662f int \u7c7b\u578b\u548c float \u7c7b\u578b\u3002","title":"2.3.1 \u5b9a\u4e49\u8054\u5408\u4f53"},{"location":"Data-Types/#Declaring-Union-Variables","text":"\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5b9a\u4e49\u8054\u5408\u4f53\u65f6\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u7ed9\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u547d\u540d\u7684\u8bdd\u3002","title":"2.3.2 \u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Declaring-Union-Variables-at-Definition","text":"\u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8054\u5408\u4f53\u65f6\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u65b9\u6cd5\u662f\u628a\u53d8\u91cf\u540d\u653e\u5728\u8054\u5408\u4f53\u58f0\u660e\u7684\u53f3\u82b1\u62ec\u53f7\u4e4b\u540e\uff0c\u4f46\u5728\u6700\u540e\u7684\u5206\u53f7\u4e4b\u524d\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u4e0d\u6b62\u4e00\u4e2a\u53d8\u91cf\uff0c\u8981\u5c06\u53d8\u91cf\u540d\u7528\u9017\u53f7\u5206\u5f00\u3002 union numbers { int i; float f; } first_number, second_number; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a union numbers \u7c7b\u578b\u7684\u53d8\u91cf first_number \u548c second_number \u3002","title":"2.3.2.1 \u5b9a\u4e49\u65f6\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Declaring-Union-Variables-After-Definition","text":"\u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8054\u5408\u4f53\u540e\u58f0\u660e\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u65b9\u6cd5\u662f\u4f7f\u7528 union \u5173\u952e\u5b57\u548c\u4f60\u7ed9\u8be5\u8054\u5408\u4f53\u7c7b\u578b\u8d77\u7684\u540d\u5b57\uff0c\u8ddf\u4e0a\u4e00\u4e2a\u6216\u591a\u4e2a\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\u5b57\u3002 union numbers { int i; float f; }; union numbers first_number, second_number; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a union numbers \u7c7b\u578b\u7684\u53d8\u91cf first_number \u548c second_number \u3002","title":"2.3.2.2 \u5b9a\u4e49\u540e\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Initializing-Union-Members","text":"\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u4e00\u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u65f6\u5c31\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u6210\u5458\uff1a union numbers { int i; float f; }; union numbers first_number = { 5 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c first_number \u7684\u6210\u5458 i \u7ed9\u4e86\u503c 5\u3002\u800c\u6210\u5458 f \u6ca1\u6709\u8d4b\u503c\u3002 \u5176\u4ed6\u521d\u59cb\u5316\u8054\u5408\u4f53\u6210\u5458\u7684\u65b9\u6cd5\u662f\u5236\u5b9a\u8be5\u6210\u5458\u7684\u540d\u5b57\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u521d\u59cb\u5316\u4f60\u60f3\u521d\u59cb\u5316\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u521d\u59cb\u5316\u7b2c\u4e00\u4e2a\u6210\u5458\u3002\u6709 2 \u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528--\u4e00\u79cd\u662f\u5728\u6210\u5458\u540e\u9762\u8ddf\u4e00\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u8981\u8d4b\u7684\u503c\uff1a union numbers first_number = { f: 3.14159 }; \u6216\u8005\u5728\u6210\u5458\u540d\u5b57\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\u8d4b\u4e00\u4e2a\u503c\uff1a union numbers first_number = { .f = 3.14159 }; \u4f60\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u65f6\u58f0\u660e\u8054\u5408\u4f53\u53d8\u91cf\u65f6\u521d\u59cb\u5316\u4e00\u4e2a\u8054\u5408\u4f53\u6210\u5458\uff1a union numbers { int i; float f; } first_number = { 5 };","title":"2.3.2.3 \u521d\u59cb\u5316\u8054\u5408\u4f53\u6210\u5458"},{"location":"Data-Types/#Accessing-Union-Members","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u4e00\u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u53d8\u91cf\u540d\u653e\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u6210\u5458\u540d\u653e\u64cd\u4f5c\u7b26\u53f3\u8fb9\u3002 union numbers { int i; float f; }; union numbers first_number; first_number.i = 5; first_number.f = 3.9; \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7ed9\u6210\u5458 f \u8d4b\u503c\u4e4b\u540e\u4f1a\u8986\u76d6\u6210\u5458 i \u7684\u503c\u3002","title":"2.3.3 \u8bbf\u95ee\u8054\u5408\u4f53\u6210\u5458"},{"location":"Data-Types/#Size-of-Unions","text":"\u8054\u5408\u4f53\u7684\u5927\u5c0f\u7b49\u4e8e\u5b83\u6700\u5927\u6210\u5458\u7684\u5927\u5c0f\u3002\u8003\u8651\u672c\u8282\u4e2d\u7684\u4f8b\u5b50\uff1a union numbers { int i; float f; }; \u8fd9\u4e2a\u8054\u5408\u4f53\u7c7b\u578b\u7684\u5927\u5c0f\u7b49\u4e8e sizeof(float) \uff0c\u56e0\u4e3a float \u7c7b\u578b\u6bd4 int \u7c7b\u578b\u8981\u5927\u3002\u65e2\u7136\u8054\u5408\u4f53\u7684\u6240\u6709\u6210\u5458\u90fd\u5360\u7528\u540c\u4e00\u5757\u513f\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u8054\u5408\u4f53\u7c7b\u578b\u4e0d\u9700\u8981\u5927\u5230\u8db3\u591f\u653e\u4e0b\u6240\u6709\u6210\u5458\uff1b\u5b83\u53ea\u9700\u8981\u8db3\u591f\u653e\u4e0b\u6700\u5927\u7684\u6210\u5458\u3002","title":"2.3.4 \u8054\u5408\u4f53\u7684\u5927\u5c0f"},{"location":"Data-Types/#Structures","text":"\u7ed3\u6784\u4f53\u662f\u7a0b\u5e8f\u5458\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7531\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\u7ec4\u6210\uff08\u4e5f\u6709\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u7ed3\u6784\u4f53\u7c7b\u578b\uff09\u3002","title":"2.4 \u7ed3\u6784\u4f53"},{"location":"Data-Types/#Defining-Structures","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 struct \u5173\u952e\u5b57\u540e\u8ddf\u7528\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7ed3\u6784\u4f53\u6210\u5458\u58f0\u660e\u6765\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u5728\u58f0\u660e\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u7684\u65f6\u5019\u5c31\u50cf\u58f0\u660e\u666e\u901a\u53d8\u91cf\u4e00\u6837--\u6570\u636e\u7c7b\u578b\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\uff0c\u672b\u5c3e\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u7ed3\u6784\u4f53\u5b9a\u4e49\u8981\u5728\u53f3\u82b1\u62ec\u53f7\u540e\u52a0\u5206\u53f7\u7ed3\u675f\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728 struct \u5173\u952e\u5b57\u548c\u5de6\u62ec\u53f7\u4e4b\u95f4\u52a0\u4e00\u4e2a\u7ed3\u6784\u4f53\u540d\u5b57\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u52a0\uff0c\u5728\u5b9a\u4e49\u4e4b\u540e\u4f60\u5c31\u65e0\u6cd5\u4f7f\u7528\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u4e86\uff08\u5728\u4e0d\u4f7f\u7528 typedef \u7684\u60c5\u51b5\u4e0b\uff0c\u8be6\u89c1 typedef \u8bed\u53e5 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5b9a\u4e49\u7b80\u5355\u7ed3\u6784\u4f53\u7684\u4f8b\u5b50\uff0c\u653e\u4e86\u4e00\u4e2a\u70b9\u7684 X \u548c Y \u5750\u6807\uff1a struct point { int x, y; }; \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a struct point \u7684\u7ed3\u6784\u4f53\uff0c\u5305\u542b 2 \u4e2a\u6210\u5458 x \u548c y \uff0c\u90fd\u662f int \u7c7b\u578b\u3002 \u7ed3\u6784\u4f53\uff08\u548c\u8054\u5408\u4f53\uff09\u53ef\u80fd\u5305\u542b\u5176\u4ed6\u7ed3\u6784\u4f53\u548c\u8054\u5408\u4f53\uff0c\u4f46\u4e0d\u80fd\u5305\u542b\u5b83\u4eec\u81ea\u8eab\u3002\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u6216\u8054\u5408\u4f53\u6765\u8bf4\u5305\u542b\u4e00\u4e2a\u6307\u5411\u76f8\u540c\u7c7b\u578b\u7684\u6307\u9488\u57df\u662f\u53ef\u4ee5\u7684\uff08\u8be6\u89c1 \u4e0d\u5b8c\u6574\u7c7b\u578b \u3002","title":"2.4.1 \u5b9a\u4e49\u7ed3\u6784\u4f53"},{"location":"Data-Types/#Declaring-Structure-Variables","text":"\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u65f6\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u7ed9\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u547d\u540d\u7684\u8bdd\u3002","title":"2.4.2 \u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Declaring-Structure-Variables-at-Definition","text":"\u5728\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u65f6\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\uff0c\u4f60\u9700\u8981\u628a\u53d8\u91cf\u540d\u653e\u5728\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9a\u4e49\u7684\u53f3\u82b1\u62ec\u53f7\u4e4b\u540e\uff0c\u4f46\u5728\u6700\u540e\u7684\u5206\u53f7\u4e4b\u524d\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u5206\u5272\u7684\u5f62\u5f0f\u6765\u58f0\u660e\u4e0d\u6b62\u4e00\u4e2a\u53d8\u91cf\u3002 struct point { int x, y; } first_point, second_point; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a struct point \u7c7b\u578b\u53d8\u91cf first_point \u548c second_point \u3002","title":"2.4.2.1 \u5b9a\u4e49\u65f6\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Declaring-Structure-Variables-After-Definition","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9a\u4e49\u4e4b\u540e\u58f0\u660e\u8be5\u7ed3\u6784\u4f53\u53d8\u91cf\u3002\u4f60\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u4f60\u7ed9\u7ed3\u6784\u4f53\u7c7b\u578b\u8d77\u7684\u540d\u5b57\uff0c\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7528\u9017\u53f7\u5206\u5272\u7684\u53d8\u91cf\u540d\u3002 struct point { int x, y; }; struct point first_point, second_point; \u8fd9\u4e2a\u4f8b\u5b50\u58f0\u660e\u4e86 2 \u4e2a struct point \u7c7b\u578b\u53d8\u91cf first_point \u548c second_point \u3002","title":"2.4.2.2 \u5b9a\u4e49\u540e\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf"},{"location":"Data-Types/#Initializing-Structure-Members","text":"\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u7ed3\u6784\u4f53\u53d8\u91cf\u65f6\u5c31\u7ed9\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6210\u5458\u521d\u59cb\u5316\u786e\u5b9a\u7684\u503c\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8be5\u53d8\u91cf\u662f\u5426\u662f\u9759\u6001\u5b58\u50a8\u7684\uff08\u8be6\u89c1 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26 \uff09\u3002\u5982\u679c\u662f\uff0c\u6570\u5b57\u7c7b\u578b\u7684\u6210\u5458\u88ab\u521d\u59cb\u5316\u4e3a 0\uff0c\u6307\u9488\u7c7b\u578b\u7684\u6210\u5458\u88ab\u521d\u59cb\u5316\u4e3a NULL\uff1b\u5426\u5219\uff0c\u7ed3\u6784\u4f53\u6210\u5458\u7684\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u4e00\u79cd\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u662f\u5728\u82b1\u62ec\u53f7\u4e2d\u6307\u5b9a\u503c\uff0c\u5e76\u7528\u9017\u53f7\u5206\u5272\u3002\u8fd9\u4e9b\u503c\u6309\u7167\u548c\u7ed3\u6784\u4f53\u5b9a\u4e49\u76f8\u540c\u7684\u987a\u5e8f\u8d4b\u503c\u7ed9\u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002 struct point { int x, y; }; struct point first_point = { 5, 10 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c first_point \u4e2d\u7684 x \u6210\u5458\u8d4b\u503c\u4e86 5\uff0c y \u6210\u5458\u8d4b\u503c\u4e86 10. \u5176\u4ed6\u521d\u59cb\u5316\u6210\u5458\u7684\u65b9\u5f0f\u662f\u6307\u5b9a\u4f60\u8981\u521d\u59cb\u5316\u7684\u6210\u5458\u540d\u5b57\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u521d\u59cb\u5316\uff0c\u751a\u81f3\u53ef\u4ee5\u7559\u4e00\u4e9b\u4e0d\u521d\u59cb\u5316\u3002\u6709 2 \u79cd\u65b9\u5f0f\u4f60\u53ef\u4ee5\u4f7f\u7528\u3002\u7b2c\u4e00\u79cd\u5728 C99 \u4e2d\u53ef\u7528\uff0c\u53e6\u4e00\u79cd\u662f GCC \u7684 C89 \u6269\u5c55\uff1a struct point first_point = { .y = 10, .x = 5 }; \u4f60\u53ef\u4ee5\u7701\u7565\u6389\u70b9\u53f7\u5e76\u4f7f\u7528\u5192\u53f7\u800c\u4e0d\u662f\u7b49\u53f7\uff0c\u5c3d\u7ba1\u8fd9\u662f GNU C \u7684\u6269\u5c55\uff1a struct point first_point = { y: 10, x: 5 }; \u4f60\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u671f\u95f4\u8fdb\u884c\u53d8\u91cf\u58f0\u660e\u65f6\u521d\u59cb\u5316\u7ed3\u6784\u4f53\u53d8\u91cf\uff1a struct point { int x, y; } first_point = { 5, 10 }; \u4f60\u4e0d\u5fc5\u521d\u59cb\u5316\u6240\u6709\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff1a struct pointy { int x, y; char *p; }; struct pointy first_pointy = { 5 }; \u8fd9\u91cc\u7684\u8bdd\uff0c x \u88ab\u521d\u59cb\u5316\u4e3a 5\uff0c y \u521d\u59cb\u5316\u4e3a 0\uff0c\u800c p \u88ab\u521d\u59cb\u5316\u4e3a NULL\u3002\u8fd9\u4e2a\u89c4\u5219\u5c31\u50cf y \u548c p \u662f\u9759\u6001\u53d8\u91cf\u4e00\u6837\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\uff0c\u800c\u8be5\u6210\u5458\u4e5f\u662f\u7ed3\u6784\u4f53\uff1a struct point { int x, y; }; struct rectangle { struct point top_left, bottom_right; }; struct rectangle my_rectangle = { {0, 5}, {10, 0} }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a rectangle \u7684\u7ed3\u6784\u4f53\u5305\u542b 2 \u4e2a point \u7ed3\u6784\u4f53\u53d8\u91cf\u3002\u7136\u540e\u58f0\u660e\u4e86\u4e00\u4e2a struct rectangle \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u5b83\u7684\u6210\u5458\u3002\u65e2\u7136\u5b83\u7684\u6210\u5458\u662f\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u6211\u4eec\u5f97\u518d\u4f7f\u7528\u4e00\u4e2a\u82b1\u62ec\u53f7\u6765\u62ec\u4f4f point \u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002\u7136\u800c\uff0c\u8be5\u82b1\u62ec\u53f7\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8fd9\u6837\u505a\u4ec5\u4ec5\u4f7f\u4ee3\u7801\u6613\u8bfb\u3002","title":"2.4.2.3 \u521d\u59cb\u5316\u7ed3\u6784\u4f53\u6210\u5458"},{"location":"Data-Types/#Accessing-Structure-Members","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u4f60\u8981\u628a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u628a\u6210\u5458\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u53f3\u8fb9\u3002 struct point { int x, y; }; struct point first_point; first_point.x = 0; first_point.y = 5; \u4f60\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u800c\u8be5\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u5176\u4ed6\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002 struct rectangle { struct point top_left, bottom_right; }; struct rectangle my_rectangle; my_rectangle.top_left.x = 0; my_rectangle.top_left.y = 5; my_rectangle.bottom_right.x = 10; my_rectangle.bottom_right.y = 0;","title":"2.4.3 \u8bbf\u95ee\u7ed3\u6784\u4f53\u6210\u5458"},{"location":"Data-Types/#Bit-Fields","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u975e\u6807\u51c6\u5927\u5c0f\u7684\u6574\u578b\u6765\u521b\u5efa\u7ed3\u6784\u4f53\uff0c\u79f0\u4e4b\u4e3a \u4f4d\u57df \u3002\u8981\u4f7f\u7528\u4f4d\u57df\uff0c\u4f60\u53ef\u4ee5\u50cf\u901a\u5e38\u90a3\u6837\u6307\u5b9a\u4e00\u4e2a\u6574\u578b\u6210\u5458\uff08 int \uff0c char \uff0c long int \u7b49\uff09\uff0c\u5e76\u5728\u6210\u5458\u540d\u5b57\u548c\u5206\u53f7\u4e4b\u95f4\u63d2\u5165\u4e00\u4e2a\u5192\u53f7\u548c\u8be5\u6210\u5458\u5360\u7684\u4f4d\u6570\u3002 struct card { unsigned int suit : 2; unsigned int face_value : 4; }; \u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5b83\u6709 2 \u4e2a\u4f4d\u57df suit \u548c face_value \uff0c\u5206\u522b\u5360 2 \u4e2a\u4f4d\u548c 4 \u4e2a\u4f4d\u3002 suit \u80fd\u653e 0~3\uff0c\u800c face_value \u80fd\u653e 0~15\u3002\u6ce8\u610f\u8fd9\u4e9b\u4f4d\u57df\u88ab\u58f0\u660e\u4e3a\u4e86 unsigned int \u7c7b\u578b\uff1b\u5982\u679c\u5b83\u4eec\u88ab\u58f0\u660e\u4e3a signed int \u7c7b\u578b\uff0c\u90a3\u5b83\u4eec\u7684\u503c\u8303\u56f4\u5c06\u5206\u522b\u662f -2~1 \u548c -8~7\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c N \u4f4d unsigned \u7684\u4f4d\u57df\u8303\u56f4\u662f 0 \u5230 2^N-1 \uff0c\u800c N \u4f4d signed \u7684\u4f4d\u57df\u8303\u56f4\u662f -(2^N) / 2 \u5230 ((2^N) / 2) -1 \u3002 \u4f4d\u57df\u53ef\u4ee5\u4e0d\u8981\u540d\u5b57\uff0c\u4ee5\u4fbf\u63a7\u5236\u5bb9\u7eb3\u5355\u5143\u4e2d\u54ea\u4e9b\u5b9e\u9645\u7684\u4f4d\u88ab\u4f7f\u7528\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7684\u7ed3\u679c\u662f\u4e0d\u53ef\u79fb\u690d\u7684\uff0c\u6240\u4ee5\u5f88\u5c11\u4f7f\u7528\u3002\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4f4d\u57df\u7684\u5927\u5c0f\u4e3a 0\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u4f4d\u57df\u540e\u9762\u7684\u4f4d\u57df\u5e94\u8be5\u6253\u5305\u8fdb\u524d\u9762\u7684\u4f4d\u57df\u4e2d\u3002\u8fd9\u901a\u5e38\u4e5f\u6ca1\u5565\u7528\u3002 \u4f60\u4e0d\u80fd\u5bf9\u4f4d\u57df\u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26 & \u6765\u5bf9\u5176\u53d6\u5730\u5740\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09","title":"2.4.4 \u4f4d\u57df"},{"location":"Data-Types/#Size-of-Structures","text":"\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u5927\u5c0f\u7b49\u4e8e\u5176\u6240\u6709\u6210\u5458\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u53ef\u80fd\u5305\u62ec\u4f7f\u7ed3\u6784\u7c7b\u578b\u4e0e\u7279\u5b9a\u5b57\u8282\u8fb9\u754c\u5bf9\u9f50\u7684\u586b\u5145\u3002\u5bf9\u9f50\u7ec6\u8282\u4f1a\u6839\u636e\u4f60\u7684\u8ba1\u7b97\u673a\u5e73\u53f0\u800c\u4e0d\u540c\uff0c\u4f46\u4e00\u822c\u4f1a\u770b\u5230\u5bf9 4 \u5b57\u8282\u6216 8 \u5b57\u8282\u8fb9\u754c\u5bf9\u9f50\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u52a0\u901f\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9e\u4f8b\u7684\u5185\u5b58\u8bbf\u95ee\u3002 GNU \u6269\u5c55\u5141\u8bb8\u7ed3\u6784\u4f53\u6ca1\u6709\u4efb\u4f55\u6210\u5458\uff0c\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\u5927\u5c0f\u4e3a 0. \u5982\u679c\u4f60\u660e\u786e\u4e0d\u8981\u586b\u5145\u4f60\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\uff08\u8fd9\u6837\u505a\u53cd\u800c\u4f1a\u964d\u4f4e\u5bf9\u7ed3\u6784\u4f53\u7684\u8bbf\u5b58\u901f\u5ea6\uff09\uff0cGCC \u63d0\u4f9b\u4e86\u51e0\u79cd\u5173\u95ed\u586b\u5145\u7684\u65b9\u6cd5\u3002\u8f83\u5feb\u4e14\u6613\u7528\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 -fpack-struct \u7f16\u8bd1\u9009\u9879\u3002\u66f4\u591a\u5173\u4e8e\u7701\u7565\u586b\u5145\u7684\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003\u4f60\u4f7f\u7528\u7684\u7f16\u8bd1\u5668\u7248\u672c\u7684\u5bf9\u5e94\u624b\u518c\u3002","title":"2.4.5 \u7ed3\u6784\u4f53\u5927\u5c0f"},{"location":"Data-Types/#Arrays","text":"\u6570\u7ec4\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u80fd\u8ba9\u4f60\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u5b58\u50a8\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u5728 C \u4e2d\uff0c\u6570\u7ec4\u5143\u7d20\u7684\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u800c\u4e0d\u662f 1.","title":"2.5 \u6570\u7ec4"},{"location":"Data-Types/#Declaring-Arrays","text":"\u8981\u58f0\u660e\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u5b83\u7684\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7684\u540d\u5b57\u4ee5\u53ca\u5b83\u80fd\u5b58\u50a8\u591a\u5c11\u5143\u7d20\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u58f0\u660e\u4e86\u53ef\u4ee5\u5b58\u653e 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u7684\u4f8b\u5b50\uff1a int my_array[10]; \u5bf9\u4e8e\u6807\u51c6 C \u4ee3\u7801\uff0c\u5143\u7d20\u7684\u4e2a\u6570\u53ea\u80fd\u662f\u6b63\u6570\u3002 GNU \u6269\u5c55\u5141\u8bb8\u5143\u7d20\u7684\u4e2a\u6570\u53ef\u4ee5\u5c0f\u5230 0. 0 \u957f\u5ea6\u7684\u6570\u7ec4\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f88\u6709\u7528\uff0c\u8fd9\u6837\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u53d8\u957f\u5ea6\u5bf9\u8c61\u7684\u5934\u90e8\u3002 struct line { int length; char contents[0]; }; { struct line *this_line = (struct line *) malloc (sizeof (struct line) + this_length); this_line -> length = this_length; } \u5176\u4ed6\u7684 GNU \u6269\u5c55\u5141\u8bb8\u4f60\u4f7f\u7528\u53d8\u91cf\u6765\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e2d\uff0c\u4f7f\u7528\u5b83\u7684\u53c2\u6570\u4f5c\u4e3a\u5143\u7d20\u4e2a\u6570\u6765\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\uff1a int my_function (int number) { int my_array[number]; \u2026; }","title":"2.5.1 \u58f0\u660e\u6570\u7ec4"},{"location":"Data-Types/#Initializing-Arrays","text":"\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u6570\u7ec4\u7684\u65f6\u5019\u901a\u8fc7\u82b1\u62ec\u53f7\u5217\u51fa\u9017\u53f7\u5206\u5272\u7684\u521d\u59cb\u5316\u503c\u6765\u521d\u59cb\u5316\u6570\u7ec4\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff1a int my_array[5] = { 0, 1, 2, 3, 4 }; \u4f60\u4e0d\u5fc5\u5b8c\u5168\u521d\u59cb\u5316\u6240\u6709\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u521d\u59cb\u5316\u4e86\u524d\u9762 3 \u4e2a\u5143\u7d20\uff0c\u540e\u9762 2 \u4e2a\u88ab\u521d\u59cb\u5316\u4e86\u9ed8\u8ba4\u503c 0. int my_array[5] = { 0, 1, 2 }; \u5728\u4f7f\u7528 ISO C99 \u6216\u8005 GNU \u6269\u5c55\u7684 C89 \u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u6309\u987a\u5e8f\u521d\u59cb\u5316\uff0c\u800c\u662f\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u4e0b\u6807\u3002\u8981\u8fd9\u6837\u505a\uff0c\u4f60\u5f97\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4e0b\u6807\uff0c\u5e76\u4e14\u540e\u9762\uff08\u8981\u521d\u59cb\u5316\u7684\u503c\u524d\u9762\uff09\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u53ef\u9009\u7684\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002\u4f8b\u5982\uff1a int my_array[5] = { [2] 5, [4] 9 }; \u6216\u8005\u4f7f\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\uff1a int my_array[5] = { [2] = 5, [4] = 9 }; \u8fd9 2 \u79cd\u65b9\u5f0f\u548c\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u7b49\u4ef7\u7684\uff1a int my_array[5] = { 0, 0, 5, 0, 9 }; \u5728\u4f7f\u7528 GNU \u6269\u5c55\u7684\u65f6\u5019\uff0c\u4f60\u8fd8\u53ef\u4ee5\u7ed9\u4e00\u5217\u8fde\u7eed\u7684\u5143\u7d20\u8d4b\u7ed9\u76f8\u540c\u7684\u503c\uff0c\u53ea\u8981\u6307\u5b9a\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5f62\u5f0f\u5982 [first] ... [last] \u3002\u4f8b\u5982\uff1a int new_array[100] = { [0 ... 9] = 1, [10 ... 98] = 2, 3 }; \u8fd9\u5c06\u5143\u7d20 0 \u5230 9\u521d\u59cb\u5316\u4e3a 1\uff0c10 \u5230 98 \u521d\u59cb\u5316\u4e3a 2\uff0c\u5143\u7d20 99 \u521d\u59cb\u5316\u4e3a 3\u3002\uff08\u4f60\u5f53\u7136\u4e5f\u53ef\u4ee5\u660e\u786e\u5f97\u5199\u6210 [99] = 3\uff09\u3002\u6b64\u5916\uff0c\u4f60\u8981\u6ce8\u610f\u5728 ... \u7684\u4e24\u8fb9\u90fd\u6709\u7a7a\u683c\u3002 \u5982\u679c\u4f60\u521d\u59cb\u5316\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\uff0c\u5219\u4f60\u4e0d\u5fc5\u6307\u5b9a\u5b83\u7684\u5927\u5c0f\u4e86\uff1b\u5b83\u7684\u5927\u5c0f\u4f1a\u6839\u636e\u4f60\u521d\u59cb\u5316\u7684\u5143\u7d20\u7684\u4e2a\u6570\u800c\u51b3\u5b9a\u3002\u4f8b\u5982\uff1a int my_array[] = { 0, 1, 2, 3, 4 }; \u5c3d\u7ba1\u8fd9\u91cc\u6ca1\u6709\u7528 my_array[5] \u6765\u660e\u786e\u6307\u660e\u8be5\u6570\u7ec4\u6709 5 \u4e2a\u5143\u7d20\uff0c\u4f46\u5b83\u521d\u59cb\u5316\u4e86 5 \u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u8be5\u6570\u7ec4\u5c31\u6709 5 \u4e2a\u5143\u7d20\u3002 \u6b64\u5916\uff0c\u5982\u679c\u4f60\u901a\u8fc7\u6307\u5b9a\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\u5143\u7d20\uff0c\u90a3\u8be5\u6570\u7ec4\u7684\u5927\u5c0f\u5c31\u662f\u4f60\u521d\u59cb\u5316\u7684\u6700\u9ad8\u7684\u5143\u7d20\u4e0b\u6807\u52a0\u4e0a 1\u3002\u4f8b\u5982\uff1a int my_array[] = { 0, 1, 2, [99] = 99 }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u867d\u7136\u53ea\u521d\u59cb\u5316\u4e86 4 \u4e2a\u5143\u7d20\uff0c\u4f46\u6700\u540e\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u5143\u7d20\u7684\u4e0b\u6807\u662f 99\uff0c\u56e0\u6b64\u8be5\u6570\u7ec4\u6709 100 \u4e2a\u5143\u7d20\u3002","title":"2.5.2 \u521d\u59cb\u5316\u6570\u7ec4"},{"location":"Data-Types/#Accessing-Array-Elements","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u540d\u5e76\u5728\u540e\u9762\u8ddf\u4e0a\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u5143\u7d20\u4e0b\u6807\u6765\u8bbf\u95ee\u8be5\u5143\u7d20\u3002\u8bb0\u5f97\uff0c\u6570\u7ec4\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002\u4f8b\u5982\uff1a my_array[0] = 5; \u8fd9\u4e2a\u4f8b\u5b50\u5c06\u503c 5 \u8d4b\u7ed9\u4e86\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u5728\u4f4d\u7f6e 0 \u4e0a\u3002\u4f60\u53ef\u4ee5\u628a\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u5f53\u505a\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\u5c31\u662f\u5176\u6570\u7ec4\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u90a3\u6837\u8bbf\u95ee\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff1a struct point { int x, y; }; struct point point_array[2] = { {4, 5}, {8, 9} }; point_array[0].x = 3;","title":"2.5.3 \u8bbf\u95ee\u6570\u7ec4"},{"location":"Data-Types/#Multidimensional-Arrays","text":"\u4f60\u53ef\u4ee5\u9020\u51fa\u591a\u7ef4\u6570\u7ec4\uff0c\u6216\u8005\u53eb\u201c\u6570\u7ec4\u7684\u6570\u7ec4\u201d\u3002\u53ea\u8981\u518d\u52a0\u4e0a\u4e00\u4e2a\u65b9\u62ec\u53f7\u4ee5\u53ca\u4e00\u4e2a\u6570\u7ec4\u957f\u5ea6\u4ee3\u8868\u65b0\u7ef4\u5ea6\u7684\u6bcf\u4e00\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u58f0\u660e\u4e86\u4e00\u4e2a\u6709 2 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u62e5\u6709 5 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff1a int two_dimensions[2][5] { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} }; \u591a\u7ef4\u6570\u7ec4\u5143\u7d20\u7684\u8bbf\u95ee\u8981\u6307\u5b9a\u6bcf\u4e00\u7ef4\u7684\u4e0b\u6807\uff1a two_dimensions[1][3] = 12; \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c two_dimensions[0] \u672c\u8eab\u662f\u4e00\u4e2a\u6570\u7ec4\u3002\u5143\u7d20 two_dimensions[0][2] \u540e\u9762\u662f two_dimensions[0][3] \u800c\u4e0d\u662f two_dimensions[1][2] \u3002","title":"2.5.4 \u591a\u7ef4\u6570\u7ec4"},{"location":"Data-Types/#Arrays-as-Strings","text":"\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u6765\u5b58\u653e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u8be6\u89c1 \u5b57\u7b26\u4e32\u5e38\u91cf \uff09\u3002\u8be5\u6570\u7ec4\u5e94\u8be5\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\u7684\u5b57\u7b26\u7c7b\u578b\u3002 \u5f53\u4f60\u58f0\u660e\u6570\u7ec4\u65f6\u4f60\u53ef\u4ee5\u6307\u5b9a\u6570\u7ec4\u5927\u5c0f\u3002\u8be5\u5927\u5c0f\u662f\u6570\u7ec4\u80fd\u5b58\u653e\u7684\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5305\u62ec\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684 null \u5b57\u7b26\u3002\u5982\u679c\u4f60\u6307\u5b9a\u4e86\u5927\u5c0f\uff0c\u90a3\u5c31\u4e0d\u5fc5\u5728\u58f0\u660e\u65f6\u521d\u59cb\u5316\u5b83\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u5927\u5c0f\u8db3\u591f\u5b58\u653e\u4f60\u521d\u59cb\u5316\u7684\u5b57\u7b26\u4e32\u3002 \u6709 2 \u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4e00\u5217\u9017\u53f7\u5206\u5272\u7684\u5b57\u7b26\uff0c\u6216\u8005\u6307\u5b9a\u53cc\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u3002 \u4f8b\u5982\uff1a char blue[26]; char yellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', '\\0'}; char orange[26] = \"orange\"; char gray[] = {'g', 'r', 'a', 'y', '\\0'}; char salmon[] = \"salmon\"; \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u672b\u5c3e\u90fd\u52a0\u4e86 null \u5b57\u7b26\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u663e\u793a\u5730\u5199\u660e\u3002\uff08\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7528\u5b57\u7b26\u7684\u5f62\u5f0f\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u90a3\u5c31\u5fc5\u987b\u663e\u793a\u6dfb\u52a0 null \u5b57\u7b26\u3002\u867d\u7136\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4f1a\u610f\u5916\u5b58\u5728\u672b\u5c3e\u7684 null \u5b57\u7b26\uff0c\u4f46\u4f60\u4e0d\u80fd\u4ee5\u6765\u8fd9\u79cd\u5076\u7136\uff09 \u521d\u59cb\u5316\u540e\u4f60\u5c31\u4e0d\u80fd\u518d\u7528\u8d4b\u503c\u64cd\u4f5c\u7b26\u6765\u8d4b\u503c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u4e86\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u4e0d\u80fd\u5de5\u4f5c\uff1a char lemon[26] = \"custard\"; lemon = \"steak sauce\"; /* Fails! */ \u7136\u800c\uff0cGNU C \u5e93\u4e2d\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u64cd\u4f5c\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u62f7\u8d1d\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u50cf\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\uff0c\u901a\u8fc7\u8bbf\u95ee\u5b57\u7b26\u4e32 \u5404\u4e2a\u5143\u7d20\u7684\u65b9\u5f0f\u6765\u4e00\u6b21\u4fee\u6539\u4e00\u4e2a\u5b57\u7b26\uff1a char name[] = \"bob\"; name[0] = 'r'; \u6709\u65f6\u5019\u4f60\u53ef\u80fd\u6307\u5b9a\u4e86\u6570\u7ec4\u5927\u5c0f\uff0c\u4f46\u7ed9\u5b83\u521d\u59cb\u5316\u65f6\u5374\u7528\u4e86\u4e00\u4e2a\u6bd4\u5b83\u957f\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e0d\u662f\u4e2a\u597d\u4e8b\u60c5\u3002\u8be5\u5b57\u7b26\u4e32\u5e76\u4e0d\u80fd\u53d6\u4ee3\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5e76\u4e14\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u8b66\u544a\u3002\u56e0\u4e3a\u539f\u6765\u7684\u6570\u7ec4\u5927\u5c0f\u56fa\u5b9a\uff0c\u5219\u5b57\u7b26\u4e32\u7684\u8d85\u51fa\u90e8\u5206\u4f1a\u5199\u5230\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u7ec4\u7684\u5185\u5b58\u7a7a\u95f4\u3002","title":"2.5.5 \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u6570\u7ec4"},{"location":"Data-Types/#Arrays-of-Unions","text":"\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u5408\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5c31\u50cf\u521b\u5efa\u57fa\u7840\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\u3002 union numbers { int i; float f; }; union numbers number_array [3]; \u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a 3 \u4e2a\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6570\u7ec4\uff0c\u540d\u5b57\u53eb number_array \u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u8054\u5408\u4f53\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\uff1a union numbers number_array [3] = { {3}, {4}, {5} }; \u5185\u90e8\u7684\u5206\u7ec4\u82b1\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002 \u5728\u521d\u59cb\u5316\u540e\uff0c\u4f60\u4ecd\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u8054\u5408\u4f53\u6210\u5458\u3002\u64cd\u4f5c\u7b26\u7684\u5de6\u8fb9\u662f\u6570\u7ec4\u540d\u548c\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff08\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u53f3\u8fb9\u662f\u6210\u5458\u540d\u5b57\u3002 union numbers number_array [3]; number_array[0].i = 2;","title":"2.5.6 \u8054\u5408\u4f53\u6570\u7ec4"},{"location":"Data-Types/#Arrays-of-Structures","text":"\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5c31\u50cf\u521b\u5efa\u57fa\u7840\u7c7b\u578b\u6570\u7ec4\u4e00\u6837\u3002 struct point { int x, y; }; struct point point_array [3]; \u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a 3 \u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6570\u7ec4\uff0c\u540d\u5b57\u53eb point_array \u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u5143\u7d20\uff1a struct point point_array [3] = { {2, 3}, {4, 5}, {6, 7} }; \u5c31\u548c\u521d\u59cb\u5316\u5305\u542b\u7ed3\u6784\u4f53\u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4e00\u6837\uff0c\u5185\u90e8\u7684\u5206\u7ec4\u82b1\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e26\u4e0a\u4e86\u5206\u7ec4\u82b1\u62ec\u53f7\uff0c\u4f60\u53ef\u4ee5\u53ea\u521d\u59cb\u5316\u67d0\u4e9b\u5143\u7d20\u7684\u90e8\u5206\u6210\u5458\u3002 struct point point_array [3] = { {2}, {4, 5}, {6, 7} }; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ea\u521d\u59cb\u5316\u4e86 x \u6210\u5458\u3002\u56e0\u4e3a\u5206\u7ec4\u82b1\u62ec\u53f7\uff0c \u503c 4 \u88ab\u8d4b\u7ed9\u4e86\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 x \u6210\u5458\uff0c\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 y \u6210\u5458\u3002\u800c\u5982\u679c\u6ca1\u6709\u5206\u7ec4\u82b1\u62ec\u53f7\u5219\u76f8\u53cd\u3002 \u5728\u521d\u59cb\u5316\u540e\uff0c\u4f60\u4ecd\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u7ed3\u6784\u4f53\u6210\u5458\u3002\u64cd\u4f5c\u7b26\u7684\u5de6\u8fb9\u662f\u6570\u7ec4\u540d\u548c\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\uff08\u7528\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\uff09\uff0c\u53f3\u8fb9\u662f\u6210\u5458\u540d\u5b57\u3002 struct point point_array [3]; point_array[0].x = 2; point_array[0].y = 3;","title":"2.5.7 \u7ed3\u6784\u4f53\u6570\u7ec4"},{"location":"Data-Types/#Pointers","text":"\u6307\u9488\u7528\u6765\u5b58\u653e\u5e38\u91cf\u6216\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002\u5bf9\u4e8e\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec\u57fa\u7840\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6307\u9488\u6765\u5b58\u653e\u8be5\u7c7b\u578b\u5b9e\u4f8b\u7684\u5185\u5b58\u5730\u5740\u3002","title":"2.6 \u6307\u9488"},{"location":"Data-Types/#Declaring-Pointers","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u540d\u5b57\u548c\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u6765\u58f0\u660e\u6307\u9488\u3002\u6570\u636e\u7c7b\u578b\u662f\u6307\u8be5\u6307\u9488\u8981\u5b58\u653e\u7684\u662f\u54ea\u79cd\u7c7b\u578b\u53d8\u91cf\u5185\u5b58\u5730\u5740\u3002 \u8981\u58f0\u660e\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u6807\u8bc6\u7b26\u524d\u9762\u52a0\u4e0a\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09\u4e0b\u9762\u662f\u4e00\u822c\u5f62\u5f0f\uff1a data-type * name; \u5728\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\u4e24\u8fb9\u7684\u7a7a\u767d\u7b26\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff1a data-type *name; data-type* name; \u4e0b\u9762\u7684\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u5b58\u653e int \u53d8\u91cf\u5730\u5740\u7684\u6307\u9488\uff1a int *ip; \u8981\u5f53\u5fc3\u7684\u662f\uff0c\u5728\u540c\u4e00\u4e2a\u8bed\u53e5\u4e2d\u58f0\u660e\u591a\u4e2a\u6307\u9488\u65f6\uff0c\u4e00\u5b9a\u8981\u5728\u6bcf\u4e00\u4e2a\u6307\u9488\u524d\u90fd\u4f7f\u7528\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\uff1a int *foo, *bar; /* Two pointers. */ int *baz, quux; /* A pointer and an integer variable. */","title":"2.6.1 \u58f0\u660e\u6307\u9488"},{"location":"Data-Types/#Initializing-Pointers","text":"\u4f60\u53ef\u4ee5\u5728\u58f0\u660e\u6307\u9488\u65f6\u901a\u8fc7\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\u5730\u5740\u521d\u59cb\u5316\u5b83\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u58f0\u660e\u4e86\u4e00\u4e2a int \u53d8\u91cf i \uff0c\u548c\u4e00\u4e2a\u6307\u9488 ip \uff0c\u5e76\u521d\u59cb\u5316\u4e3a\u4e86 i \u7684\u5730\u5740\uff1a int i; int *ip = &i; \u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6307\u9488\u64cd\u4f5c\u7b26 \uff09\u6765\u83b7\u53d6\u53d8\u91cf\u7684\u5730\u5740\u3002\u5728\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u540e\uff0c\u8981\u7ed9\u8be5\u6307\u9488\u8d4b\u503c\u4e00\u4e2a\u65b0\u7684\u5730\u5740\u65f6\u5c31\u4e0d\u8981\u5728\u6307\u9488\u7684\u540d\u5b57\u524d\u4f7f\u7528\u95f4\u63a5\u5bfb\u5740\u64cd\u4f5c\u7b26\u4e86\u3002\u76f8\u53cd\uff0c\u8fd9\u6837\u505a\u4f1a\u6539\u53d8\u6307\u9488\u6307\u5411\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u662f\u6307\u9488\u5b83\u81ea\u5df1\u7684\u503c\uff0c\u4f8b\u5982\uff1a int i, j; int *ip = &i; /* \u2018ip\u2019 now holds the address of \u2018i\u2019. */ ip = &j; /* \u2018ip\u2019 now holds the address of \u2018j\u2019. */ *ip = &i; /* \u2018j\u2019 now holds the address of \u2018i\u2019. */ \u5b58\u5728\u6307\u9488\u91cc\u9762\u7684\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff1a\u4e00\u4e2a\u8ba1\u7b97\u673a\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u3002\u5982\u679c\u4f60\u60f3\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u8d4b\u7ed9\u6307\u9488\u4e00\u4e2a\u6570\u5b57\u5e38\u91cf\uff0c\u4f1a\u8f6c\u6362\u6570\u5b57\u5e38\u91cf\u4e3a\u6b63\u786e\u7684\u6307\u9488\u7c7b\u578b\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u9664\u975e\u4f60\u80fd\u6781\u597d\u5730\u63a7\u5236\u4f60\u5728\u5185\u5b58\u4e2d\u5b58\u653e\u4e86\u4ec0\u4e48\uff0c\u5e76\u6e05\u695a\u5730\u4e86\u89e3\u4f60\u5728\u505a\u4ec0\u4e48\u3002\u56e0\u4e3a\u8fd9\u6837\u505a\u5f88\u5bb9\u6613\u4e0d\u5c0f\u5fc3\u8986\u76d6\u6389\u4f60\u5e76\u4e0d\u50cf\u8986\u76d6\u7684\u5185\u5bb9\u3002\u5e76\u4e14\u5927\u591a\u6570\u8fd9\u6837\u7684\u6280\u672f\u90fd\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 \u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff1a\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u7684\u5730\u5740\u6765\u521d\u59cb\u5316\u6307\u9488\uff0c\u90a3\u5b83\u901a\u5e38\u4e0d\u6307\u5411\u4efb\u4f55\u5730\u65b9\uff1b\u5982\u679c\u4f60\u4f7f\u7528\u5b83\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u4f60\u7684\u7a0b\u5e8f\u6302\u6389\uff08\u901a\u5e38\u8fd9\u79cd\u884c\u4e3a\u88ab\u79f0\u4f5c\u672a\u5b9a\u4e49\u884c\u4e3a\uff09","title":"2.6.2 \u521d\u59cb\u5316\u6307\u9488"},{"location":"Data-Types/#Pointers-to-Unions","text":"\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u5408\u4f53\u6307\u9488\uff0c\u5c31\u50cf\u521b\u5efa\u5176\u4ed6\u57fa\u7840\u7c7b\u578b\u6307\u9488\u4e00\u6837\u3002 union numbers { int i; float f; }; union numbers foo = {4}; union numbers *number_ptr = &foo; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u8054\u5408\u4f53\u7c7b\u578b union numbers \uff0c\u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf foo \uff08\u540c\u65f6\u521d\u59cb\u5316\u4e86\u7b2c\u4e00\u4e2a\u6210\u5458\uff09\u3002\u6700\u540e\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u5c06 foo \u7684\u5730\u5740\u8d4b\u7ed9\u4e86\u5b83\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u4f46\u4f60\u4e0d\u80fd\u50cf\u524d\u9762\u90a3\u6837\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u4e86\u3002\u800c\u662f\u8981\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f \uff09\u3002\u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u6539\u53d8 foo \u53d8\u91cf\u7684\u7b2c\u4e00\u4e2a\u6210\u5458\u7684\u503c\uff1a number_ptr -> i = 450; Now the i member in foo is 450.","title":"2.6.3 \u8054\u5408\u4f53\u6307\u9488"},{"location":"Data-Types/#Pointers-to-Structures","text":"\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u6307\u9488\uff0c\u5c31\u50cf\u521b\u5efa\u5176\u4ed6\u57fa\u7840\u7c7b\u578b\u6307\u9488\u4e00\u6837\u3002 struct fish { float length, weight; }; struct fish salmon = {4.3, 5.8}; struct fish *fish_ptr = &salmon; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u7c7b\u578b struct fish \uff0c\u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf salmon \uff08\u540c\u65f6\u521d\u59cb\u5316\uff09\u3002\u6700\u540e\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411\u8be5\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5e76\u5c06 salmon \u7684\u5730\u5740\u8d4b\u7ed9\u4e86\u5b83\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u4f46\u4f60\u4e0d\u80fd\u50cf\u524d\u9762\u90a3\u6837\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\u4e86\u3002\u800c\u662f\u8981\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26\uff08\u8be6\u89c1 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f \uff09\u3002\u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u6539\u53d8 salmon \u53d8\u91cf\u7684\u6210\u5458\u7684\u503c\uff1a fish_ptr -> length = 5.1; fish_ptr -> weight = 6.2; \u73b0\u5728 salmon \u7684\u6210\u5458 length \u548c width \u7684\u503c\u5206\u522b\u662f 5.1 \u548c 6.2 \u4e86\u3002","title":"2.6.4 \u7ed3\u6784\u4f53\u6307\u9488"},{"location":"Data-Types/#Incomplete-Types","text":"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u8054\u5408\u4f53\u548c\u679a\u4e3e\u800c\u4e0d\u5217\u51fa\u4ed6\u4eec\u7684\u6210\u5458\uff08\u5728\u679a\u4e3e\u4e2d\u53eb\u505a\u503c\uff09\u3002\u8fd9\u6837\u505a\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7c7b\u578b\u3002\u4f60\u4e0d\u80fd\u4f7f\u7528\u4e0d\u5b8c\u6574\u7c7b\u578b\u6765\u58f0\u660e\u53d8\u91cf\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528\u6307\u5411\u8fd9\u79cd\u7c7b\u578b\u7684\u6307\u9488\u3002 struct point; \u5728\u4f60\u7a0b\u5e8f\u7684\u540e\u9762\u4f60\u4f1a\u8865\u5168\u8fd9\u4e2a\u7c7b\u578b\u3002\u5c31\u50cf\u4f60\u5e73\u5e38\u5b9a\u4e49\u4e00\u6837\uff1a struct point { int x, y; }; \u8fd9\u79cd\u6280\u672f\u7ecf\u5e38\u7528\u4e8e\u94fe\u8868\uff1a struct singly_linked_list { struct singly_linked_list *next; int x; /* other members here perhaps */ }; struct singly_linked_list *list_head;","title":"2.7 \u4e0d\u5b8c\u6574\u7c7b\u578b"},{"location":"Data-Types/#Type-Qualifiers","text":"\u6709 2 \u79cd\u7c7b\u578b\u9650\u5b9a\u53ef\u4ee5\u52a0\u5728\u53d8\u91cf\u58f0\u660e\u524d\u9762\u6765\u6539\u53d8\u53d8\u91cf\u7684\u8bbf\u95ee\uff1a const \u548c volatile \u3002 const \u628a\u53d8\u91cf\u53d8\u6210\u53ea\u8bfb\u7684\uff1b\u521d\u59cb\u5316\u4e4b\u540e\u503c\u5c31\u4e0d\u80fd\u518d\u6539\u53d8\u3002 const float pi = 3.14159f; \u9664\u4e86\u9632\u6b62\u503c\u610f\u5916\u88ab\u6539\u53d8\uff0c\u58f0\u660e const \u53d8\u91cf\u8fd8\u80fd\u5e2e\u52a9\u7f16\u8bd1\u5668\u4f18\u5316\u4ee3\u7801\u3002 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u8be5\u53d8\u91cf\u7ecf\u5e38\u6539\u53d8\uff0c\u770b\u4f3c\u65e0\u7528\u7684\u53d8\u91cf\u8bbf\u95ee\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u6307\u9488\uff09\u4e0d\u5e94\u8be5\u88ab\u4f18\u5316\u6389\u3002\u4f60\u53ef\u80fd\u4f1a\u5728\u56de\u8c03\u51fd\u6570\u4f1a\u66f4\u65b0\u5b58\u50a8\u6570\u636e\u548c\u4fe1\u53f7\u5904\u7406\u65f6\u4f7f\u7528 volatile \u53d8\u91cf\u3002\u53c2\u89c1 \u5e8f\u5217\u70b9\u548c\u4fe1\u53f7\u4f20\u9012 volatile float currentTemperature = 40.0;","title":"2.8 \u7c7b\u578b\u9650\u5b9a\u7b26"},{"location":"Data-Types/#Storage-Class-Specifiers","text":"\u6709 4 \u79cd\u5b58\u50a8\u7c7b\u522b\u53ef\u4ee5\u52a0\u5728\u4f60\u7684\u53d8\u91cf\u524d\u9762\u6765\u6539\u53d8\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5982\u4f55\u5b58\u50a8\uff1a auto \uff0c extern \uff0c register \u548c static \u3002 \u4f7f\u7528 auto \u4f1a\u5c06\u53d8\u91cf\u5b58\u5728\u51fd\u6570\u672c\u5730\uff0c\u53d8\u91cf\u7684\u503c\u5728\u51fd\u6570\u8fd4\u56de\u540e\u4f1a\u88ab\u9500\u6bc1\u3002\u8fd9\u662f\u5728\u51fd\u6570\u4e2d\u5b9a\u4e49\u53d8\u91cf\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 void foo (int value) { auto int x = value; \u2026 return; } register \u4f5c\u7528\u548c auto \u975e\u5e38\u7c7b\u4f3c\uff0c\u9664\u4e86\u5b83\u4f1a\u5efa\u8bae\u7f16\u8bd1\u5668\u8be5\u53d8\u91cf\u4f1a\u7ecf\u5e38\u7528\u5230\uff0c\u5982\u679c\u53ef\u80fd\u5c31\u628a\u8be5\u53d8\u91cf\u5b58\u5728\u5bc4\u5b58\u5668\u91cc\u3002\u4f60\u4e0d\u80fd\u4f7f\u7528\u53d6\u5730\u5740\u64cd\u4f5c\u7b26\u6765\u83b7\u53d6 register \u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5f15\u7528 register \u6570\u7ec4\u7684\u5143\u7d20\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u6570\u7ec4\u4f60\u552f\u4e00\u80fd\u505a\u7684\u5c31\u662f\u4f7f\u7528 sizeof \u6765\u83b7\u53d6\u957f\u5ea6\u3002GCC \u901a\u5e38\u5bf9\u54ea\u4e9b\u503c\u5e94\u8be5\u653e\u8fdb\u5bc4\u5b58\u5668\u4f1a\u6709\u5f88\u597d\u7684\u9009\u62e9\uff0c\u6240\u4ee5 register \u4e0d\u4f1a\u5e38\u7528\u5230\u3002 static \u672c\u8d28\u4e0a\u548c auto \u662f\u76f8\u5bf9\u7684\uff1a\u5982\u679c\u5728\u51fd\u6570\u548c\u4ee3\u7801\u5757\u91cc\u4f7f\u7528 static \uff0c\u53d8\u91cf\u4f1a\u4e00\u76f4\u4fdd\u7559\u4ed6\u4eec\u7684\u503c\uff0c\u5373\u4f7f\u51fd\u6570\u6216\u4ee3\u7801\u5757\u7ed3\u675f\u3002\u8fd9\u5c31\u662f\u9759\u6001\u5b58\u50a8\u671f\u3002 int sum (int x) { static int sumSoFar = 0; sumSoFar = sumSoFar + x; return sumSoFar; } \u4f60\u4e5f\u53ef\u4ee5\u5728\u6700\u5916\u5c42\uff08\u4e5f\u5c31\u662f\u4e0d\u5728\u51fd\u6570\u91cc\u9762\uff09\u58f0\u660e static \u53d8\u91cf\uff08\u6216\u51fd\u6570\uff09\uff1b\u8fd9\u79cd\u53d8\u91cf\u5bf9\u5f53\u524d\u6574\u4e2a\u6e90\u6587\u4ef6\u5168\u5c40\u53ef\u89c1\uff08\u4f46\u662f\u5bf9\u5176\u4ed6\u6e90\u6587\u4ef6\u4e0d\u53ef\u89c1\uff09\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6837 static \u5c31\u6709\u4e86\u4e8c\u4e49\u6027\uff1b\u7b2c\u4e8c\u79cd\u542b\u4e49\u4e5f\u53eb\u505a \u9759\u6001\u8fde\u63a5 \u30022 \u4e2a\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u9759\u6001\u51fd\u6570\u6216\u53d8\u91cf\u662f\u5b8c\u5168\u9694\u79bb\u7684\uff1b\u4efb\u4f55\u4e00\u4e2a\u5bf9\u9664\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5916\u90fd\u4e0d\u53ef\u89c1\u3002 \u672a\u521d\u59cb\u5316\u7684 extern \u53d8\u91cf\u4f1a\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u503c 0, 0.0 \u6216\u8005 NULL\uff0c\u53d6\u51b3\u4e8e\u53d8\u91cf\u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u672a\u521d\u59cb\u5316\u7684 auto \u6216 register \u53d8\u91cf\uff08\u5305\u62ec\u9ed8\u8ba4\u7684 auto \uff09\u90fd\u4fdd\u6301\u672a\u521d\u59cb\u5316\u72b6\u6001\uff0c\u56e0\u6b64\u4e0d\u8981\u5047\u8bbe\u5b83\u7684\u503c\u3002 extern \u5bf9\u60f3\u8981\u58f0\u660e\u6574\u4e2a\u8fde\u63a5\u7684\u9879\u76ee\u53ef\u89c1\u7684\u53d8\u91cf\u5341\u5206\u6709\u7528\u3002\u4f60\u4e0d\u80fd\u521d\u59cb\u5316\u4e00\u4e2a extern \u58f0\u660e\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u5728\u58f0\u660e\u671f\u95f4\u5e76\u6ca1\u6709\u7ed9\u5b83\u5206\u914d\u7a7a\u95f4\u3002\u4f60\u5fc5\u987b\u65e2\u8981\u505a extern \u58f0\u660e\uff08\u901a\u5e38\u5728\u4f1a\u88ab\u5176\u4ed6\u6e90\u6587\u4ef6\u5305\u542b\u7684\u7528\u4ee5\u8bbf\u95ee\u8be5\u53d8\u91cf\u7684\u5934\u6587\u4ef6\u91cc\uff09\u53c8\u8981\u505a\u975e extern \u58f0\u660e\uff0c\u975e extern \u58f0\u660e\u5b9e\u9645\u662f\u7528\u6765\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u7684\u3002 extern \u58f0\u660e\u53ef\u4ee5\u6709\u5f88\u591a\u6b21\u3002 extern int numberOfClients; \u2026 int numberOfClients = 0; \u7a0b\u5e8f\u7ed3\u6784\u76f8\u5173\u4fe1\u606f\u8be6\u89c1 \u7a0b\u5e8f\u7ed3\u6784\u548c\u4f5c\u7528\u57df \u3002","title":"2.9 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26"},{"location":"Data-Types/#Renaming-Types","text":"\u6709\u65f6\u7ed9\u7c7b\u578b\u8d77\u4e00\u4e2a\u65b0\u540d\u5b57\u662f\u5f88\u65b9\u4fbf\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 typedef \u8bed\u53e5\u6765\u7ed9\u7c7b\u578b\u8d77\u522b\u540d\u3002\u8be6\u89c1 typedef \u8bed\u53e5 \u3002","title":"2.10 \u7c7b\u578b\u522b\u540d"},{"location":"Expressions-And-Operators/","text":"3.1 \u8868\u8fbe\u5f0f \u00b6 \u4e00\u4e2a \u8868\u8fbe\u5f0f \u7531\u81f3\u5c11\u4e00\u4e2a\u64cd\u4f5c\u6570\u548c 0 \u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7b26\u7ec4\u6210\u3002\u64cd\u4f5c\u6570\u662f\u6709\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5982\u5e38\u91cf\u3001\u53d8\u91cf\u4ee5\u53ca\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8c03\u7528\u3002\u4f8b\u5982\uff1a 47 2 + 2 cosine(3.14159) /* We presume this returns a floating point value. */ \u5706\u62ec\u53f7\u5206\u7ec4\u7684\u5b50\u8868\u8fbe\u5f0f: ( 2 * ( ( 3 + 10 ) - ( 2 * 6 ) ) ) \u6700\u5185\u5c42\u7684\u8868\u8fbe\u5f0f\u6700\u5148\u8ba1\u7b97\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 3 + 10 \u548c 2 * 6 \u5206\u522b\u8ba1\u7b97\u4e3a 13 \u548c 12 \u3002\u7136\u540e 13 \u51cf\u53bb 12 \uff0c\u5f97\u5230 1 \u3002\u6700\u540e 1 \u4e58\u4e0a 2 \u5f97\u5230 2 \u3002\u6700\u5916\u5c42\u7684\u5706\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002 \u4e00\u4e2a \u64cd\u4f5c\u7b26 \u7ed9\u5b83\u7684 \u64cd\u4f5c\u6570 \u6307\u5b9a\u4e00\u4e2a\u64cd\u4f5c\u3002\u4e0d\u540c\u64cd\u4f5c\u7b26\u53ef\u80fd\u6709 1 \u4e2a\uff0c2 \u4e2a\u6216\u8005 3 \u4e2a\u64cd\u4f5c\u6570\u3002 3.2 \u8d4b\u503c\u64cd\u4f5c\u7b26 \u00b6 \u8d4b\u503c\u64cd\u4f5c\u7b26\u628a\u4e00\u4e2a\u503c\u5b58\u5230\u53d8\u91cf\u91cc\u9762\u3002 C \u63d0\u4f9b\u4e86\u591a\u79cd\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002 \u6807\u51c6\u8d4b\u503c\u64cd\u4f5c = \u7b26\u7b80\u5355\u5730\u628a\u53f3\u8fb9\u7684\u64cd\u4f5c\u7b26\u5b58\u5230\u5de6\u8fb9\u7684\u53d8\u91cf\u91cc\u9762\u3002\u548c\u6240\u6709\u7684\u8d4b\u503c\u64cd\u4f5c\u7b26\u4e00\u6837\uff0c\u5de6\u64cd\u4f5c\u6570\uff08\u901a\u5e38\u4e5f\u53eb\u5de6\u503c\uff09\u4e0d\u80fd\u662f\u5b57\u9762\u91cf\u6216\u5e38\u503c\u3002 int x = 10; float y = 45.12 + 2.0; int z = (2 * (3 + function () )); struct foo { int bar; int baz; } quux = {3, 4}; \u6ce8\u610f\uff0c\u4e0d\u50cf\u4e0b\u9762\u90a3\u4e9b\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u4f60\u53ef\u4ee5\u7528 = \u6765\u8d4b\u503c\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 \u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u5148\u5bf9\u5de6\u53f3 2 \u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u8d4b\u7ed9\u5de6\u64cd\u4f5c\u6570\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u548c\u5b83\u4eec\u7684\u7b80\u8981\u8bf4\u660e\uff1a += \u5148\u76f8\u52a0\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 -= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u51cf\u53bb\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 *= \u5148\u76f8\u4e58\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 /= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u9664\u4ee5\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 %= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u6a21\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 <<= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u5de6\u79fb\u53f3\u64cd\u4f5c\u6570\u4e2a\u4f4d\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 >>= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u53f3\u79fb\u53f3\u64cd\u4f5c\u6570\u4e2a\u4f4d\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 &= \u5148\u6309\u4f4d\u4e0e\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 ^= \u5148\u6309\u4f4d\u5f02\u6216\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 |= \u5148\u6309\u4f4d\u6216\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u7684\u4f8b\u5b50\uff1a x += y; \u65e2\u7136\u8ba1\u7b97\u5de6\u503c x \u6ca1\u6709\u526f\u4f5c\u7528\uff0c\u90a3\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5199\u6210\uff1a x = x + y; 3.3 \u81ea\u589e\u548c\u81ea\u51cf \u00b6 \u81ea\u589e\u64cd\u4f5c\u7b26 ++ \u4f1a\u5c06\u5b83\u7684\u64cd\u4f5c\u6570\u52a0 1\u3002\u8be5\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u6307\u9488\uff0c\u6216\u8005\u4e00\u4e2a\u679a\u4e3e\u53d8\u91cf\u3002\u4f60\u4e5f\u53ef\u4ee5\u628a\u81ea\u589e\u64cd\u4f5c\u7b26\u653e\u5728\u64cd\u4f5c\u6570\u524d\u9762\u6216\u8005\u540e\u9762\u3002\u4f8b\u5982\uff1a char w = '1'; int x = 5; char y = 'B'; float z = 5.2; int *p = &x; ++w; /* w is now the character \u20182\u2019 (not the value 2). */ x++; /* x is now 6. */ ++y; /* y is now \u2018C\u2019 (on ASCII systems). */ z++; /* z is now 6.2. */ ++p; /* p is now &x + sizeof(int). */ \uff08\u6ce8\u610f\uff0c\u5bf9\u4e00\u4e2a\u6307\u9488\u4f7f\u7528\u81ea\u589e\u53ea\u6709\u5728\u4f60\u786e\u4fe1\u65b0\u7684\u6307\u9488\u503c\u662f\u4e00\u4e2a\u5408\u6cd5\u5185\u5b58\u5730\u5740\u65f6\u624d\u6709\u610f\u4e49\uff09 \u524d\u7f6e\u81ea\u589e\u64cd\u4f5c\u7b26\u4f1a\u5728\u64cd\u4f5c\u6570\u88ab\u8ba1\u7b97\u524d\u52a0 1. \u800c\u540e\u7f6e\u81ea\u589e\u64cd\u4f5c\u5728\u64cd\u4f5c\u6570\u88ab\u8ba1\u7b97\u540e\u52a0 1\u3002\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6539\u53d8\u81ea\u589e\u64cd\u4f5c\u7b26\u7684\u4f4d\u7f6e\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u4ed6\u4eec\u662f\u4e0d\u540c\u7684\uff1a int x = 5; printf (\"%d \\n\", x++); /* Print x and then increment it. */ /* x is now equal to 6. */ printf (\"%d \\n\", ++x); /* Increment x and then print it. */ \u4e0a\u9762\u4f8b\u5b50\u7684\u7ed3\u679c\u662f\uff1a 5 7 \u540c\u6837\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u51cf\u64cd\u4f5c\u7b26\u4f7f\u64cd\u4f5c\u6570\u51cf 1\uff1a int x = 5; x--; /* x is now 4. */ \u81ea\u51cf\u64cd\u4f5c\u7b26\u4e5f\u6709\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u6982\u5ff5\u3002 3.4 \u7b97\u672f\u8fd0\u7b97\u64cd\u4f5c\u7b26 \u00b6 C \u63d0\u4f9b\u6807\u51c6\u7b97\u672f\u8fd0\u7b97\u64cd\u4f5c\u7b26\uff1a\u52a0\u51cf\u4e58\u9664\uff0c\u8fd8\u6709\u53d6\u6a21\u548c\u76f8\u53cd\u6570\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7528\u6cd5\u5f88\u76f4\u63a5\uff1b\u4f8b\u5982\uff1a /* Addition. */ x = 5 + 3; y = 10.23 + 37.332; quux_pointer = foo_pointer + bar_pointer; /* Subtraction. */ x = 5 - 3; y = 57.223 - 10.903; quux_pointer = foo_pointer - bar_pointer; \u6307\u9488\u53ef\u4ee5\u52a0\u51cf\uff0c\u4f46\u4e0d\u80fd\u4e58\u9664\u3002 /* Multiplication. */ x = 5 * 3; y = 47.4 * 1.001; /* Division. */ x = 5 / 3; y = 940.0 / 20.2; \u6b63\u6570\u7684\u6574\u6570\u9664\u5411 0 \u622a\u65ad\uff0c\u5982 5/3 \u7b49\u4e8e 1 \u3002\u7136\u800c\uff0c\u5982\u679c\u64cd\u4f5c\u6570\u662f\u8d1f\u7684\uff0c\u622a\u65ad\u65b9\u5411\u7531\u5177\u4f53\u5b9e\u73b0\u5b9a\u4e49\u3002\u5173\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u9664\u7684\u6ea2\u51fa\u95ee\u9898\u8be6\u89c1 \u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5 \u4f60\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u64cd\u4f5c\u7b26 % \u6765\u8ba1\u7b97 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u4f59\u6570\uff0c\u5e76\u4e14\u64cd\u4f5c\u6570\u662f\u6709\u65b9\u5411\u7684\uff1a 3 % 5 \u548c 5 % 3 \u662f\u4e0d\u540c\u7684\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u57fa\u7840\u6570\u636e\u7c7b\u578b\u8868\u8fbe\u5f0f\u3002 /* Modular division. */ x = 5 % 3; y = 74 % 47; \u53d6\u6a21\u9664\u5f97\u5230 2 \u4e2a\u64cd\u4f5c\u6570\u76f8\u9664\u540e\u7684\u4f59\u6570\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u57fa\u7840\u6574\u6570\u7c7b\u578b\u3002 /* Negation. */ int x = -5; float y = -3.14159; \u5982\u679c\u4f60\u5bf9\u4e00\u4e2a unsigned \u7c7b\u578b\u7684\u64cd\u4f5c\u6570\u4f7f\u7528\u76f8\u53cd\u6570\u64cd\u4f5c\u7b26\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u662f\u76f8\u53cd\u6570\uff0c\u800c\u662f\u8be5 unsigned \u7c7b\u578b\u7684\u6700\u5927\u503c\u51cf\u53bb\u8be5\u64cd\u4f5c\u6570\u3002 \u5f88\u591a\u7cfb\u7edf\u4f7f\u7528\u8865\u7801\u8fd0\u7b97\uff0c\u56e0\u6b64\u5728\u8fd9\u4e9b\u7cfb\u7edf\u4e0a signed \u7c7b\u578b\u7684\u6700\u5c0f\u8d1f\u6570\u7684\u76f8\u53cd\u6570\u6bd4\u6700\u5927\u6574\u6570\u8981\u5927\u3002\u4f8b\u5982\uff1a #include <limits.h> #include <stdio.h> int main (int argc, char *argv[]) { int x; x = INT_MAX; printf(\"INT_MAX = %d\\n\", x); x = INT_MIN; printf(\"INT_MIN = %d\\n\", x); x = -x; printf(\"-INT_MIN = %d\\n\", x); return 0; } \u8f93\u51fa\u7684\u7ed3\u679c\u662f\uff1a INT_MAX = 2147483647 INT_MIN = -2147483648 -INT_MIN = -2147483648 \u4f60\u4e5f\u53ef\u4ee5\u5728\u4e00\u4e2a\u6570\u5b57\u8868\u8fbe\u5f0f\u524d\u9762\u52a0\u4e0a\u6574\u6570\u64cd\u4f5c\u6570 +\uff0c\u4f46\u5e76\u6ca1\u6709\u610f\u4e49\uff1a int x = +42; \u6570\u503c\u603b\u662f\u88ab\u5047\u5b9a\u4e3a\u6574\u6570\uff0c\u9664\u975e\u4f60\u660e\u786e\u5730\u52a0\u4e86\u7b26\u53f7\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002 3.5 \u590d\u6570\u5171\u8f6d \u00b6 GNU \u6269\u5c55\u8ba9\u4f60\u53ef\u4ee5\u4f7f\u7528\u590d\u6570\u5171\u8f6d\u64cd\u4f5c\u7b26 ~ \u6765\u5bf9\u4e00\u4e2a\u590d\u6570\u64cd\u4f5c\u7b26\u53d6\u5171\u8f6d -- \u5373\u8f6c\u6362\u865a\u90e8\u7684\u7b26\u53f7\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u590d\u6570\u7c7b\u578b\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff1a __complex__ int x = 5 + 17i; printf (\"%d \\n\", (x * ~x)); \u56e0\u4e3a\u590d\u6570 (a + bi) \u4e58\u4ee5\u5b83\u7684\u5171\u8f6d\u7b49\u4e8e a^2 + b^2 \u3002\u6240\u4ee5\uff0c\u4e0a\u9762 printf \u5c06\u4f1a\u6253\u5370 314\uff0c\u5373 25 + 289 \u3002 3.6 \u6bd4\u8f83\u64cd\u4f5c\u7b26 \u00b6 \u4f60\u4f7f\u7528\u6bd4\u8f83\u64cd\u4f5c\u7b26\u6765\u786e\u5b9a 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u76f8\u5bf9\u5173\u7cfb\uff1a\u662f\u76f8\u7b49\uff0c\u8fd8\u662f\u4e00\u4e2a\u6bd4\u53e6\u5916\u4e00\u4e2a\u5927\uff0c\u8fd8\u662f\u4e00\u4e2a\u6bd4\u53e6\u5916\u4e00\u4e2a\u5c0f\uff0c\u7b49\u7b49\u3002\u5f53\u4f60\u4f7f\u7528\u6bd4\u8f83\u64cd\u4f5c\u7b26\u65f6\uff0c\u7ed3\u679c\u8981\u4e48\u662f 1 \u8981\u4e48\u662f 0\uff0c \u5206\u522b\u4ee3\u8868\u771f\u548c\u5047\u3002 \uff08\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u53d8\u91cf x \u548c y \u4ee3\u8868 2 \u4e2a\u7b97\u672f\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u6216\u8005\u6307\u9488\uff09 \u76f8\u7b49\u64cd\u4f5c\u7b26 == \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u76f8\u7b49\u3002\u7ed3\u679c 1 \u4ee3\u8868\u76f8\u7b49\uff0c0 \u4ee3\u8868\u4e0d\u7b49\u3002 if (x == y) puts (\"x is equal to y\"); else puts (\"x is not equal to y\"); \u4e0d\u7b49\u64cd\u4f5c\u7b26 != \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u4e0d\u76f8\u7b49\u3002\u7ed3\u679c 1 \u4ee3\u8868\u4e0d\u76f8\u7b49\uff0c0 \u4ee3\u8868\u76f8\u7b49\u3002 if (x != y) puts (\"x is not equal to y\"); else puts (\"x is equal to y\"); \u6bd4\u8f83\u6d6e\u70b9\u6570\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u53ef\u80fd\u4f1a\u5f97\u5230\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u3002\u8be6\u89c1 \u5b9e\u6570\u7c7b\u578b \u4f60\u53ef\u4ee5\u6bd4\u8f83 2 \u4e2a\u51fd\u6570\u6307\u9488\u662f\u5426\u76f8\u7b49\uff1b\u8be5\u6bd4\u8f83\u4f1a\u6d4b\u8bd5 2 \u4e2a\u6307\u9488\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u51fd\u6570\u3002 \u9664\u4e86\u76f8\u7b49\u548c\u4e0d\u7b49\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5c0f\u4e8e\u3001\u5927\u4e8e\u3001\u5c0f\u4e8e\u7b49\u4e8e\u6216\u8005\u5927\u4e8e\u7b49\u4e8e\u53e6\u5916\u4e00\u4e2a\u503c\u3002\u4e0b\u9762\u662f\u793a\u4f8b\uff1a if (x < y) puts (\"x is less than y\"); if (x <= y) puts (\"x is less than or equal to y\"); if (x > y) puts (\"x is greater than y\"); if (x >= y) puts (\"x is greater than or equal to y\"); 3.7 \u903b\u8f91\u64cd\u4f5c\u7b26 \u00b6 \u903b\u8f91\u64cd\u4f5c\u7b26\u6d4b\u8bd5\u4e00\u5bf9\u64cd\u4f5c\u6570\u7684\u771f\u503c\u3002\u5728 C \u4e2d\uff0c\u4efb\u4f55\u975e 0 \u8868\u8fbe\u5f0f\u90fd\u662f\u771f\uff0c\u76f8\u53cd\u90fd\u662f\u5047\u3002 \u903b\u8f91\u4e0e\u64cd\u4f5c\u7b26 && \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u90fd\u662f\u771f\u3002\u5982\u8fc7\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a\u5047\uff0c\u5219\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002 if ((x == 5) && (y == 10)) printf (\"x is 5 and y is 10\"); \u903b\u8f91\u4e0e\u64cd\u4f5c\u7b26 || \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a\u771f\u3002\u5982\u8fc7\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u5219\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002 if ((x == 5) || (y == 10)) printf (\"x is 5 or y is 10\"); \u4f60\u53ef\u4ee5\u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u524d\u9762\u52a0\u4e00\u4e2a\u903b\u8f91\u975e\u64cd\u4f5c\u7b26 ! \u6765\u53cd\u8f6c\u8be5\u8868\u8fbe\u5f0f\u7684\u771f\u503c\uff1a if (!(x == 5)) printf (\"x is not 5\"); \u56e0\u4e3a\u903b\u8f91\u8868\u8fbe\u5f0f\u5bf9\u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u603b\u4f1a\u88ab\u8ba1\u7b97\uff0c\u6240\u4ee5\u4f60\u4e0d\u80fd\u5199\u4e0b\u9762\u8fd9\u79cd\u4e0d\u76f4\u89c2\u7684\u4ee3\u7801\uff1a if (foo && x++) bar(); \u5982\u679c foo \u662f 0\uff0c\u4e0d\u4ec5 bar \u51fd\u6570\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c x \u4e5f\u4e0d\u4f1a\u81ea\u589e\u3002\u5982\u679c\u4f60\u6253\u7b97\u4e0d\u7ba1 foo \u7684\u503c\u662f\u4ec0\u4e48\u90fd\u8981\u81ea\u589e x \uff0c\u4f60\u5e94\u8be5\u628a\u5b83\u5199\u5230\u903b\u8f91\u4e0e\u8868\u8fbe\u5f0f\u5916\u9762\u3002 3.8 \u4f4d\u79fb \u00b6 \u4f60\u4f7f\u7528\u5de6\u79fb\u64cd\u4f5c\u7b26 << \u628a\u5b83\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5411\u5de6\u79fb\u4f4d\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4ee3\u8868\u8981\u79fb\u591a\u5c11\u4f4d\u3002\u79fb\u51fa\u5de6\u8fb9\u754c\u7684\u4f4d\u5c06\u88ab\u4e22\u5f03\uff0c\u53f3\u4fa7\u65b0\u52a0\u5165\u7684\u4f4d\u4e3a 0. x = 47; /* 47 is 00101111 in binary. */ x << 1; /* 00101111 << 1 is 01011110. */ \u7c7b\u4f3c\u5730\uff0c\u4f60\u4f7f\u7528\u53f3\u79fb\u64cd\u4f5c\u7b26 >> \u628a\u5b83\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5411\u53f3\u79fb\u4f4d\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4ee3\u8868\u8981\u79fb\u591a\u5c11\u4f4d\u3002\u79fb\u51fa\u53f3\u8fb9\u754c\u7684\u4f4d\u5c06\u88ab\u4e22\u5f03\uff0c\u5de6\u4fa7\u65b0\u52a0\u5165\u7684\u4f4d \u901a\u5e38 \u4e3a 0. \u4f46\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u7684\u8d1f\u6570\uff0c\u90a3\u4e48\u65b0\u52a0\u7684\u4f4d\u4f1a\u662f 0 \u6216\u8005 \u4e4b\u524d\u6700\u5de6\u8fb9\u4f4d\u7f6e\u7684\u503c\u3002 x = 47; /* 47 is 00101111 in binary. */ x >> 1; /* 00101111 >> 1 is 00010111. */ \u5bf9\u4e8e << \u548c >> \uff0c\u5982\u679c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u6bd4\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u4f4d\u5bbd\u8fd8\u8981\u5927\uff0c\u6216\u8005\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u662f\u590d\u6570\uff0c\u8be5\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u79fb\u4f4d\u64cd\u4f5c\u6570\u6765\u505a\u4e00\u4e9b\u6709\u8da3\u7684 hack \u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u7ed9\u4f60\u4e00\u4e2a\u65e5\u671f\u5305\u542b\u5929 d \uff0c\u6708 m \u548c\u5e74 y \uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5b58\u5230\u4e00\u4e2a\u6570 x \u91cc\u9762\uff1a int d = 12; int m = 6; int y = 1983; int x = (((y << 4) + m) << 5) + d; \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79fb\u4f4d\u64cd\u4f5c\u7b26\u548c\u53d6\u6a21\u6765\u628a\u539f\u6765\u7684 d \u3001 m \u3001 y \u4ece x \u91cc\u9762\u63d0\u53d6\u51fa\u6765\uff1a d = x % 32; m = (x >> 5) % 16; y = x >> 9; 3.9 \u4f4d\u903b\u8f91\u64cd\u4f5c\u7b26 \u00b6 C \u63d0\u4f9b\u4e86\u6309\u4f4d\u4e0e\uff0c\u6309\u4f4d\u6216\uff0c\u6309\u4f4d\u5f02\u6216\u548c\u6309\u4f4d\u53d6\u53cd\u64cd\u4f5c\u7b26\u3002 \u6309\u4f4d\u4e0e\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u90fd\u4e3a 1 \u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 1\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 0\u3002\u4e0b\u9762\u7528\u4e8c\u8fdb\u5236\u6570\u6765\u6f14\u793a\u5982\u4f55\u5de5\u4f5c\uff1a 11001001 & 10011011 = 10001001 \u6309\u4f4d\u6216\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u90fd\u4e3a 0 \u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 0\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 1\u3002 11001001 | 10011011 = 11011011 \u6309\u4f4d\u5f02\u6216\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u4e0d\u540c\u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 1\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 0\u3002 11001001 ^ 10011011 = 01010010 \u6309\u4f4d\u53d6\u53cd\u53cd\u8f6c\u5b83\u7684\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff1a ~11001001 = 00110110 \u5728 C \u91cc\u9762\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u53ea\u80fd\u7528\u4e8e\u6574\u6570\u7c7b\u578b\uff08\u6216\u5b57\u7b26\u7c7b\u578b)\uff0c\u5e76\u4e14\u4e3a\u4e86\u6700\u5927\u7684\u53ef\u79fb\u690d\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5bf9 unsiged \u6574\u6570\u7c7b\u578b\u4f7f\u7528\u6309\u4f4d\u53d6\u53cd\u64cd\u4f5c\u7b26\u3002\u4f8b\u5982\uff1a unsigned int foo = 42; unsigned int bar = 57; unsigned int quux; quux = foo & bar; quux = foo | bar; quux = foo ^ bar; quux = ~foo; 3.10 \u6307\u9488\u64cd\u4f5c\u7b26 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26 & \u6765\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u3002 int x = 5; int *pointer_to_x = &x; \u4f7f\u7528 & \u6765\u83b7\u53d6\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u5c3d\u7ba1\u4f60\u53ef\u4ee5\uff1a extern int foo (void); int (*fp1) (void) = foo; /* fp1 points to foo */ int (*fp2) (void) = &foo; /* fp2 also points to foo */ \u51fd\u6570\u6307\u9488\u548c\u6570\u636e\u6307\u9488\u662f\u4e0d\u517c\u5bb9\u7684\uff0c\u56e0\u6b64\u4f60\u4e0d\u80fd\u628a\u51fd\u6570\u7684\u5730\u5740\u5b58\u8fdb\u6570\u636e\u6307\u9488\uff0c\u7136\u540e\u62f7\u8d1d\u5230\u51fd\u6570\u6307\u9488\u5e76\u6210\u529f\u8c03\u7528\u5b83\u3002\u6709\u53ef\u80fd\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 GNU \u7684 C89 \u7684\u6269\u5c55\u4e2d\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u5730\u5740\u64cd\u4f5c\u7b26 && \u6765\u83b7\u53d6\u4e00\u4e2a\u6807\u7b7e\u7684\u5730\u5740\u3002\u7ed3\u679c\u662f\u4e00\u4e2a void* \u6307\u9488\uff0c\u53ef\u4ee5\u7528\u4e8e goto \u8bed\u53e5\u3002\u8be6\u89c1 goto \u8bed\u53e5 \u5047\u5b9a\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u5b58\u50a8\u5728\u4e00\u4e2a\u6307\u9488\u91cc\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u95f4\u63a5\u8fd0\u7b97\u7b26 * \u6765\u83b7\u53d6\u5b58\u5728\u8be5\u5730\u5740\u7684\u503c\uff08\u8fd9\u88ab\u79f0\u4f5c\u89e3\u5f15\u7528\u6307\u9488\uff09 int x = 5; int y; int *ptr; ptr = &x; /* ptr now holds the address of x. */ y = *ptr; /* y gets the value stored at the address stored in ptr. */ \u8981\u907f\u514d\u89e3\u5f15\u7528\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u4e3a\u5df2\u77e5\u5185\u5b58\u5730\u5740\u7684\u6307\u9488\u3002 3.11 sizeof \u64cd\u4f5c\u7b26 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 sizeof \u64cd\u4f5c\u7b26\u6765\u83b7\u53d6\u5b83\u7684\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\uff08\u6309\u5b57\u8282\uff09\u3002\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7c7b\u578b\u6307\u793a\u7b26\uff08\u5982 int \u6216 float \uff09,\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u8868\u8fbe\u5f0f\u3002\u5f53\u64cd\u4f5c\u6570\u662f\u7c7b\u578b\u540d\u5b57\u65f6\uff0c\u5b83\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u91cc\u3002\u5982\uff1a size_t a = sizeof(int); size_t b = sizeof(float); size_t c = sizeof(5); size_t d = sizeof(5.143); size_t e = sizeof a; sizeof \u7684\u7ed3\u679c\u662f size_t \u7c7b\u578b\uff0c\u5b83\u5728\u5934\u6587\u4ef6 <stddef.h> \u4e2d\u5b9a\u4e49\u3002 size_t \u662f\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u662f unsigned int \u6216\u8005 unsigned long int \uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u7cfb\u7edf\u3002 size_t \u4f5c\u4e3a\u5faa\u73af\u7684\u4e0b\u6807\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u80fd\u4fdd\u8bc1\u653e\u4e0b\u4efb\u4f55\u6570\u7ec4\u7684\u5927\u5c0f\uff1b\u4f46 int \u4e0d\u884c\u3002 sizeof \u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\uff1a #include <stddef.h> #include <stdio.h> static const int values[] = { 1, 2, 48, 681 }; #define ARRAYSIZE(x) (sizeof x/sizeof x[0]) int main (int argc, char *argv[]) { size_t i; for (i = 0; i < ARRAYSIZE(values); i++) { printf(\"%d\\n\", values[i]); } return 0; } \u6709 2 \u79cd\u60c5\u51b5\u8fd9\u79cd\u6280\u672f\u4e0d\u80fd\u5de5\u4f5c\u3002\u7b2c\u4e00\u79cd\u662f\u6570\u7ec4\u7684\u5143\u7d20\u7684\u5927\u5c0f\u4e3a 0\uff08GNU \u6269\u5c55\u652f\u6301\u5927\u5c0f\u4e3a 0 \u7684\u7ed3\u6784\uff09\u3002\u7b2c\u4e8c\u79cd\u662f\u6570\u7ec4\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff08\u8be6\u89c1 \u51fd\u6570\u53c2\u6570 )\u3002 3.12 \u7c7b\u578b\u8f6c\u6362 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u663e\u5f0f\u5730\u5c06\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53d8\u6210\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e00\u4e2a\u7c7b\u578b\u8f6c\u5305\u62ec\u4e00\u4e2a\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7c7b\u578b\u6307\u793a\u7b26\uff0c\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u4e3a\u4e86\u786e\u4fdd\u6b63\u786e\u7684\u8f6c\u6362\uff0c\u4f60\u5e94\u8be5\u7ed9\u540e\u9762\u8ddf\u7684\u8868\u8fbe\u5f0f\u4e5f\u52a0\u4e00\u4e2a\u5706\u62ec\u53f7\u3002\u4f8b\u5982\uff1a float x; int y = 7; int z = 3; x = (float) (y / z); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a y \u548c z \u90fd\u662f\u6574\u578b\uff0c\u6240\u4ee5 y / z \u662f\u6574\u6570\u9664\uff1b\u5373\u4f7f x \u662f\u6d6e\u70b9\u578b\uff0c\u5b83\u4e5f\u63a5\u53d7\u503c 2\u3002\u663e\u5f0f\u8f6c\u6362\u9664\u6cd5\u7684\u7ed3\u679c\u4e3a float \u7c7b\u578b\u5e76\u4e0d\u597d\uff0c\u56e0\u4e3a y / z \u7684\u503c\u5df2\u7ecf\u662f 2 \u4e86\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u628a\u9664\u6cd5\u7684\u4e00\u4e2a\u64cd\u4f5c\u6570\u5728\u9664\u6cd5\u8fdb\u884c\u4e4b\u524d\u8f6c\u6210\u6d6e\u70b9\u578b\uff1a float x; int y = 7; int z = 3; x = (y / (float)z); \u8fd9\u91cc\uff0c\u4e00\u4e2a\u63a5\u8fd1 2.333\u00b7 \u7684\u6d6e\u70b9\u6570\u88ab\u8d4b\u7ed9\u4e86 x \u3002 \u7c7b\u578b\u8f6c\u6362\u53ea\u5bf9\u8868\u6807\u91cf\u6709\u7528\uff08\u50cf\u6574\u578b\uff0c\u6d6e\u70b9\u578b\u6216\u6307\u9488\u7c7b\u578b\uff09\u3002\u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u79cd\u662f\u4e0d\u5141\u8bb8\u7684\uff1a struct fooTag { /* members ... */ }; struct fooTag foo; unsigned char byteArray[8]; foo = (struct fooType) byteArray; /* Fail! */ 3.13 \u6570\u7ec4\u4e0b\u6807 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u540d\u5b57\u548c\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u6570\u7ec4\u4e0b\u6807\uff08\u6216\u8005\u53eb\u7d22\u5f15\uff0c\u6216\u8005\u53eb\u5143\u7d20\u6570\uff09\u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u53eb my_array \u7684\u6574\u578b\u6570\u7ec4\uff1a my_array[0] = 5; \u6570\u7ec4\u4e0b\u6807\u8868\u8fbe\u5f0f A[i] \u88ab\u5b9a\u4e49\u4e3a\u548c\u8868\u8fbe\u5f0f (*((A)+(i))) \u662f\u4e00\u6837\u7684\u3002\u8fd9\u610f\u5473\u7740\u5f88\u591a\u6570\u7ec4\u540d\u7684\u4f7f\u7528\u548c\u6307\u9488\u8868\u8fbe\u5f0f\u662f\u7b49\u4ef7\u7684\u3002\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5bf9\u4e00\u4e2a register \u9650\u5b9a\u7684\u6570\u7ec4\u4f7f\u7528\u4e0b\u6807\u3002 3.14 \u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u8868\u8fbe\u5f0f \u00b6 \u4efb\u4f55\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\u8c03\u7528\u90fd\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 int function(void); \u2026 a = 10 + function(); 3.15 \u9017\u53f7\u64cd\u4f5c\u7b26 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u64cd\u4f5c\u7b26 , \u6765\u5206\u5272 2 \u4e2a\uff08\u8868\u9762\u4e0a\u76f8\u5173\u7684\uff09\u8868\u8fbe\u5f0f\u3002\u6bd4\u5982\uff0c\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u88ab\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u7684\u503c\uff1a x++, y = x * x; \u66f4\u5e38\u89c1\u5730\uff0c\u9017\u53f7\u64cd\u4f5c\u7b26\u88ab\u7528\u4e8e for \u8bed\u53e5\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a /* Using the comma operator in a for statement. */ for (x = 1, y = 10; x <=10 && y >=1; x++, y--) { \u2026 } \u8fd9\u8ba9\u4f60\u5f88\u65b9\u4fbf\u5730\u8bbe\u7f6e\uff0c\u76d1\u63a7\u4ee5\u53ca\u4fee\u6539 for \u8bed\u53e5\u4e2d\u7684\u591a\u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f\u3002 \u9017\u53f7\u4e5f\u88ab\u7528\u4e8e\u5206\u5272\u51fd\u6570\u53c2\u6570\uff1b\u7136\u800c\uff0c\u8fd9\u91cc\u7684\u9017\u53f7\u5728\u884c\u4e3a\u4e0a\u5c31\u4e0d\u662f\u9017\u53f7\u64cd\u4f5c\u7b26\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u9017\u53f7\u64cd\u4f5c\u7b26\u88ab\u7528\u4e8e\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c06\u89e3\u91ca\u6210\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff08\u5373\u591a\u4e86\u4e00\u4e2a\u53c2\u6570\uff09\u6765\u8c03\u7528\u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u5728\u51fd\u6570\u53c2\u6570\u91cc\u9762\u4f7f\u7528\u9017\u53f7\u64cd\u4f5c\u7b26\uff0c\u90a3\u4f60\u5fc5\u987b\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u53c2\u6570\u91cc\u9017\u53f7\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff1a\u7528\u6765\u5206\u5272\u53c2\u6570\u3002\u56e0\u6b64\uff0c foo (x, y=47, x, z); \u88ab\u89e3\u91ca\u6210\u4f7f\u7528 4 \u4e2a\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\uff1b\u4f46\u662f\uff0c foo (x, (y=47, x), z); \u5c31\u662f\u4e00\u4e2a\u53ea\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f (y = 47, x)\uff09\u3002 3.16 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26 . \u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6216\u8005\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u4f60\u8981\u628a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u6210\u5458\u540d\u5b57\u653e\u5728\u53f3\u8fb9\u3002 struct point { int x, y; }; struct point first_point; first_point.x = 0; first_point.y = 5; \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6216\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u8981\u4f7f\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26 -> \u3002 x->y \u7b49\u4ef7\u4e8e (*x).y \u3002 struct fish { int length, weight; }; struct fish salmon; struct fish *fish_pointer = &salmon; fish_pointer->length = 3; fish_pointer->weight = 9; \u8be6\u89c1 \u6307\u9488 3.17 \u6761\u4ef6\u8868\u8fbe\u5f0f \u00b6 \u4f7f\u7528\u6761\u4ef6\u8fd0\u7b97\u7b26\u53ef\u4ee5\u8ba9\u4f60\u901a\u8fc7\u6761\u4ef6\u8868\u8fbe\u5f0f\u53bb\u51b3\u5b9a\u662f\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u8fd8\u662f\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\uff0c\u8fd9\u53d6\u51b3\u4e8e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u771f\u503c\u3002\u4f8b\u5982\uff1a a ? b : c \u5982\u679c\u8868\u8fbe\u5f0f a \u662f\u771f\uff0c\u5219\u8868\u8fbe\u5f0f b \u88ab\u8ba1\u7b97\u5e76\u4e14\u7ed3\u679c\u662f b \u7684\u503c\u3002\u5426\u5219\uff0c\u8868\u8fbe\u5f0f c \u88ab\u8ba1\u7b97\uff0c\u7ed3\u679c\u662f c \u3002 \u8868\u8fbe\u5f0f b \u548c c \u4e00\u5b9a\u8981\u517c\u5bb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u5fc5\u987b\u90fd\u662f\uff1a \u7b97\u672f\u7c7b\u578b \u517c\u5bb9\u7684 struct \u6216 union \u7c7b\u578b \u6307\u5411\u517c\u5bb9\u7c7b\u578b\u7684\u6307\u9488\uff08\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u662f NULL \u6307\u9488\uff09 \u6b64\u5916\uff0c\u53ef\u4ee5\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u6307\u9488\uff0c\u53e6\u5916\u4e00\u4e2a\u662f void* \u6307\u9488\u3002 \u4f8b\u5982\uff1a a = (x == 5) ? y : z; \u8fd9\u91cc\uff0c\u5982\u679c x \u7b49\u4e8e 5\uff0c\u90a3\u4e48 a \u5c06\u5f97\u5230 y \u7684\u503c\u3002\u5426\u5219\uff0c a \u5c06\u5f97\u5230 z \u7684\u503c\u3002\u8fd9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a if...else \u8868\u8fbe\u5f0f\u7684\u7b80\u5199\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u540c\u6837\u7684\u529f\u80fd\uff1a if (x == 5) a = y; else a = z; \u5982\u679c\u6761\u4ef6\u64cd\u4f5c\u7b26\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u771f\uff0c\u90a3\u4e48\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u5047\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002\u800c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u603b\u662f\u4f1a\u88ab\u8ba1\u7b97\u3002 3.18 \u8868\u8fbe\u5f0f\u4e2d\u7684\u8bed\u53e5\u548c\u58f0\u660e \u00b6 \u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7ec4\u5408\u8bed\u53e5\u6765\u6784\u5efa\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u8fd9\u91cc\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u91cc\u5305\u542b\u5faa\u73af\u3001switch \u548c\u5c40\u90e8\u53d8\u91cf\u3002 \u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\u7ec4\u5408\u8bed\u53e5\uff08\u6216\u8005\u53eb\u4ee3\u7801\u5757\uff09\u662f\u4e00\u7cfb\u5217\u7528\u82b1\u62ec\u53f7\u5305\u88f9\u7684\u8bed\u53e5\u3002\u800c\u5728\u672c\u8282\u7684\u6784\u67b6\u4e0b\uff0c\u5706\u62ec\u53f7\u8981\u628a\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u3002\u4f8b\u5982\uff1a ({ int y = function (); int z; if (y > 0) z = y; else z = - y; z; }) \u8fd9\u662f\u5408\u6cd5\u7684\uff08\u5c3d\u7ba1\u6bd4\u8d77\u5fc5\u8981\u7684\u5199\u6cd5\u66f4\u590d\u6742\u7684\uff09\u6c42 function() \u7edd\u5bf9\u503c\u7684\u8868\u8fbe\u5f0f\u3002 \u7ec4\u5408\u8868\u8fbe\u5f0f\u6700\u540e\u5e94\u8be5\u662f\u4e00\u4e2a\u8ddf\u7740\u5206\u53f7\u7684\u8868\u8fbe\u5f0f\uff1b\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u5c06\u662f\u6574\u4e2a\u7ed3\u6784\u7684\u503c\u3002\uff08\u5982\u679c\u4f60\u5728\u82b1\u62ec\u53f7\u6700\u540e\u4f7f\u7528\u4e86\u5176\u4ed6\u7c7b\u578b\u7684\u8bed\u53e5\uff0c\u8be5\u7ed3\u6784\u5219\u662f void \u7c7b\u578b\uff0c\u56e0\u6b64\u7b49\u6548\u4e8e\u65e0\u503c\uff09 \u8fd9\u4e2a\u7279\u6027\u5728\u5b9a\u4e49\u201c\u5b89\u5168\u201d\u5b8f\u5b9a\u4e49\u65f6\u5c24\u5176\u6709\u7528\uff08\u4ee5\u81f3\u4e8e\u5b83\u4eec\u4ec5\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e00\u6b21\uff09\u3002\u4f8b\u5982\uff0c\u201c\u6c42\u6700\u5927\u503c\u201d\u51fd\u6570\u901a\u5e38\u5728\u6807\u51c6 C \u4e2d\u4f7f\u7528\u5b8f\u4f5c\u5982\u4e0b\u5b9a\u4e49\uff1a #define max(a,b) ((a) > (b) ? (a) : (b)) \u4f46\u662f\u8be5\u5b9a\u4e49\u8ba1\u7b97 a \u6216 b \u4e24\u6b21\uff0c\u5982\u679c\u64cd\u4f5c\u6570\u6709\u526f\u4f5c\u7528\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u574f\u7ed3\u679c\u3002\u5728 GNU C \u4e2d\uff0c\u5982\u679c\u4f60\u77e5\u9053\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a int \uff09\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b89\u5168\u5730\u5b9a\u4e49\u5b8f\uff1a #define maxint(a,b) \\ ({int _a = (a), _b = (b); _a > _b ? _a : _b; }) \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u4f60\u4ecd\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u4f46\u4f60\u5fc5\u987b\u4f7f\u7528 typeof \u8868\u8fbe\u5f0f\u6216\u8005\u7c7b\u578b\u540d\u3002 \u5d4c\u5165\u8bed\u53e5\u4e0d\u9700\u8981\u7528\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5982\u679a\u4e3e\u5e38\u91cf\u7684\u503c\uff0c\u4f4d\u57df\u7684\u5bbd\u5ea6\u6216\u8005\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\u7684\u521d\u59cb\u503c\u3002 3.19 \u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7 \u00b6 \u5f53\u8868\u8fbe\u5f0f\u5305\u542b\u591a\u4e2a\u64cd\u4f5c\u7b26\uff0c\u5982 a + b * f() \uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4f1a\u6839\u636e \u4f18\u5148\u7ea7 \u89c4\u5219\u8fdb\u884c\u5206\u7ec4\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u542b\u4e49\u5c31\u662f\u5148\u6ca1\u6709\u53c2\u6570\u5730\u8c03\u7528\u51fd\u6570 f \uff0c\u7528\u7ed3\u679c\u4e58\u4ee5 b \uff0c\u7136\u540e\u628a\u7ed3\u679c\u52a0\u4e0a a \u3002\u8fd9\u662f C \u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u89c4\u5219\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u3002 \u4e0b\u9762\u662f\u8868\u8fbe\u5f0f\u7c7b\u578b\u5217\u8868\uff0c\u8981\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u6709\u65f6 2 \u4e2a\u6216\u591a\u4e2a\u8fd0\u7b97\u7b26\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\uff1b\u6240\u6709\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u7ed3\u5408\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\u3002 \u51fd\u6570\u8c03\u7528\uff0c\u6570\u7ec4\u4e0b\u6807\uff0c\u548c\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u8868\u8fbe\u5f0f \u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u5305\u62ec\u903b\u8f91\u975e\uff0c\u6309\u4f4d\u53d6\u53cd\uff0c\u81ea\u589e\uff0c\u81ea\u51cf\uff0c\u4e00\u5143\u6b63\uff0c\u4e00\u5143\u8d1f\uff0c\u95f4\u63a5\u8fd0\u7b97\u7b26\uff0c\u5730\u5740\u8fd0\u7b97\u7b26\uff0c\u7c7b\u578b\u8f6c\u6362\u548c sizeof \u8868\u8fbe\u5f0f\u3002\u5f53\u591a\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\u8fde\u7740\u5199\uff0c\u540e\u9762\u7684\u662f\u5d4c\u5957\u5728\u91cc\u9762\u7684\uff1a!-x \u76f8\u5f53\u4e8e !(-x) \u4e58\u3001\u9664\u548c\u53d6\u6a21\u8868\u8fbe\u5f0f \u52a0\u548c\u51cf\u8868\u8fbe\u5f0f \u79fb\u4f4d\u8868\u8fbe\u5f0f \u5927\u4e8e\uff0c\u5c0f\u4e8e\uff0c\u5927\u4e8e\u7b49\u4e8e\u548c\u5c0f\u4e8e\u7b49\u4e8e\u8868\u8fbe\u5f0f \u7b49\u4e8e\u548c\u4e0d\u7b49\u4e8e\u8868\u8fbe\u5f0f \u6309\u4f4d\u4e0e\u8868\u8fbe\u5f0f \u6309\u4f4d\u5f02\u6216\u8868\u8fbe\u5f0f \u6309\u4f4d\u6216\u8868\u8fbe\u5f0f \u903b\u8f91\u4e0e\u8868\u8fbe\u5f0f \u903b\u8f91\u6216\u8868\u8fbe\u5f0f \u6761\u4ef6\u8868\u8fbe\u5f0f\uff08\u4f7f\u7528 ?:\uff09\u3002\u5f53\u4f7f\u7528\u5b50\u8868\u8fbe\u5f0f\u65f6\uff0c\u5b50\u8868\u8fbe\u5f0f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97 \u6240\u6709\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u5305\u62ec\u7ec4\u5408\u8d4b\u503c\u3002\u5f53\u591a\u4e2a\u8d4b\u503c\u8bed\u53e5\u4f5c\u4e3a\u4e00\u4e2a\u5927\u7684\u8868\u8fbe\u5f0f\u7684\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\uff0c\u4ed6\u4eec\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\u3002 \u9017\u53f7\u8fd0\u7b97\u7b26\u8868\u8fbe\u5f0f \u4e0a\u9762\u8fd9\u4e2a\u5217\u8868\u6709\u70b9\u5e72\uff0c\u663e\u5f97\u5f88\u76f4\u63a5\uff0c\u4f46\u5b83\u9690\u85cf\u4e86\u4e00\u4e9b\u9677\u9631\u3002\u4f8b\u5982\uff1a foo = *p++; \u8fd9\u91cc p \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u526f\u4f5c\u7528\u88ab\u81ea\u589e\uff0c\u4f46\u662f foo \u5f97\u5230\u7684\u662f *(p++) \u7684\u503c\uff0c\u800c\u4e0d\u662f (*p)++ \uff0c\u56e0\u4e3a\u4e00\u5143\u64cd\u4f5c\u7b26\u81ea\u53f3\u5411\u5de6\u7ed3\u5408\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5173\u4e8e C \u4f18\u5148\u7ea7\u8868\u7684\u6f5c\u5728\u7684\u9677\u9631\u3002\u56e0\u6b64\uff0c\u5f53\u8bfb\u8005\u6709\u4efb\u4f55\u8bef\u89e3\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u5e94\u8be5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u6d88\u9664\u8bef\u89e3\u3002 3.20 \u6c42\u503c\u987a\u5e8f \u00b6 \u5728 C \u91cc\u4f60\u4e0d\u77e5\u5047\u5b9a\u591a\u4e2a\u5b50\u8868\u8fbe\u5f0f\u4f1a\u6309\u7167\u770b\u8d77\u6765\u7684\u81ea\u7136\u5e8f\u6765\u6c42\u503c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u8868\u8fbe\u5f0f ++a * f() \uff0c\u81ea\u589e a \u662f\u5728\u8c03\u7528\u51fd\u6570 f \u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\uff1f\u7f16\u8bd1\u5668\u4e5f\u6709\u53ef\u80fd\u7528\u5176\u4ed6\u987a\u5e8f\u6c42\u503c\uff0c\u6240\u4ee5\u4f60\u4e0d\u80fd\u505a\u4efb\u4f55\u5047\u8bbe\u3002 \u672c\u624b\u518c\u62bd\u8c61\u5730\u89e3\u91ca\u4e86 C \u8bed\u8a00\u7684\u8bed\u4e49\u3002\u7136\u800c\uff0c\u5177\u4f53\u7f16\u8bd1\u5668\u5728\u5177\u4f53\u8ba1\u7b97\u673a\u4e0a\u5c06\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u6307\u5b9a\u52a8\u4f5c\uff0c\u5e76\u4e14\u53ef\u80fd\u4e3a\u4e86\u6548\u7387\u6539\u53d8\u6267\u884c\u987a\u5e8f\u3002\u4f60\u5199\u7684\u7a0b\u5e8f\u548c\u8ba1\u7b97\u673a\u5b9e\u9645\u505a\u7684\u4e8b\u60c5\u4e4b\u95f4\u7684\u5bf9\u5e94\u7531\u526f\u4f5c\u7528\u548c\u5e8f\u5217\u70b9\u800c\u5b9a\u3002 3.20.1 \u526f\u4f5c\u7528 \u00b6 \u526f\u4f5c\u7528\u662f\u6307\uff1a \u8bbf\u95ee\u4e00\u4e2a volatile \u5bf9\u8c61 \u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61 \u4fee\u6539\u4e00\u4e2a\u6587\u4ef6 \u8c03\u7528\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u9762\u4efb\u4f55\u4e00\u4e2a\u526f\u4f5c\u7528\u7684\u51fd\u6570 \u8fd9\u4e9b\u5728\u672c\u8d28\u4e0a\u662f\u5916\u90e8\u53ef\u89c1\u7684\u8fd0\u884c\u7a0b\u5e8f\u7684\u526f\u4f5c\u7528\u3002\u88ab\u79f0\u4e3a\u526f\u4f5c\u7528\u662f\u56e0\u4e3a\u5b83\u4eec\u662f\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u6548\u679c\uff0c\u800c\u4e0d\u662f\u8be5\u8868\u8fbe\u5f0f\u5b9e\u9645\u7684\u7ed3\u679c\u503c\u3002 \u7f16\u8bd1\u5668\u5141\u8bb8\u6267\u884c\u7a0b\u5e8f\u7684\u64cd\u4f5c\u987a\u5e8f\u548c\u6e90\u6587\u4ef6\u4e2d\u6697\u542b\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u53ea\u8981\u5728\u6700\u540e\u6240\u6709\u9700\u8981\u7684\u526f\u4f5c\u7528\u90fd\u53d1\u751f\u4e86\u3002\u7f16\u8bd1\u5668\u4e5f\u5141\u8bb8\u5b8c\u5168\u7701\u7565\u4e00\u4e9b\u8ba1\u7b97\uff1b\u4f8b\u5982\uff0c\u5b83\u5141\u8bb8\u8df3\u8fc7\u8ba1\u7b97\u90e8\u5206\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u53ef\u4ee5\u786e\u5b9a\u8be5\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4e0d\u4f1a\u88ab\u7528\u5230\u5e76\u4e14\u8ba1\u7b97\u8be5\u8868\u8fbe\u5f0f\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9700\u8981\u7684\u526f\u4f5c\u7528\u3002 3.20.2 \u5e8f\u5217\u70b9 \u00b6 \u7f16\u8bd1\u5668\u53e6\u5916\u7684\u8981\u6c42\u662f\u526f\u4f5c\u7528\u5e94\u8be5\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u53d1\u751f\u3002\u4e3a\u4e86\u63d0\u4f9b\u8fd9\u4e2a\u800c\u4e0d\u4f1a\u8fc7\u5ea6\u7ea6\u675f\u7f16\u8bd1\u5668\uff0cC89 \u548c C99 \u6807\u51c6\u6307\u5b9a\u4e86\u4e00\u4e9b\u5e8f\u5217\u70b9\u3002\u4e00\u4e2a\u5e8f\u5217\u70b9\u5c31\u662f\u4e0b\u9762\u5176\u4e2d\u4e4b\u4e00\uff1a \u4e00\u6b21\u51fd\u6570\u8c03\u7528\uff08\u5728\u53c2\u6570\u88ab\u8ba1\u7b97\u5b8c\u6210\u4e4b\u540e\uff09 \u4e0e\u8fd0\u7b97\u7b26 && \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u6216\u8fd0\u7b97\u7b26 || \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u9017\u53f7\u8fd0\u7b97\u7b26 , \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u4e09\u76ee\u8fd0\u7b97\u7b26 a ? b : c \u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u5b8c\u6574\u7684\u58f0\u660e\u7ed3\u675f[^2] \u4e00\u4e2a\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u7ed3\u675f \u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u7ed3\u675f\uff08\u5982\uff0c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u540e\u8ddf ; \uff09 if \u6216 switch \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f while \u6216 do \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f for \u8bed\u53e5\u7684 3 \u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f\u4efb\u4f55\u4e00\u4e2a\u7ed3\u675f return \u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f\u7ed3\u675f \u5728\u5e93\u51fd\u6570\u9a6c\u4e0a\u8fd4\u56de\u4e4b\u524d \u5728\u548c\u683c\u5f0f\u5316 I/O \u76f8\u5173\u7684\uff08\u4f8b\u5982\u5e38\u7528\u7684 strftime \u6216 printf \u548c scanf \u7cfb\u5217\u51fd\u6570\uff09\u52a8\u4f5c\u4e4b\u540e \u9a6c\u4e0a\u8c03\u7528\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\u4e4b\u524d\u548c\u4e4b\u540e\uff08\u5982 qsort \uff09 \u5728\u4e00\u4e2a\u5e8f\u5217\u70b9\uff0c\u4e4b\u524d\u8868\u8fbe\u5f0f\u8ba1\u7b97\u7684\u526f\u4f5c\u7528\u5fc5\u987b\u90fd\u5b8c\u6210\uff0c\u5e76\u4e14\u540e\u9762\u8ba1\u7b97\u7684\u526f\u4f5c\u7528\u8fd8\u6ca1\u6709\u53d1\u751f\u3002 \u8fd9\u770b\u8d77\u6765\u6709\u70b9\u96be\u7406\u89e3\uff0c\u4f46\u662f\u53ef\u4ee5\u6362\u4e2a\u65b9\u5f0f\u53bb\u601d\u8003\u5b83\u3002\u60f3\u8c61\u4e00\u4e0b\u4f60\u5199\u4e86\u4e00\u4e2a\u5e93\uff08\u5176\u4e2d\u4e00\u4e9b\u51fd\u6570\u5f0f\u5916\u90e8\u7684\uff0c\u4e00\u4e9b\u4e0d\u662f\uff09\uff0c\u7136\u540e\u7f16\u8bd1\u5b83\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u4eba\u5728\u4ed6\u4eec\u7684\u4ee3\u7801\u4e2d\u8c03\u7528\u4f60\u7684\u51fd\u6570\u3002\u4e0a\u9762\u7684\u5b9a\u4e49\u5219\u786e\u4fdd\u4e86\uff0c\u5728\u4ed6\u4eec\u8c03\u7528\u4f60\u7684\u51fd\u6570\u65f6\uff0c\u4ed6\u4eec\u4f20\u8fdb\u6765\u7684\u6570\u636e\u62e5\u6709\u548c\u62bd\u8c61\u673a\u6307\u5b9a\u7684\u884c\u4e3a\u4e00\u81f4\u7684\u503c\uff0c\u5e76\u4e14\u4efb\u4f55\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u4e5f\u90fd\u6709\u4e00\u4e2a\u548c\u62bd\u8c61\u673a\u4fdd\u6301\u4e00\u81f4\u7684\u72b6\u6001\u3002\u5305\u62ec\u4f7f\u7528\u6307\u9488\u6765\u8bbf\u95ee\u6570\u636e\uff08\u5982\uff0c\u4e0d\u53ea\u662f\u51fd\u6570\u53c2\u6570\u548c\u62e5\u6709\u5916\u90e8\u8fde\u63a5\u7684\u6807\u8bc6\u7b26\uff09\u3002 \u4e0a\u9762\u662f\u8f7b\u5fae\u7684\u7b80\u5316\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u5728\u8fde\u63a5\u65f6\u8fdb\u884c\u771f\u4e2a\u7a0b\u5e8f\u7684\u4f18\u5316\u3002\u7136\u800c\u91cd\u8981\u7684\u662f\uff0c\u5c3d\u7ba1\u53ef\u80fd\u6267\u884c\u4f18\u5316\uff0c\u4f46\u7a0b\u5e8f\u4e2d\u53ef\u89c1\u7684\u526f\u4f5c\u7528\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u662f\u7531\u62bd\u8c61\u673a\u4ea7\u751f\u7684\u4e00\u6837\u3002 3.20.3 \u5e8f\u5217\u70b9\u7ea6\u675f\u8868\u8fbe\u5f0f \u00b6 \u4ee3\u7801\u6bb5 i = i + 1; \u7ecf\u5e38\u51fa\u73b0\u5728\u7a0b\u5e8f\u91cc\u3002\u7136\u800c\uff0c\u4e0b\u9762\u8fd9\u4e2a\u76f8\u4f3c\u7684\u4ee3\u7801\u6bb5 i = ++i + 1; \u5c31\u6709\u70b9\u96be\u7406\u89e3\u4e86\uff1b\u6700\u540e i \u7684\u503c\u662f\u591a\u5c11\uff1fC \u6807\u51c6\uff08\u5305\u62ec C89 \u548c C99\uff09\u90fd\u7981\u6b62\u8fd9\u79cd\u5199\u6cd5\u3002 \u5728 2 \u4e2a\u5e8f\u5217\u70b9\u4e4b\u95f4\uff0c \u4e00\u4e2a\u5bf9\u8c61\u53ef\u80fd\u6700\u591a\u901a\u8fc7\u8868\u8fbe\u5f0f\u6c42\u503c\u6539\u53d8\u5b83\u81ea\u5df1\u7684\u503c\u4e00\u6b21 \u5bf9\u8c61\u4e4b\u524d\u7684\u503c\u5e94\u8be5\u4ec5\u88ab\u8bfb\u51fa\u6765\u7528\u4e8e\u8ba1\u7b97\u8981\u88ab\u5b58\u50a8\u7684\u503c \u7b2c\u4e00\u4e2a\u6761\u4ef6\u7981\u6b62\u50cf foo(x=2, ++x) \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u3002\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7981\u6b62\u50cf a[i++] = i \u7684\u8868\u8fbe\u5f0f\u3002 int x=0; foo(++x, ++x) \u5728\u5408\u89c4\u7684\u7a0b\u5e8f\u4e2d\u4e0d\u88ab\u5141\u8bb8\uff1b\u5728\u53c2\u6570\u8ba1\u7b97\u5b8c\u6210\u524d\u4fee\u6539\u4e86 x \u4e24\u6b21\u3002 int x=0; bar((++x,++x)) \u5141\u8bb8\uff1b\u51fd\u6570 bar \u53ea\u8981\u4e00\u4e2a\u53c2\u6570\uff08\u4f20\u8fc7\u53bb\u7684\u662f\u503c 2\uff09\uff0c\u5e76\u4e14\u5728\u9017\u53f7\u8fd0\u7b97\u7b26\u90a3\u91cc\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9 *p++ || *p++ \u5141\u8bb8\uff1b || \u662f\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 int x = 1, y = x++; \u5141\u8bb8\uff1b\u5728\u5b8c\u6574\u58f0\u660e x \u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 x=2; x++; \u5141\u8bb8\uff1b\u5728\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u7ed3\u675f\u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 if (x++ > MAX) x = 0; \u5141\u8bb8\uff1b\u5728 if [^3] \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f\u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 (x=y) ? ++x : x--; \u5141\u8bb8\uff1b\u5728 ? \u4e4b\u524d\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\uff0c\u5e76\u4e14\u540e\u9762\u7684 2 \u4e2a\u8868\u8fbe\u5f0f\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u8ba1\u7b97\u3002 int *p=malloc(sizeof(*p)), *q=p; *p=foo(); bar((*p)++,(*q)++); \u4e0d\u5141\u8bb8\uff1b p \u6307\u5411\u7684\u5bf9\u8c61\u5728\u51fd\u6570 bar \u7684\u53c2\u6570\u8ba1\u7b97\u5b8c\u6210\u524d\u88ab\u4fee\u6539\u4e86 2 \u6b21\u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u6b21\u662f\u901a\u8fc7 p \u4fee\u6539\uff0c\u53e6\u4e00\u6b21\u901a\u8fc7 q \u4fee\u6539\uff0c\u5b83\u4eec\u662f\u4e0d\u76f8\u5e72\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6307\u5411\u4e86\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u4ecb\u7ecd\u6c42\u503c\u987a\u5e8f\u7684\u4f8b\u5b50 ++a * f() \u3002\u5047\u8bbe\u5b9e\u9645\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a static int a = 1; static int f (void) { a = 100; return 3; } int foo (void) { return ++a * f(); } \u8fd9\u4e2a\u4ee3\u7801\u5728\u6807\u51c6\u5408\u89c4\u7684\u7a0b\u5e8f\u4e2d\u5141\u8bb8\u5417\uff1f\u5c3d\u7ba1\u5728 foo \u4e2d\u7684\u8868\u8fbe\u5f0f\u4fee\u6539 a 2 \u6b21\uff0c\u4f46\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u8ba9\u6211\u4eec\u770b 2 \u4e2a\u53ef\u80fd\u7684\u60c5\u51b5\u3002 \u53f3\u8fb9\u7684\u64cd\u4f5c\u6570 f() \u5148\u8ba1\u7b97 \u65e2\u7136 f \u8fd4\u56de\u4e00\u4e2a\u503c\u800c\u4e0d\u662f void \uff0c\u90a3\u5b83\u80af\u5b9a\u6709\u4e00\u4e2a return \u8868\u8fbe\u5f0f\u3002\u90a3\u5728 f \u4e2d\u4fee\u6539 a \u548c\u6c42\u503c\u5de6\u64cd\u4f5c\u6570\u4e4b\u95f4\u5c31\u6709\u4e86\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 2. \u5de6\u64cd\u4f5c\u6570 ++a \u5148\u6c42\u503c \u9996\u5148\uff0c a \u88ab\u81ea\u589e\u3002\u7136\u540e f \u7684\u53c2\u6570\uff08\u8fd9\u91cc\u6ca1\u6709\uff09\u88ab\u6c42\u503c\u3002\u90a3\u4e48\u8fd9\u91cc\u5728 f \u5b9e\u9645\u8fd0\u884c\u4e4b\u524d\u6709\u4e86\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u6807\u51c6\u5408\u89c4\u7684\u3002\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u9762\u7684\u53c2\u6570\u5b9e\u9645\u4e0a\u4e0d\u4f9d\u8d56\u4e8e\u51fd\u6570 f \u5185\u90e8\u3002\u5b83\u503c\u4f9d\u8d56\u4e8e\u5728\u5e8f\u5217\u70b9\u7ed3\u675f\u65f6\u5305\u542b\u7684\u5185\u5bb9--\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a return \u8bed\u53e5\uff0c\u6b64\u5916\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u6216\u5b8c\u6574\u7684\u58f0\u660e\u4e5f\u53ef\u4ee5\u3002 \u7136\u800c\uff0c\u6267\u884c\u8be5\u4ee3\u7801\u7684\u7ed3\u679c\u53d6\u51b3\u4e8e * \u7684\u64cd\u4f5c\u6570\u7684\u6c42\u503c\u987a\u5e8f\u3002\u5982\u679c\u5de6\u64cd\u4f5c\u6570\u5148\u6c42\u503c\uff0c foo \u8fd4\u56de 6.\u5426\u5219\uff0c foo \u8fd4\u56de 303\u3002C \u6807\u51c6\u5e76\u6ca1\u6709\u6307\u5b9a\u64cd\u4f5c\u6570\u8be5\u4ee5\u4f55\u79cd\u987a\u5e8f\u6c42\u503c\uff0c\u5e76\u4e14\u65e2\u4e0d\u8981\u6c42\u7f16\u8bd1\u5668\u6307\u660e\u987a\u5e8f\u4e5f\u4e0d\u8981\u6c42\u7f16\u8bd1\u5668\u53ea\u7528\u4e00\u79cd\u987a\u5e8f\u3002\u4ee3\u7801\u7684\u6548\u679c\u4e3a\u6307\u5b9a\uff0c\u610f\u5473\u7740\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u60c5\u51b5\u53d1\u751f\uff0c\u4f46 C \u6807\u51c6\u5e76\u6ca1\u6709\u8bf4\u54ea\u4e00\u79cd\u3002 3.20.4 \u5e8f\u5217\u70b9\u548c\u4fe1\u53f7\u4f20\u9012 \u00b6 \u4fe1\u53f7\u4e3b\u8981\u8bb0\u5f55\u5728 GNU C Library \u624b\u518c\u91cc\uff0c\u5c3d\u7ba1 C \u6807\u51c6\u628a\u7f16\u8bd1\u5668\u548c C \u5e93\u4e00\u8d77\u770b\u505a\u662f\u5b9e\u73b0\u3002 \u4fe1\u53f7\u63a5\u6536\u4f1a\u53d1\u751f\u5728 2 \u4e2a\u5e8f\u5217\u70b9\u4e4b\u95f4\u3002\u524d\u9762\u5e8f\u5217\u70b9\u4e4b\u524d\u7684 volatile \u5bf9\u8c61\u7684\u526f\u4f5c\u7528\u5c06\u5df2\u7ecf\u5b8c\u6210\uff0c\u4f46\u5176\u4ed6\u66f4\u65b0\u53ef\u80fd\u8fd8\u6ca1\u6709\u53d1\u751f\u3002\u8fd9\u751a\u81f3\u4f1a\u51fa\u73b0\u5728\u76f4\u63a5\u8d4b\u503c\u8bed\u53e5\uff0c\u5982\u679c x = 0; \uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8bed\u53e5\u751f\u6210\u4ee3\u7801\u53ef\u80fd\u5305\u542b\u4e0d\u6b62\u4e00\u6761\u6307\u4ee4\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5b83\u53ef\u80fd\u88ab\u4fe1\u53f7\u4f20\u9012\u4e2d\u65ad\u3002 C \u6807\u51c6\u5bf9\u4f55\u79cd\u6570\u636e\u8bbf\u95ee\u53ef\u4ee5\u51fa\u73b0\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u505a\u4e86\u76f8\u5f53\u5927\u7684\u7ea6\u675f\u3002\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528 auto \u53d8\u91cf\uff0c\u4f46\u6839\u636e\u662f\u8bfb\u6216\u5199\u5176\u4ed6\u5bf9\u8c61\uff0c\u5fc5\u987b\u662f volatile sig_atomic_t \u3002 volatile \u7c7b\u578b\u9650\u5236\u7b26\u786e\u4fdd\u4e86\u8bbf\u95ee\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u53d8\u91cf\u4e0d\u4f1a\u8de8\u8d8a\u5e8f\u5217\u70b9\uff1b\u5e76\u4e14\u4f7f\u7528 sig_atomic_t \u7c7b\u578b\u53ef\u4ee5\u786e\u4fdd\u5728\u4fe1\u53f7\u4f20\u9012\u65f6\u5bf9\u53d8\u91cf\u7684\u4fee\u6539\u662f\u539f\u5b50\u7684\u3002 POSIX \u6807\u51c6\u4e5f\u5141\u8bb8\u4e00\u5c0f\u90e8\u5206\u5e93\u51fd\u6570\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u88ab\u8c03\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u5b89\u5168\u7684\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u53ea\u5728 POSIX \u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u8c03\u7528\u5b83\u4eec\u3002","title":"3. \u8868\u8fbe\u5f0f\u4e0e\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Expressions","text":"\u4e00\u4e2a \u8868\u8fbe\u5f0f \u7531\u81f3\u5c11\u4e00\u4e2a\u64cd\u4f5c\u6570\u548c 0 \u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7b26\u7ec4\u6210\u3002\u64cd\u4f5c\u6570\u662f\u6709\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5982\u5e38\u91cf\u3001\u53d8\u91cf\u4ee5\u53ca\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u8c03\u7528\u3002\u4f8b\u5982\uff1a 47 2 + 2 cosine(3.14159) /* We presume this returns a floating point value. */ \u5706\u62ec\u53f7\u5206\u7ec4\u7684\u5b50\u8868\u8fbe\u5f0f: ( 2 * ( ( 3 + 10 ) - ( 2 * 6 ) ) ) \u6700\u5185\u5c42\u7684\u8868\u8fbe\u5f0f\u6700\u5148\u8ba1\u7b97\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 3 + 10 \u548c 2 * 6 \u5206\u522b\u8ba1\u7b97\u4e3a 13 \u548c 12 \u3002\u7136\u540e 13 \u51cf\u53bb 12 \uff0c\u5f97\u5230 1 \u3002\u6700\u540e 1 \u4e58\u4e0a 2 \u5f97\u5230 2 \u3002\u6700\u5916\u5c42\u7684\u5706\u62ec\u53f7\u662f\u53ef\u9009\u7684\u3002 \u4e00\u4e2a \u64cd\u4f5c\u7b26 \u7ed9\u5b83\u7684 \u64cd\u4f5c\u6570 \u6307\u5b9a\u4e00\u4e2a\u64cd\u4f5c\u3002\u4e0d\u540c\u64cd\u4f5c\u7b26\u53ef\u80fd\u6709 1 \u4e2a\uff0c2 \u4e2a\u6216\u8005 3 \u4e2a\u64cd\u4f5c\u6570\u3002","title":"3.1 \u8868\u8fbe\u5f0f"},{"location":"Expressions-And-Operators/#Assignment-Operators","text":"\u8d4b\u503c\u64cd\u4f5c\u7b26\u628a\u4e00\u4e2a\u503c\u5b58\u5230\u53d8\u91cf\u91cc\u9762\u3002 C \u63d0\u4f9b\u4e86\u591a\u79cd\u8d4b\u503c\u64cd\u4f5c\u7b26\u3002 \u6807\u51c6\u8d4b\u503c\u64cd\u4f5c = \u7b26\u7b80\u5355\u5730\u628a\u53f3\u8fb9\u7684\u64cd\u4f5c\u7b26\u5b58\u5230\u5de6\u8fb9\u7684\u53d8\u91cf\u91cc\u9762\u3002\u548c\u6240\u6709\u7684\u8d4b\u503c\u64cd\u4f5c\u7b26\u4e00\u6837\uff0c\u5de6\u64cd\u4f5c\u6570\uff08\u901a\u5e38\u4e5f\u53eb\u5de6\u503c\uff09\u4e0d\u80fd\u662f\u5b57\u9762\u91cf\u6216\u5e38\u503c\u3002 int x = 10; float y = 45.12 + 2.0; int z = (2 * (3 + function () )); struct foo { int bar; int baz; } quux = {3, 4}; \u6ce8\u610f\uff0c\u4e0d\u50cf\u4e0b\u9762\u90a3\u4e9b\u8d4b\u503c\u64cd\u4f5c\u7b26\uff0c\u4f60\u53ef\u4ee5\u7528 = \u6765\u8d4b\u503c\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 \u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u5148\u5bf9\u5de6\u53f3 2 \u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u8d4b\u7ed9\u5de6\u64cd\u4f5c\u6570\u3002\u4e0b\u9762\u5217\u51fa\u4e86\u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u548c\u5b83\u4eec\u7684\u7b80\u8981\u8bf4\u660e\uff1a += \u5148\u76f8\u52a0\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 -= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u51cf\u53bb\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 *= \u5148\u76f8\u4e58\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 /= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u9664\u4ee5\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 %= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u6a21\u53f3\u64cd\u4f5c\u6570\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 <<= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u5de6\u79fb\u53f3\u64cd\u4f5c\u6570\u4e2a\u4f4d\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 >>= \u5148\u628a\u5de6\u64cd\u4f5c\u6570\u53f3\u79fb\u53f3\u64cd\u4f5c\u6570\u4e2a\u4f4d\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 &= \u5148\u6309\u4f4d\u4e0e\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 ^= \u5148\u6309\u4f4d\u5f02\u6216\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 |= \u5148\u6309\u4f4d\u6216\uff0c\u518d\u628a\u7ed3\u679c\u8d4b\u503c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7ec4\u5408\u8d4b\u503c\u64cd\u4f5c\u7b26\u7684\u4f8b\u5b50\uff1a x += y; \u65e2\u7136\u8ba1\u7b97\u5de6\u503c x \u6ca1\u6709\u526f\u4f5c\u7528\uff0c\u90a3\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5199\u6210\uff1a x = x + y;","title":"3.2 \u8d4b\u503c\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Incrementing-and-Decrementing","text":"\u81ea\u589e\u64cd\u4f5c\u7b26 ++ \u4f1a\u5c06\u5b83\u7684\u64cd\u4f5c\u6570\u52a0 1\u3002\u8be5\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u6307\u9488\uff0c\u6216\u8005\u4e00\u4e2a\u679a\u4e3e\u53d8\u91cf\u3002\u4f60\u4e5f\u53ef\u4ee5\u628a\u81ea\u589e\u64cd\u4f5c\u7b26\u653e\u5728\u64cd\u4f5c\u6570\u524d\u9762\u6216\u8005\u540e\u9762\u3002\u4f8b\u5982\uff1a char w = '1'; int x = 5; char y = 'B'; float z = 5.2; int *p = &x; ++w; /* w is now the character \u20182\u2019 (not the value 2). */ x++; /* x is now 6. */ ++y; /* y is now \u2018C\u2019 (on ASCII systems). */ z++; /* z is now 6.2. */ ++p; /* p is now &x + sizeof(int). */ \uff08\u6ce8\u610f\uff0c\u5bf9\u4e00\u4e2a\u6307\u9488\u4f7f\u7528\u81ea\u589e\u53ea\u6709\u5728\u4f60\u786e\u4fe1\u65b0\u7684\u6307\u9488\u503c\u662f\u4e00\u4e2a\u5408\u6cd5\u5185\u5b58\u5730\u5740\u65f6\u624d\u6709\u610f\u4e49\uff09 \u524d\u7f6e\u81ea\u589e\u64cd\u4f5c\u7b26\u4f1a\u5728\u64cd\u4f5c\u6570\u88ab\u8ba1\u7b97\u524d\u52a0 1. \u800c\u540e\u7f6e\u81ea\u589e\u64cd\u4f5c\u5728\u64cd\u4f5c\u6570\u88ab\u8ba1\u7b97\u540e\u52a0 1\u3002\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6539\u53d8\u81ea\u589e\u64cd\u4f5c\u7b26\u7684\u4f4d\u7f6e\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u4ed6\u4eec\u662f\u4e0d\u540c\u7684\uff1a int x = 5; printf (\"%d \\n\", x++); /* Print x and then increment it. */ /* x is now equal to 6. */ printf (\"%d \\n\", ++x); /* Increment x and then print it. */ \u4e0a\u9762\u4f8b\u5b50\u7684\u7ed3\u679c\u662f\uff1a 5 7 \u540c\u6837\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u51cf\u64cd\u4f5c\u7b26\u4f7f\u64cd\u4f5c\u6570\u51cf 1\uff1a int x = 5; x--; /* x is now 4. */ \u81ea\u51cf\u64cd\u4f5c\u7b26\u4e5f\u6709\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u6982\u5ff5\u3002","title":"3.3 \u81ea\u589e\u548c\u81ea\u51cf"},{"location":"Expressions-And-Operators/#Arithmetic-Operators","text":"C \u63d0\u4f9b\u6807\u51c6\u7b97\u672f\u8fd0\u7b97\u64cd\u4f5c\u7b26\uff1a\u52a0\u51cf\u4e58\u9664\uff0c\u8fd8\u6709\u53d6\u6a21\u548c\u76f8\u53cd\u6570\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7528\u6cd5\u5f88\u76f4\u63a5\uff1b\u4f8b\u5982\uff1a /* Addition. */ x = 5 + 3; y = 10.23 + 37.332; quux_pointer = foo_pointer + bar_pointer; /* Subtraction. */ x = 5 - 3; y = 57.223 - 10.903; quux_pointer = foo_pointer - bar_pointer; \u6307\u9488\u53ef\u4ee5\u52a0\u51cf\uff0c\u4f46\u4e0d\u80fd\u4e58\u9664\u3002 /* Multiplication. */ x = 5 * 3; y = 47.4 * 1.001; /* Division. */ x = 5 / 3; y = 940.0 / 20.2; \u6b63\u6570\u7684\u6574\u6570\u9664\u5411 0 \u622a\u65ad\uff0c\u5982 5/3 \u7b49\u4e8e 1 \u3002\u7136\u800c\uff0c\u5982\u679c\u64cd\u4f5c\u6570\u662f\u8d1f\u7684\uff0c\u622a\u65ad\u65b9\u5411\u7531\u5177\u4f53\u5b9e\u73b0\u5b9a\u4e49\u3002\u5173\u4e8e\u6709\u7b26\u53f7\u6574\u6570\u9664\u7684\u6ea2\u51fa\u95ee\u9898\u8be6\u89c1 \u6709\u7b26\u53f7\u6574\u6570\u9664\u6cd5 \u4f60\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u64cd\u4f5c\u7b26 % \u6765\u8ba1\u7b97 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u4f59\u6570\uff0c\u5e76\u4e14\u64cd\u4f5c\u6570\u662f\u6709\u65b9\u5411\u7684\uff1a 3 % 5 \u548c 5 % 3 \u662f\u4e0d\u540c\u7684\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u57fa\u7840\u6570\u636e\u7c7b\u578b\u8868\u8fbe\u5f0f\u3002 /* Modular division. */ x = 5 % 3; y = 74 % 47; \u53d6\u6a21\u9664\u5f97\u5230 2 \u4e2a\u64cd\u4f5c\u6570\u76f8\u9664\u540e\u7684\u4f59\u6570\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u57fa\u7840\u6574\u6570\u7c7b\u578b\u3002 /* Negation. */ int x = -5; float y = -3.14159; \u5982\u679c\u4f60\u5bf9\u4e00\u4e2a unsigned \u7c7b\u578b\u7684\u64cd\u4f5c\u6570\u4f7f\u7528\u76f8\u53cd\u6570\u64cd\u4f5c\u7b26\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u662f\u76f8\u53cd\u6570\uff0c\u800c\u662f\u8be5 unsigned \u7c7b\u578b\u7684\u6700\u5927\u503c\u51cf\u53bb\u8be5\u64cd\u4f5c\u6570\u3002 \u5f88\u591a\u7cfb\u7edf\u4f7f\u7528\u8865\u7801\u8fd0\u7b97\uff0c\u56e0\u6b64\u5728\u8fd9\u4e9b\u7cfb\u7edf\u4e0a signed \u7c7b\u578b\u7684\u6700\u5c0f\u8d1f\u6570\u7684\u76f8\u53cd\u6570\u6bd4\u6700\u5927\u6574\u6570\u8981\u5927\u3002\u4f8b\u5982\uff1a #include <limits.h> #include <stdio.h> int main (int argc, char *argv[]) { int x; x = INT_MAX; printf(\"INT_MAX = %d\\n\", x); x = INT_MIN; printf(\"INT_MIN = %d\\n\", x); x = -x; printf(\"-INT_MIN = %d\\n\", x); return 0; } \u8f93\u51fa\u7684\u7ed3\u679c\u662f\uff1a INT_MAX = 2147483647 INT_MIN = -2147483648 -INT_MIN = -2147483648 \u4f60\u4e5f\u53ef\u4ee5\u5728\u4e00\u4e2a\u6570\u5b57\u8868\u8fbe\u5f0f\u524d\u9762\u52a0\u4e0a\u6574\u6570\u64cd\u4f5c\u6570 +\uff0c\u4f46\u5e76\u6ca1\u6709\u610f\u4e49\uff1a int x = +42; \u6570\u503c\u603b\u662f\u88ab\u5047\u5b9a\u4e3a\u6574\u6570\uff0c\u9664\u975e\u4f60\u660e\u786e\u5730\u52a0\u4e86\u7b26\u53f7\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002","title":"3.4 \u7b97\u672f\u8fd0\u7b97\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Complex-Conjugation","text":"GNU \u6269\u5c55\u8ba9\u4f60\u53ef\u4ee5\u4f7f\u7528\u590d\u6570\u5171\u8f6d\u64cd\u4f5c\u7b26 ~ \u6765\u5bf9\u4e00\u4e2a\u590d\u6570\u64cd\u4f5c\u7b26\u53d6\u5171\u8f6d -- \u5373\u8f6c\u6362\u865a\u90e8\u7684\u7b26\u53f7\u3002\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u590d\u6570\u7c7b\u578b\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff1a __complex__ int x = 5 + 17i; printf (\"%d \\n\", (x * ~x)); \u56e0\u4e3a\u590d\u6570 (a + bi) \u4e58\u4ee5\u5b83\u7684\u5171\u8f6d\u7b49\u4e8e a^2 + b^2 \u3002\u6240\u4ee5\uff0c\u4e0a\u9762 printf \u5c06\u4f1a\u6253\u5370 314\uff0c\u5373 25 + 289 \u3002","title":"3.5 \u590d\u6570\u5171\u8f6d"},{"location":"Expressions-And-Operators/#Comparison-Operators","text":"\u4f60\u4f7f\u7528\u6bd4\u8f83\u64cd\u4f5c\u7b26\u6765\u786e\u5b9a 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u76f8\u5bf9\u5173\u7cfb\uff1a\u662f\u76f8\u7b49\uff0c\u8fd8\u662f\u4e00\u4e2a\u6bd4\u53e6\u5916\u4e00\u4e2a\u5927\uff0c\u8fd8\u662f\u4e00\u4e2a\u6bd4\u53e6\u5916\u4e00\u4e2a\u5c0f\uff0c\u7b49\u7b49\u3002\u5f53\u4f60\u4f7f\u7528\u6bd4\u8f83\u64cd\u4f5c\u7b26\u65f6\uff0c\u7ed3\u679c\u8981\u4e48\u662f 1 \u8981\u4e48\u662f 0\uff0c \u5206\u522b\u4ee3\u8868\u771f\u548c\u5047\u3002 \uff08\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u53d8\u91cf x \u548c y \u4ee3\u8868 2 \u4e2a\u7b97\u672f\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u6216\u8005\u6307\u9488\uff09 \u76f8\u7b49\u64cd\u4f5c\u7b26 == \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u76f8\u7b49\u3002\u7ed3\u679c 1 \u4ee3\u8868\u76f8\u7b49\uff0c0 \u4ee3\u8868\u4e0d\u7b49\u3002 if (x == y) puts (\"x is equal to y\"); else puts (\"x is not equal to y\"); \u4e0d\u7b49\u64cd\u4f5c\u7b26 != \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u4e0d\u76f8\u7b49\u3002\u7ed3\u679c 1 \u4ee3\u8868\u4e0d\u76f8\u7b49\uff0c0 \u4ee3\u8868\u76f8\u7b49\u3002 if (x != y) puts (\"x is not equal to y\"); else puts (\"x is equal to y\"); \u6bd4\u8f83\u6d6e\u70b9\u6570\u76f8\u7b49\u6216\u8005\u4e0d\u7b49\u53ef\u80fd\u4f1a\u5f97\u5230\u610f\u60f3\u4e0d\u5230\u7684\u7ed3\u3002\u8be6\u89c1 \u5b9e\u6570\u7c7b\u578b \u4f60\u53ef\u4ee5\u6bd4\u8f83 2 \u4e2a\u51fd\u6570\u6307\u9488\u662f\u5426\u76f8\u7b49\uff1b\u8be5\u6bd4\u8f83\u4f1a\u6d4b\u8bd5 2 \u4e2a\u6307\u9488\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u51fd\u6570\u3002 \u9664\u4e86\u76f8\u7b49\u548c\u4e0d\u7b49\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5c0f\u4e8e\u3001\u5927\u4e8e\u3001\u5c0f\u4e8e\u7b49\u4e8e\u6216\u8005\u5927\u4e8e\u7b49\u4e8e\u53e6\u5916\u4e00\u4e2a\u503c\u3002\u4e0b\u9762\u662f\u793a\u4f8b\uff1a if (x < y) puts (\"x is less than y\"); if (x <= y) puts (\"x is less than or equal to y\"); if (x > y) puts (\"x is greater than y\"); if (x >= y) puts (\"x is greater than or equal to y\");","title":"3.6 \u6bd4\u8f83\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Logical-Operators","text":"\u903b\u8f91\u64cd\u4f5c\u7b26\u6d4b\u8bd5\u4e00\u5bf9\u64cd\u4f5c\u6570\u7684\u771f\u503c\u3002\u5728 C \u4e2d\uff0c\u4efb\u4f55\u975e 0 \u8868\u8fbe\u5f0f\u90fd\u662f\u771f\uff0c\u76f8\u53cd\u90fd\u662f\u5047\u3002 \u903b\u8f91\u4e0e\u64cd\u4f5c\u7b26 && \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u90fd\u662f\u771f\u3002\u5982\u8fc7\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a\u5047\uff0c\u5219\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002 if ((x == 5) && (y == 10)) printf (\"x is 5 and y is 10\"); \u903b\u8f91\u4e0e\u64cd\u4f5c\u7b26 || \u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a\u771f\u3002\u5982\u8fc7\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a\u771f\uff0c\u5219\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002 if ((x == 5) || (y == 10)) printf (\"x is 5 or y is 10\"); \u4f60\u53ef\u4ee5\u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u524d\u9762\u52a0\u4e00\u4e2a\u903b\u8f91\u975e\u64cd\u4f5c\u7b26 ! \u6765\u53cd\u8f6c\u8be5\u8868\u8fbe\u5f0f\u7684\u771f\u503c\uff1a if (!(x == 5)) printf (\"x is not 5\"); \u56e0\u4e3a\u903b\u8f91\u8868\u8fbe\u5f0f\u5bf9\u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u603b\u4f1a\u88ab\u8ba1\u7b97\uff0c\u6240\u4ee5\u4f60\u4e0d\u80fd\u5199\u4e0b\u9762\u8fd9\u79cd\u4e0d\u76f4\u89c2\u7684\u4ee3\u7801\uff1a if (foo && x++) bar(); \u5982\u679c foo \u662f 0\uff0c\u4e0d\u4ec5 bar \u51fd\u6570\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c x \u4e5f\u4e0d\u4f1a\u81ea\u589e\u3002\u5982\u679c\u4f60\u6253\u7b97\u4e0d\u7ba1 foo \u7684\u503c\u662f\u4ec0\u4e48\u90fd\u8981\u81ea\u589e x \uff0c\u4f60\u5e94\u8be5\u628a\u5b83\u5199\u5230\u903b\u8f91\u4e0e\u8868\u8fbe\u5f0f\u5916\u9762\u3002","title":"3.7 \u903b\u8f91\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Bit-Shifting","text":"\u4f60\u4f7f\u7528\u5de6\u79fb\u64cd\u4f5c\u7b26 << \u628a\u5b83\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5411\u5de6\u79fb\u4f4d\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4ee3\u8868\u8981\u79fb\u591a\u5c11\u4f4d\u3002\u79fb\u51fa\u5de6\u8fb9\u754c\u7684\u4f4d\u5c06\u88ab\u4e22\u5f03\uff0c\u53f3\u4fa7\u65b0\u52a0\u5165\u7684\u4f4d\u4e3a 0. x = 47; /* 47 is 00101111 in binary. */ x << 1; /* 00101111 << 1 is 01011110. */ \u7c7b\u4f3c\u5730\uff0c\u4f60\u4f7f\u7528\u53f3\u79fb\u64cd\u4f5c\u7b26 >> \u628a\u5b83\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5411\u53f3\u79fb\u4f4d\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4ee3\u8868\u8981\u79fb\u591a\u5c11\u4f4d\u3002\u79fb\u51fa\u53f3\u8fb9\u754c\u7684\u4f4d\u5c06\u88ab\u4e22\u5f03\uff0c\u5de6\u4fa7\u65b0\u52a0\u5165\u7684\u4f4d \u901a\u5e38 \u4e3a 0. \u4f46\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u7684\u8d1f\u6570\uff0c\u90a3\u4e48\u65b0\u52a0\u7684\u4f4d\u4f1a\u662f 0 \u6216\u8005 \u4e4b\u524d\u6700\u5de6\u8fb9\u4f4d\u7f6e\u7684\u503c\u3002 x = 47; /* 47 is 00101111 in binary. */ x >> 1; /* 00101111 >> 1 is 00010111. */ \u5bf9\u4e8e << \u548c >> \uff0c\u5982\u679c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u6bd4\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u4f4d\u5bbd\u8fd8\u8981\u5927\uff0c\u6216\u8005\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u662f\u590d\u6570\uff0c\u8be5\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u79fb\u4f4d\u64cd\u4f5c\u6570\u6765\u505a\u4e00\u4e9b\u6709\u8da3\u7684 hack \u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u7ed9\u4f60\u4e00\u4e2a\u65e5\u671f\u5305\u542b\u5929 d \uff0c\u6708 m \u548c\u5e74 y \uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5b58\u5230\u4e00\u4e2a\u6570 x \u91cc\u9762\uff1a int d = 12; int m = 6; int y = 1983; int x = (((y << 4) + m) << 5) + d; \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79fb\u4f4d\u64cd\u4f5c\u7b26\u548c\u53d6\u6a21\u6765\u628a\u539f\u6765\u7684 d \u3001 m \u3001 y \u4ece x \u91cc\u9762\u63d0\u53d6\u51fa\u6765\uff1a d = x % 32; m = (x >> 5) % 16; y = x >> 9;","title":"3.8 \u4f4d\u79fb"},{"location":"Expressions-And-Operators/#Bitwise-Logical-Operators","text":"C \u63d0\u4f9b\u4e86\u6309\u4f4d\u4e0e\uff0c\u6309\u4f4d\u6216\uff0c\u6309\u4f4d\u5f02\u6216\u548c\u6309\u4f4d\u53d6\u53cd\u64cd\u4f5c\u7b26\u3002 \u6309\u4f4d\u4e0e\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u90fd\u4e3a 1 \u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 1\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 0\u3002\u4e0b\u9762\u7528\u4e8c\u8fdb\u5236\u6570\u6765\u6f14\u793a\u5982\u4f55\u5de5\u4f5c\uff1a 11001001 & 10011011 = 10001001 \u6309\u4f4d\u6216\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u90fd\u4e3a 0 \u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 0\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 1\u3002 11001001 | 10011011 = 11011011 \u6309\u4f4d\u5f02\u6216\u6d4b\u8bd5 2 \u4e2a\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff0c\u5bf9\u5e94\u4f4d\u4e0d\u540c\u5219\u8be5\u4f4d\u7ed3\u679c\u4e3a 1\u3002\u5176\u4ed6\u60c5\u51b5\u90fd\u4e3a 0\u3002 11001001 ^ 10011011 = 01010010 \u6309\u4f4d\u53d6\u53cd\u53cd\u8f6c\u5b83\u7684\u64cd\u4f5c\u6570\u7684\u6bcf\u4e00\u4f4d\uff1a ~11001001 = 00110110 \u5728 C \u91cc\u9762\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u53ea\u80fd\u7528\u4e8e\u6574\u6570\u7c7b\u578b\uff08\u6216\u5b57\u7b26\u7c7b\u578b)\uff0c\u5e76\u4e14\u4e3a\u4e86\u6700\u5927\u7684\u53ef\u79fb\u690d\u6027\uff0c\u4f60\u5e94\u8be5\u53ea\u5bf9 unsiged \u6574\u6570\u7c7b\u578b\u4f7f\u7528\u6309\u4f4d\u53d6\u53cd\u64cd\u4f5c\u7b26\u3002\u4f8b\u5982\uff1a unsigned int foo = 42; unsigned int bar = 57; unsigned int quux; quux = foo & bar; quux = foo | bar; quux = foo ^ bar; quux = ~foo;","title":"3.9 \u4f4d\u903b\u8f91\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Pointer-Operators","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u5730\u5740\u64cd\u4f5c\u7b26 & \u6765\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u3002 int x = 5; int *pointer_to_x = &x; \u4f7f\u7528 & \u6765\u83b7\u53d6\u4e00\u4e2a\u51fd\u6570\u7684\u5730\u5740\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u5c3d\u7ba1\u4f60\u53ef\u4ee5\uff1a extern int foo (void); int (*fp1) (void) = foo; /* fp1 points to foo */ int (*fp2) (void) = &foo; /* fp2 also points to foo */ \u51fd\u6570\u6307\u9488\u548c\u6570\u636e\u6307\u9488\u662f\u4e0d\u517c\u5bb9\u7684\uff0c\u56e0\u6b64\u4f60\u4e0d\u80fd\u628a\u51fd\u6570\u7684\u5730\u5740\u5b58\u8fdb\u6570\u636e\u6307\u9488\uff0c\u7136\u540e\u62f7\u8d1d\u5230\u51fd\u6570\u6307\u9488\u5e76\u6210\u529f\u8c03\u7528\u5b83\u3002\u6709\u53ef\u80fd\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 GNU \u7684 C89 \u7684\u6269\u5c55\u4e2d\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u5730\u5740\u64cd\u4f5c\u7b26 && \u6765\u83b7\u53d6\u4e00\u4e2a\u6807\u7b7e\u7684\u5730\u5740\u3002\u7ed3\u679c\u662f\u4e00\u4e2a void* \u6307\u9488\uff0c\u53ef\u4ee5\u7528\u4e8e goto \u8bed\u53e5\u3002\u8be6\u89c1 goto \u8bed\u53e5 \u5047\u5b9a\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u5b58\u50a8\u5728\u4e00\u4e2a\u6307\u9488\u91cc\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u95f4\u63a5\u8fd0\u7b97\u7b26 * \u6765\u83b7\u53d6\u5b58\u5728\u8be5\u5730\u5740\u7684\u503c\uff08\u8fd9\u88ab\u79f0\u4f5c\u89e3\u5f15\u7528\u6307\u9488\uff09 int x = 5; int y; int *ptr; ptr = &x; /* ptr now holds the address of x. */ y = *ptr; /* y gets the value stored at the address stored in ptr. */ \u8981\u907f\u514d\u89e3\u5f15\u7528\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u4e3a\u5df2\u77e5\u5185\u5b58\u5730\u5740\u7684\u6307\u9488\u3002","title":"3.10 \u6307\u9488\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#The-sizeof-Operator","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 sizeof \u64cd\u4f5c\u7b26\u6765\u83b7\u53d6\u5b83\u7684\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\uff08\u6309\u5b57\u8282\uff09\u3002\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7c7b\u578b\u6307\u793a\u7b26\uff08\u5982 int \u6216 float \uff09,\u4e5f\u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u8868\u8fbe\u5f0f\u3002\u5f53\u64cd\u4f5c\u6570\u662f\u7c7b\u578b\u540d\u5b57\u65f6\uff0c\u5b83\u5fc5\u987b\u653e\u5728\u5706\u62ec\u53f7\u91cc\u3002\u5982\uff1a size_t a = sizeof(int); size_t b = sizeof(float); size_t c = sizeof(5); size_t d = sizeof(5.143); size_t e = sizeof a; sizeof \u7684\u7ed3\u679c\u662f size_t \u7c7b\u578b\uff0c\u5b83\u5728\u5934\u6587\u4ef6 <stddef.h> \u4e2d\u5b9a\u4e49\u3002 size_t \u662f\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5b83\u53ef\u80fd\u662f unsigned int \u6216\u8005 unsigned long int \uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u7cfb\u7edf\u3002 size_t \u4f5c\u4e3a\u5faa\u73af\u7684\u4e0b\u6807\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u80fd\u4fdd\u8bc1\u653e\u4e0b\u4efb\u4f55\u6570\u7ec4\u7684\u5927\u5c0f\uff1b\u4f46 int \u4e0d\u884c\u3002 sizeof \u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\uff1a #include <stddef.h> #include <stdio.h> static const int values[] = { 1, 2, 48, 681 }; #define ARRAYSIZE(x) (sizeof x/sizeof x[0]) int main (int argc, char *argv[]) { size_t i; for (i = 0; i < ARRAYSIZE(values); i++) { printf(\"%d\\n\", values[i]); } return 0; } \u6709 2 \u79cd\u60c5\u51b5\u8fd9\u79cd\u6280\u672f\u4e0d\u80fd\u5de5\u4f5c\u3002\u7b2c\u4e00\u79cd\u662f\u6570\u7ec4\u7684\u5143\u7d20\u7684\u5927\u5c0f\u4e3a 0\uff08GNU \u6269\u5c55\u652f\u6301\u5927\u5c0f\u4e3a 0 \u7684\u7ed3\u6784\uff09\u3002\u7b2c\u4e8c\u79cd\u662f\u6570\u7ec4\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff08\u8be6\u89c1 \u51fd\u6570\u53c2\u6570 )\u3002","title":"3.11 sizeof \u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/##Type-Casts","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u663e\u5f0f\u5730\u5c06\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53d8\u6210\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e00\u4e2a\u7c7b\u578b\u8f6c\u5305\u62ec\u4e00\u4e2a\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7c7b\u578b\u6307\u793a\u7b26\uff0c\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u4e3a\u4e86\u786e\u4fdd\u6b63\u786e\u7684\u8f6c\u6362\uff0c\u4f60\u5e94\u8be5\u7ed9\u540e\u9762\u8ddf\u7684\u8868\u8fbe\u5f0f\u4e5f\u52a0\u4e00\u4e2a\u5706\u62ec\u53f7\u3002\u4f8b\u5982\uff1a float x; int y = 7; int z = 3; x = (float) (y / z); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a y \u548c z \u90fd\u662f\u6574\u578b\uff0c\u6240\u4ee5 y / z \u662f\u6574\u6570\u9664\uff1b\u5373\u4f7f x \u662f\u6d6e\u70b9\u578b\uff0c\u5b83\u4e5f\u63a5\u53d7\u503c 2\u3002\u663e\u5f0f\u8f6c\u6362\u9664\u6cd5\u7684\u7ed3\u679c\u4e3a float \u7c7b\u578b\u5e76\u4e0d\u597d\uff0c\u56e0\u4e3a y / z \u7684\u503c\u5df2\u7ecf\u662f 2 \u4e86\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u628a\u9664\u6cd5\u7684\u4e00\u4e2a\u64cd\u4f5c\u6570\u5728\u9664\u6cd5\u8fdb\u884c\u4e4b\u524d\u8f6c\u6210\u6d6e\u70b9\u578b\uff1a float x; int y = 7; int z = 3; x = (y / (float)z); \u8fd9\u91cc\uff0c\u4e00\u4e2a\u63a5\u8fd1 2.333\u00b7 \u7684\u6d6e\u70b9\u6570\u88ab\u8d4b\u7ed9\u4e86 x \u3002 \u7c7b\u578b\u8f6c\u6362\u53ea\u5bf9\u8868\u6807\u91cf\u6709\u7528\uff08\u50cf\u6574\u578b\uff0c\u6d6e\u70b9\u578b\u6216\u6307\u9488\u7c7b\u578b\uff09\u3002\u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u79cd\u662f\u4e0d\u5141\u8bb8\u7684\uff1a struct fooTag { /* members ... */ }; struct fooTag foo; unsigned char byteArray[8]; foo = (struct fooType) byteArray; /* Fail! */","title":"3.12 \u7c7b\u578b\u8f6c\u6362"},{"location":"Expressions-And-Operators/#Array-Subscripts","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6570\u7ec4\u540d\u5b57\u548c\u65b9\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u6570\u7ec4\u4e0b\u6807\uff08\u6216\u8005\u53eb\u7d22\u5f15\uff0c\u6216\u8005\u53eb\u5143\u7d20\u6570\uff09\u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u53eb my_array \u7684\u6574\u578b\u6570\u7ec4\uff1a my_array[0] = 5; \u6570\u7ec4\u4e0b\u6807\u8868\u8fbe\u5f0f A[i] \u88ab\u5b9a\u4e49\u4e3a\u548c\u8868\u8fbe\u5f0f (*((A)+(i))) \u662f\u4e00\u6837\u7684\u3002\u8fd9\u610f\u5473\u7740\u5f88\u591a\u6570\u7ec4\u540d\u7684\u4f7f\u7528\u548c\u6307\u9488\u8868\u8fbe\u5f0f\u662f\u7b49\u4ef7\u7684\u3002\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5bf9\u4e00\u4e2a register \u9650\u5b9a\u7684\u6570\u7ec4\u4f7f\u7528\u4e0b\u6807\u3002","title":"3.13 \u6570\u7ec4\u4e0b\u6807"},{"location":"Expressions-And-Operators/#Function-Calls-as-Expressions","text":"\u4efb\u4f55\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\u8c03\u7528\u90fd\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 int function(void); \u2026 a = 10 + function();","title":"3.14 \u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u8868\u8fbe\u5f0f"},{"location":"Expressions-And-Operators/#The-Comma-Operator","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u64cd\u4f5c\u7b26 , \u6765\u5206\u5272 2 \u4e2a\uff08\u8868\u9762\u4e0a\u76f8\u5173\u7684\uff09\u8868\u8fbe\u5f0f\u3002\u6bd4\u5982\uff0c\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u88ab\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u7684\u503c\uff1a x++, y = x * x; \u66f4\u5e38\u89c1\u5730\uff0c\u9017\u53f7\u64cd\u4f5c\u7b26\u88ab\u7528\u4e8e for \u8bed\u53e5\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a /* Using the comma operator in a for statement. */ for (x = 1, y = 10; x <=10 && y >=1; x++, y--) { \u2026 } \u8fd9\u8ba9\u4f60\u5f88\u65b9\u4fbf\u5730\u8bbe\u7f6e\uff0c\u76d1\u63a7\u4ee5\u53ca\u4fee\u6539 for \u8bed\u53e5\u4e2d\u7684\u591a\u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f\u3002 \u9017\u53f7\u4e5f\u88ab\u7528\u4e8e\u5206\u5272\u51fd\u6570\u53c2\u6570\uff1b\u7136\u800c\uff0c\u8fd9\u91cc\u7684\u9017\u53f7\u5728\u884c\u4e3a\u4e0a\u5c31\u4e0d\u662f\u9017\u53f7\u64cd\u4f5c\u7b26\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u9017\u53f7\u64cd\u4f5c\u7b26\u88ab\u7528\u4e8e\u51fd\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c06\u89e3\u91ca\u6210\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff08\u5373\u591a\u4e86\u4e00\u4e2a\u53c2\u6570\uff09\u6765\u8c03\u7528\u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u5728\u51fd\u6570\u53c2\u6570\u91cc\u9762\u4f7f\u7528\u9017\u53f7\u64cd\u4f5c\u7b26\uff0c\u90a3\u4f60\u5fc5\u987b\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u53c2\u6570\u91cc\u9017\u53f7\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff1a\u7528\u6765\u5206\u5272\u53c2\u6570\u3002\u56e0\u6b64\uff0c foo (x, y=47, x, z); \u88ab\u89e3\u91ca\u6210\u4f7f\u7528 4 \u4e2a\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\uff1b\u4f46\u662f\uff0c foo (x, (y=47, x), z); \u5c31\u662f\u4e00\u4e2a\u53ea\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\uff08\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f (y = 47, x)\uff09\u3002","title":"3.15 \u9017\u53f7\u64cd\u4f5c\u7b26"},{"location":"Expressions-And-Operators/#Member-Access-Expressions","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26 . \u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6216\u8005\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\u3002\u4f60\u8981\u628a\u7ed3\u6784\u4f53\u53d8\u91cf\u7684\u540d\u5b57\u653e\u5728\u64cd\u4f5c\u7b26\u5de6\u8fb9\uff0c\u6210\u5458\u540d\u5b57\u653e\u5728\u53f3\u8fb9\u3002 struct point { int x, y; }; struct point first_point; first_point.x = 0; first_point.y = 5; \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee\u7ed3\u6784\u4f53\u6216\u8054\u5408\u4f53\u53d8\u91cf\u7684\u6210\u5458\uff0c\u8981\u4f7f\u7528\u95f4\u63a5\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26 -> \u3002 x->y \u7b49\u4ef7\u4e8e (*x).y \u3002 struct fish { int length, weight; }; struct fish salmon; struct fish *fish_pointer = &salmon; fish_pointer->length = 3; fish_pointer->weight = 9; \u8be6\u89c1 \u6307\u9488","title":"3.16 \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f"},{"location":"Expressions-And-Operators/#Conditional-Expressions","text":"\u4f7f\u7528\u6761\u4ef6\u8fd0\u7b97\u7b26\u53ef\u4ee5\u8ba9\u4f60\u901a\u8fc7\u6761\u4ef6\u8868\u8fbe\u5f0f\u53bb\u51b3\u5b9a\u662f\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u8fd8\u662f\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\uff0c\u8fd9\u53d6\u51b3\u4e8e\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u771f\u503c\u3002\u4f8b\u5982\uff1a a ? b : c \u5982\u679c\u8868\u8fbe\u5f0f a \u662f\u771f\uff0c\u5219\u8868\u8fbe\u5f0f b \u88ab\u8ba1\u7b97\u5e76\u4e14\u7ed3\u679c\u662f b \u7684\u503c\u3002\u5426\u5219\uff0c\u8868\u8fbe\u5f0f c \u88ab\u8ba1\u7b97\uff0c\u7ed3\u679c\u662f c \u3002 \u8868\u8fbe\u5f0f b \u548c c \u4e00\u5b9a\u8981\u517c\u5bb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u5fc5\u987b\u90fd\u662f\uff1a \u7b97\u672f\u7c7b\u578b \u517c\u5bb9\u7684 struct \u6216 union \u7c7b\u578b \u6307\u5411\u517c\u5bb9\u7c7b\u578b\u7684\u6307\u9488\uff08\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u662f NULL \u6307\u9488\uff09 \u6b64\u5916\uff0c\u53ef\u4ee5\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u6307\u9488\uff0c\u53e6\u5916\u4e00\u4e2a\u662f void* \u6307\u9488\u3002 \u4f8b\u5982\uff1a a = (x == 5) ? y : z; \u8fd9\u91cc\uff0c\u5982\u679c x \u7b49\u4e8e 5\uff0c\u90a3\u4e48 a \u5c06\u5f97\u5230 y \u7684\u503c\u3002\u5426\u5219\uff0c a \u5c06\u5f97\u5230 z \u7684\u503c\u3002\u8fd9\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a if...else \u8868\u8fbe\u5f0f\u7684\u7b80\u5199\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u540c\u6837\u7684\u529f\u80fd\uff1a if (x == 5) a = y; else a = z; \u5982\u679c\u6761\u4ef6\u64cd\u4f5c\u7b26\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u771f\uff0c\u90a3\u4e48\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u5c06\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u5047\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u3002\u800c\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u603b\u662f\u4f1a\u88ab\u8ba1\u7b97\u3002","title":"3.17 \u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"Expressions-And-Operators/#Statements-and-Declarations-in-Expressions","text":"\u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u7ec4\u5408\u8bed\u53e5\u6765\u6784\u5efa\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u8fd9\u91cc\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u91cc\u5305\u542b\u5faa\u73af\u3001switch \u548c\u5c40\u90e8\u53d8\u91cf\u3002 \u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u4e2a\u7ec4\u5408\u8bed\u53e5\uff08\u6216\u8005\u53eb\u4ee3\u7801\u5757\uff09\u662f\u4e00\u7cfb\u5217\u7528\u82b1\u62ec\u53f7\u5305\u88f9\u7684\u8bed\u53e5\u3002\u800c\u5728\u672c\u8282\u7684\u6784\u67b6\u4e0b\uff0c\u5706\u62ec\u53f7\u8981\u628a\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u3002\u4f8b\u5982\uff1a ({ int y = function (); int z; if (y > 0) z = y; else z = - y; z; }) \u8fd9\u662f\u5408\u6cd5\u7684\uff08\u5c3d\u7ba1\u6bd4\u8d77\u5fc5\u8981\u7684\u5199\u6cd5\u66f4\u590d\u6742\u7684\uff09\u6c42 function() \u7edd\u5bf9\u503c\u7684\u8868\u8fbe\u5f0f\u3002 \u7ec4\u5408\u8868\u8fbe\u5f0f\u6700\u540e\u5e94\u8be5\u662f\u4e00\u4e2a\u8ddf\u7740\u5206\u53f7\u7684\u8868\u8fbe\u5f0f\uff1b\u8be5\u8868\u8fbe\u5f0f\u7684\u503c\u5c06\u662f\u6574\u4e2a\u7ed3\u6784\u7684\u503c\u3002\uff08\u5982\u679c\u4f60\u5728\u82b1\u62ec\u53f7\u6700\u540e\u4f7f\u7528\u4e86\u5176\u4ed6\u7c7b\u578b\u7684\u8bed\u53e5\uff0c\u8be5\u7ed3\u6784\u5219\u662f void \u7c7b\u578b\uff0c\u56e0\u6b64\u7b49\u6548\u4e8e\u65e0\u503c\uff09 \u8fd9\u4e2a\u7279\u6027\u5728\u5b9a\u4e49\u201c\u5b89\u5168\u201d\u5b8f\u5b9a\u4e49\u65f6\u5c24\u5176\u6709\u7528\uff08\u4ee5\u81f3\u4e8e\u5b83\u4eec\u4ec5\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e00\u6b21\uff09\u3002\u4f8b\u5982\uff0c\u201c\u6c42\u6700\u5927\u503c\u201d\u51fd\u6570\u901a\u5e38\u5728\u6807\u51c6 C \u4e2d\u4f7f\u7528\u5b8f\u4f5c\u5982\u4e0b\u5b9a\u4e49\uff1a #define max(a,b) ((a) > (b) ? (a) : (b)) \u4f46\u662f\u8be5\u5b9a\u4e49\u8ba1\u7b97 a \u6216 b \u4e24\u6b21\uff0c\u5982\u679c\u64cd\u4f5c\u6570\u6709\u526f\u4f5c\u7528\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u574f\u7ed3\u679c\u3002\u5728 GNU C \u4e2d\uff0c\u5982\u679c\u4f60\u77e5\u9053\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff08\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a int \uff09\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b89\u5168\u5730\u5b9a\u4e49\u5b8f\uff1a #define maxint(a,b) \\ ({int _a = (a), _b = (b); _a > _b ? _a : _b; }) \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\uff0c\u4f60\u4ecd\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u4f46\u4f60\u5fc5\u987b\u4f7f\u7528 typeof \u8868\u8fbe\u5f0f\u6216\u8005\u7c7b\u578b\u540d\u3002 \u5d4c\u5165\u8bed\u53e5\u4e0d\u9700\u8981\u7528\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5982\u679a\u4e3e\u5e38\u91cf\u7684\u503c\uff0c\u4f4d\u57df\u7684\u5bbd\u5ea6\u6216\u8005\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\u7684\u521d\u59cb\u503c\u3002","title":"3.18 \u8868\u8fbe\u5f0f\u4e2d\u7684\u8bed\u53e5\u548c\u58f0\u660e"},{"location":"Expressions-And-Operators/#Operator-Precedence","text":"\u5f53\u8868\u8fbe\u5f0f\u5305\u542b\u591a\u4e2a\u64cd\u4f5c\u7b26\uff0c\u5982 a + b * f() \uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4f1a\u6839\u636e \u4f18\u5148\u7ea7 \u89c4\u5219\u8fdb\u884c\u5206\u7ec4\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u542b\u4e49\u5c31\u662f\u5148\u6ca1\u6709\u53c2\u6570\u5730\u8c03\u7528\u51fd\u6570 f \uff0c\u7528\u7ed3\u679c\u4e58\u4ee5 b \uff0c\u7136\u540e\u628a\u7ed3\u679c\u52a0\u4e0a a \u3002\u8fd9\u662f C \u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u89c4\u5219\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u3002 \u4e0b\u9762\u662f\u8868\u8fbe\u5f0f\u7c7b\u578b\u5217\u8868\uff0c\u8981\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u6709\u65f6 2 \u4e2a\u6216\u591a\u4e2a\u8fd0\u7b97\u7b26\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\uff1b\u6240\u6709\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u7ed3\u5408\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\u3002 \u51fd\u6570\u8c03\u7528\uff0c\u6570\u7ec4\u4e0b\u6807\uff0c\u548c\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u8868\u8fbe\u5f0f \u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u5305\u62ec\u903b\u8f91\u975e\uff0c\u6309\u4f4d\u53d6\u53cd\uff0c\u81ea\u589e\uff0c\u81ea\u51cf\uff0c\u4e00\u5143\u6b63\uff0c\u4e00\u5143\u8d1f\uff0c\u95f4\u63a5\u8fd0\u7b97\u7b26\uff0c\u5730\u5740\u8fd0\u7b97\u7b26\uff0c\u7c7b\u578b\u8f6c\u6362\u548c sizeof \u8868\u8fbe\u5f0f\u3002\u5f53\u591a\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\u8fde\u7740\u5199\uff0c\u540e\u9762\u7684\u662f\u5d4c\u5957\u5728\u91cc\u9762\u7684\uff1a!-x \u76f8\u5f53\u4e8e !(-x) \u4e58\u3001\u9664\u548c\u53d6\u6a21\u8868\u8fbe\u5f0f \u52a0\u548c\u51cf\u8868\u8fbe\u5f0f \u79fb\u4f4d\u8868\u8fbe\u5f0f \u5927\u4e8e\uff0c\u5c0f\u4e8e\uff0c\u5927\u4e8e\u7b49\u4e8e\u548c\u5c0f\u4e8e\u7b49\u4e8e\u8868\u8fbe\u5f0f \u7b49\u4e8e\u548c\u4e0d\u7b49\u4e8e\u8868\u8fbe\u5f0f \u6309\u4f4d\u4e0e\u8868\u8fbe\u5f0f \u6309\u4f4d\u5f02\u6216\u8868\u8fbe\u5f0f \u6309\u4f4d\u6216\u8868\u8fbe\u5f0f \u903b\u8f91\u4e0e\u8868\u8fbe\u5f0f \u903b\u8f91\u6216\u8868\u8fbe\u5f0f \u6761\u4ef6\u8868\u8fbe\u5f0f\uff08\u4f7f\u7528 ?:\uff09\u3002\u5f53\u4f7f\u7528\u5b50\u8868\u8fbe\u5f0f\u65f6\uff0c\u5b50\u8868\u8fbe\u5f0f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97 \u6240\u6709\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u5305\u62ec\u7ec4\u5408\u8d4b\u503c\u3002\u5f53\u591a\u4e2a\u8d4b\u503c\u8bed\u53e5\u4f5c\u4e3a\u4e00\u4e2a\u5927\u7684\u8868\u8fbe\u5f0f\u7684\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\uff0c\u4ed6\u4eec\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\u3002 \u9017\u53f7\u8fd0\u7b97\u7b26\u8868\u8fbe\u5f0f \u4e0a\u9762\u8fd9\u4e2a\u5217\u8868\u6709\u70b9\u5e72\uff0c\u663e\u5f97\u5f88\u76f4\u63a5\uff0c\u4f46\u5b83\u9690\u85cf\u4e86\u4e00\u4e9b\u9677\u9631\u3002\u4f8b\u5982\uff1a foo = *p++; \u8fd9\u91cc p \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u526f\u4f5c\u7528\u88ab\u81ea\u589e\uff0c\u4f46\u662f foo \u5f97\u5230\u7684\u662f *(p++) \u7684\u503c\uff0c\u800c\u4e0d\u662f (*p)++ \uff0c\u56e0\u4e3a\u4e00\u5143\u64cd\u4f5c\u7b26\u81ea\u53f3\u5411\u5de6\u7ed3\u5408\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5173\u4e8e C \u4f18\u5148\u7ea7\u8868\u7684\u6f5c\u5728\u7684\u9677\u9631\u3002\u56e0\u6b64\uff0c\u5f53\u8bfb\u8005\u6709\u4efb\u4f55\u8bef\u89e3\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u5e94\u8be5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u6d88\u9664\u8bef\u89e3\u3002","title":"3.19 \u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7"},{"location":"Expressions-And-Operators/#Order-of-Evaluation","text":"\u5728 C \u91cc\u4f60\u4e0d\u77e5\u5047\u5b9a\u591a\u4e2a\u5b50\u8868\u8fbe\u5f0f\u4f1a\u6309\u7167\u770b\u8d77\u6765\u7684\u81ea\u7136\u5e8f\u6765\u6c42\u503c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u8868\u8fbe\u5f0f ++a * f() \uff0c\u81ea\u589e a \u662f\u5728\u8c03\u7528\u51fd\u6570 f \u4e4b\u524d\u8fd8\u662f\u4e4b\u540e\uff1f\u7f16\u8bd1\u5668\u4e5f\u6709\u53ef\u80fd\u7528\u5176\u4ed6\u987a\u5e8f\u6c42\u503c\uff0c\u6240\u4ee5\u4f60\u4e0d\u80fd\u505a\u4efb\u4f55\u5047\u8bbe\u3002 \u672c\u624b\u518c\u62bd\u8c61\u5730\u89e3\u91ca\u4e86 C \u8bed\u8a00\u7684\u8bed\u4e49\u3002\u7136\u800c\uff0c\u5177\u4f53\u7f16\u8bd1\u5668\u5728\u5177\u4f53\u8ba1\u7b97\u673a\u4e0a\u5c06\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u6307\u5b9a\u52a8\u4f5c\uff0c\u5e76\u4e14\u53ef\u80fd\u4e3a\u4e86\u6548\u7387\u6539\u53d8\u6267\u884c\u987a\u5e8f\u3002\u4f60\u5199\u7684\u7a0b\u5e8f\u548c\u8ba1\u7b97\u673a\u5b9e\u9645\u505a\u7684\u4e8b\u60c5\u4e4b\u95f4\u7684\u5bf9\u5e94\u7531\u526f\u4f5c\u7528\u548c\u5e8f\u5217\u70b9\u800c\u5b9a\u3002","title":"3.20 \u6c42\u503c\u987a\u5e8f"},{"location":"Expressions-And-Operators/#Side-Effects","text":"\u526f\u4f5c\u7528\u662f\u6307\uff1a \u8bbf\u95ee\u4e00\u4e2a volatile \u5bf9\u8c61 \u4fee\u6539\u4e00\u4e2a\u5bf9\u8c61 \u4fee\u6539\u4e00\u4e2a\u6587\u4ef6 \u8c03\u7528\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u9762\u4efb\u4f55\u4e00\u4e2a\u526f\u4f5c\u7528\u7684\u51fd\u6570 \u8fd9\u4e9b\u5728\u672c\u8d28\u4e0a\u662f\u5916\u90e8\u53ef\u89c1\u7684\u8fd0\u884c\u7a0b\u5e8f\u7684\u526f\u4f5c\u7528\u3002\u88ab\u79f0\u4e3a\u526f\u4f5c\u7528\u662f\u56e0\u4e3a\u5b83\u4eec\u662f\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u6548\u679c\uff0c\u800c\u4e0d\u662f\u8be5\u8868\u8fbe\u5f0f\u5b9e\u9645\u7684\u7ed3\u679c\u503c\u3002 \u7f16\u8bd1\u5668\u5141\u8bb8\u6267\u884c\u7a0b\u5e8f\u7684\u64cd\u4f5c\u987a\u5e8f\u548c\u6e90\u6587\u4ef6\u4e2d\u6697\u542b\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u53ea\u8981\u5728\u6700\u540e\u6240\u6709\u9700\u8981\u7684\u526f\u4f5c\u7528\u90fd\u53d1\u751f\u4e86\u3002\u7f16\u8bd1\u5668\u4e5f\u5141\u8bb8\u5b8c\u5168\u7701\u7565\u4e00\u4e9b\u8ba1\u7b97\uff1b\u4f8b\u5982\uff0c\u5b83\u5141\u8bb8\u8df3\u8fc7\u8ba1\u7b97\u90e8\u5206\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u53ef\u4ee5\u786e\u5b9a\u8be5\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4e0d\u4f1a\u88ab\u7528\u5230\u5e76\u4e14\u8ba1\u7b97\u8be5\u8868\u8fbe\u5f0f\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u9700\u8981\u7684\u526f\u4f5c\u7528\u3002","title":"3.20.1 \u526f\u4f5c\u7528"},{"location":"Expressions-And-Operators/#Sequence-Points","text":"\u7f16\u8bd1\u5668\u53e6\u5916\u7684\u8981\u6c42\u662f\u526f\u4f5c\u7528\u5e94\u8be5\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u53d1\u751f\u3002\u4e3a\u4e86\u63d0\u4f9b\u8fd9\u4e2a\u800c\u4e0d\u4f1a\u8fc7\u5ea6\u7ea6\u675f\u7f16\u8bd1\u5668\uff0cC89 \u548c C99 \u6807\u51c6\u6307\u5b9a\u4e86\u4e00\u4e9b\u5e8f\u5217\u70b9\u3002\u4e00\u4e2a\u5e8f\u5217\u70b9\u5c31\u662f\u4e0b\u9762\u5176\u4e2d\u4e4b\u4e00\uff1a \u4e00\u6b21\u51fd\u6570\u8c03\u7528\uff08\u5728\u53c2\u6570\u88ab\u8ba1\u7b97\u5b8c\u6210\u4e4b\u540e\uff09 \u4e0e\u8fd0\u7b97\u7b26 && \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u6216\u8fd0\u7b97\u7b26 || \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u9017\u53f7\u8fd0\u7b97\u7b26 , \u7684\u5de6\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u4e09\u76ee\u8fd0\u7b97\u7b26 a ? b : c \u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u8ba1\u7b97\u5b8c\u6210 \u5b8c\u6574\u7684\u58f0\u660e\u7ed3\u675f[^2] \u4e00\u4e2a\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u7ed3\u675f \u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u7ed3\u675f\uff08\u5982\uff0c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u540e\u8ddf ; \uff09 if \u6216 switch \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f while \u6216 do \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f for \u8bed\u53e5\u7684 3 \u4e2a\u63a7\u5236\u8868\u8fbe\u5f0f\u4efb\u4f55\u4e00\u4e2a\u7ed3\u675f return \u8bed\u53e5\u4e2d\u7684\u8868\u8fbe\u5f0f\u7ed3\u675f \u5728\u5e93\u51fd\u6570\u9a6c\u4e0a\u8fd4\u56de\u4e4b\u524d \u5728\u548c\u683c\u5f0f\u5316 I/O \u76f8\u5173\u7684\uff08\u4f8b\u5982\u5e38\u7528\u7684 strftime \u6216 printf \u548c scanf \u7cfb\u5217\u51fd\u6570\uff09\u52a8\u4f5c\u4e4b\u540e \u9a6c\u4e0a\u8c03\u7528\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\u4e4b\u524d\u548c\u4e4b\u540e\uff08\u5982 qsort \uff09 \u5728\u4e00\u4e2a\u5e8f\u5217\u70b9\uff0c\u4e4b\u524d\u8868\u8fbe\u5f0f\u8ba1\u7b97\u7684\u526f\u4f5c\u7528\u5fc5\u987b\u90fd\u5b8c\u6210\uff0c\u5e76\u4e14\u540e\u9762\u8ba1\u7b97\u7684\u526f\u4f5c\u7528\u8fd8\u6ca1\u6709\u53d1\u751f\u3002 \u8fd9\u770b\u8d77\u6765\u6709\u70b9\u96be\u7406\u89e3\uff0c\u4f46\u662f\u53ef\u4ee5\u6362\u4e2a\u65b9\u5f0f\u53bb\u601d\u8003\u5b83\u3002\u60f3\u8c61\u4e00\u4e0b\u4f60\u5199\u4e86\u4e00\u4e2a\u5e93\uff08\u5176\u4e2d\u4e00\u4e9b\u51fd\u6570\u5f0f\u5916\u90e8\u7684\uff0c\u4e00\u4e9b\u4e0d\u662f\uff09\uff0c\u7136\u540e\u7f16\u8bd1\u5b83\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u4eba\u5728\u4ed6\u4eec\u7684\u4ee3\u7801\u4e2d\u8c03\u7528\u4f60\u7684\u51fd\u6570\u3002\u4e0a\u9762\u7684\u5b9a\u4e49\u5219\u786e\u4fdd\u4e86\uff0c\u5728\u4ed6\u4eec\u8c03\u7528\u4f60\u7684\u51fd\u6570\u65f6\uff0c\u4ed6\u4eec\u4f20\u8fdb\u6765\u7684\u6570\u636e\u62e5\u6709\u548c\u62bd\u8c61\u673a\u6307\u5b9a\u7684\u884c\u4e3a\u4e00\u81f4\u7684\u503c\uff0c\u5e76\u4e14\u4efb\u4f55\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u4e5f\u90fd\u6709\u4e00\u4e2a\u548c\u62bd\u8c61\u673a\u4fdd\u6301\u4e00\u81f4\u7684\u72b6\u6001\u3002\u5305\u62ec\u4f7f\u7528\u6307\u9488\u6765\u8bbf\u95ee\u6570\u636e\uff08\u5982\uff0c\u4e0d\u53ea\u662f\u51fd\u6570\u53c2\u6570\u548c\u62e5\u6709\u5916\u90e8\u8fde\u63a5\u7684\u6807\u8bc6\u7b26\uff09\u3002 \u4e0a\u9762\u662f\u8f7b\u5fae\u7684\u7b80\u5316\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u5728\u8fde\u63a5\u65f6\u8fdb\u884c\u771f\u4e2a\u7a0b\u5e8f\u7684\u4f18\u5316\u3002\u7136\u800c\u91cd\u8981\u7684\u662f\uff0c\u5c3d\u7ba1\u53ef\u80fd\u6267\u884c\u4f18\u5316\uff0c\u4f46\u7a0b\u5e8f\u4e2d\u53ef\u89c1\u7684\u526f\u4f5c\u7528\u5fc5\u987b\u4fdd\u6301\u76f8\u540c\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u662f\u7531\u62bd\u8c61\u673a\u4ea7\u751f\u7684\u4e00\u6837\u3002","title":"3.20.2 \u5e8f\u5217\u70b9"},{"location":"Expressions-And-Operators/#Sequence-Points-Constrain-Expressions","text":"\u4ee3\u7801\u6bb5 i = i + 1; \u7ecf\u5e38\u51fa\u73b0\u5728\u7a0b\u5e8f\u91cc\u3002\u7136\u800c\uff0c\u4e0b\u9762\u8fd9\u4e2a\u76f8\u4f3c\u7684\u4ee3\u7801\u6bb5 i = ++i + 1; \u5c31\u6709\u70b9\u96be\u7406\u89e3\u4e86\uff1b\u6700\u540e i \u7684\u503c\u662f\u591a\u5c11\uff1fC \u6807\u51c6\uff08\u5305\u62ec C89 \u548c C99\uff09\u90fd\u7981\u6b62\u8fd9\u79cd\u5199\u6cd5\u3002 \u5728 2 \u4e2a\u5e8f\u5217\u70b9\u4e4b\u95f4\uff0c \u4e00\u4e2a\u5bf9\u8c61\u53ef\u80fd\u6700\u591a\u901a\u8fc7\u8868\u8fbe\u5f0f\u6c42\u503c\u6539\u53d8\u5b83\u81ea\u5df1\u7684\u503c\u4e00\u6b21 \u5bf9\u8c61\u4e4b\u524d\u7684\u503c\u5e94\u8be5\u4ec5\u88ab\u8bfb\u51fa\u6765\u7528\u4e8e\u8ba1\u7b97\u8981\u88ab\u5b58\u50a8\u7684\u503c \u7b2c\u4e00\u4e2a\u6761\u4ef6\u7981\u6b62\u50cf foo(x=2, ++x) \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u3002\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u7981\u6b62\u50cf a[i++] = i \u7684\u8868\u8fbe\u5f0f\u3002 int x=0; foo(++x, ++x) \u5728\u5408\u89c4\u7684\u7a0b\u5e8f\u4e2d\u4e0d\u88ab\u5141\u8bb8\uff1b\u5728\u53c2\u6570\u8ba1\u7b97\u5b8c\u6210\u524d\u4fee\u6539\u4e86 x \u4e24\u6b21\u3002 int x=0; bar((++x,++x)) \u5141\u8bb8\uff1b\u51fd\u6570 bar \u53ea\u8981\u4e00\u4e2a\u53c2\u6570\uff08\u4f20\u8fc7\u53bb\u7684\u662f\u503c 2\uff09\uff0c\u5e76\u4e14\u5728\u9017\u53f7\u8fd0\u7b97\u7b26\u90a3\u91cc\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9 *p++ || *p++ \u5141\u8bb8\uff1b || \u662f\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 int x = 1, y = x++; \u5141\u8bb8\uff1b\u5728\u5b8c\u6574\u58f0\u660e x \u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 x=2; x++; \u5141\u8bb8\uff1b\u5728\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u7ed3\u675f\u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 if (x++ > MAX) x = 0; \u5141\u8bb8\uff1b\u5728 if [^3] \u8bed\u53e5\u7684\u63a7\u5236\u8868\u8fbe\u5f0f\u7ed3\u675f\u4e4b\u540e\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 (x=y) ? ++x : x--; \u5141\u8bb8\uff1b\u5728 ? \u4e4b\u524d\u6709\u4e00\u4e2a\u5e8f\u5217\u70b9\uff0c\u5e76\u4e14\u540e\u9762\u7684 2 \u4e2a\u8868\u8fbe\u5f0f\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u8ba1\u7b97\u3002 int *p=malloc(sizeof(*p)), *q=p; *p=foo(); bar((*p)++,(*q)++); \u4e0d\u5141\u8bb8\uff1b p \u6307\u5411\u7684\u5bf9\u8c61\u5728\u51fd\u6570 bar \u7684\u53c2\u6570\u8ba1\u7b97\u5b8c\u6210\u524d\u88ab\u4fee\u6539\u4e86 2 \u6b21\u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u6b21\u662f\u901a\u8fc7 p \u4fee\u6539\uff0c\u53e6\u4e00\u6b21\u901a\u8fc7 q \u4fee\u6539\uff0c\u5b83\u4eec\u662f\u4e0d\u76f8\u5e72\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6307\u5411\u4e86\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u4ecb\u7ecd\u6c42\u503c\u987a\u5e8f\u7684\u4f8b\u5b50 ++a * f() \u3002\u5047\u8bbe\u5b9e\u9645\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a static int a = 1; static int f (void) { a = 100; return 3; } int foo (void) { return ++a * f(); } \u8fd9\u4e2a\u4ee3\u7801\u5728\u6807\u51c6\u5408\u89c4\u7684\u7a0b\u5e8f\u4e2d\u5141\u8bb8\u5417\uff1f\u5c3d\u7ba1\u5728 foo \u4e2d\u7684\u8868\u8fbe\u5f0f\u4fee\u6539 a 2 \u6b21\uff0c\u4f46\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u8ba9\u6211\u4eec\u770b 2 \u4e2a\u53ef\u80fd\u7684\u60c5\u51b5\u3002 \u53f3\u8fb9\u7684\u64cd\u4f5c\u6570 f() \u5148\u8ba1\u7b97 \u65e2\u7136 f \u8fd4\u56de\u4e00\u4e2a\u503c\u800c\u4e0d\u662f void \uff0c\u90a3\u5b83\u80af\u5b9a\u6709\u4e00\u4e2a return \u8868\u8fbe\u5f0f\u3002\u90a3\u5728 f \u4e2d\u4fee\u6539 a \u548c\u6c42\u503c\u5de6\u64cd\u4f5c\u6570\u4e4b\u95f4\u5c31\u6709\u4e86\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 2. \u5de6\u64cd\u4f5c\u6570 ++a \u5148\u6c42\u503c \u9996\u5148\uff0c a \u88ab\u81ea\u589e\u3002\u7136\u540e f \u7684\u53c2\u6570\uff08\u8fd9\u91cc\u6ca1\u6709\uff09\u88ab\u6c42\u503c\u3002\u90a3\u4e48\u8fd9\u91cc\u5728 f \u5b9e\u9645\u8fd0\u884c\u4e4b\u524d\u6709\u4e86\u4e00\u4e2a\u5e8f\u5217\u70b9\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u6807\u51c6\u5408\u89c4\u7684\u3002\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u9762\u7684\u53c2\u6570\u5b9e\u9645\u4e0a\u4e0d\u4f9d\u8d56\u4e8e\u51fd\u6570 f \u5185\u90e8\u3002\u5b83\u503c\u4f9d\u8d56\u4e8e\u5728\u5e8f\u5217\u70b9\u7ed3\u675f\u65f6\u5305\u542b\u7684\u5185\u5bb9--\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a return \u8bed\u53e5\uff0c\u6b64\u5916\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8bed\u53e5\u6216\u5b8c\u6574\u7684\u58f0\u660e\u4e5f\u53ef\u4ee5\u3002 \u7136\u800c\uff0c\u6267\u884c\u8be5\u4ee3\u7801\u7684\u7ed3\u679c\u53d6\u51b3\u4e8e * \u7684\u64cd\u4f5c\u6570\u7684\u6c42\u503c\u987a\u5e8f\u3002\u5982\u679c\u5de6\u64cd\u4f5c\u6570\u5148\u6c42\u503c\uff0c foo \u8fd4\u56de 6.\u5426\u5219\uff0c foo \u8fd4\u56de 303\u3002C \u6807\u51c6\u5e76\u6ca1\u6709\u6307\u5b9a\u64cd\u4f5c\u6570\u8be5\u4ee5\u4f55\u79cd\u987a\u5e8f\u6c42\u503c\uff0c\u5e76\u4e14\u65e2\u4e0d\u8981\u6c42\u7f16\u8bd1\u5668\u6307\u660e\u987a\u5e8f\u4e5f\u4e0d\u8981\u6c42\u7f16\u8bd1\u5668\u53ea\u7528\u4e00\u79cd\u987a\u5e8f\u3002\u4ee3\u7801\u7684\u6548\u679c\u4e3a\u6307\u5b9a\uff0c\u610f\u5473\u7740\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u60c5\u51b5\u53d1\u751f\uff0c\u4f46 C \u6807\u51c6\u5e76\u6ca1\u6709\u8bf4\u54ea\u4e00\u79cd\u3002","title":"3.20.3 \u5e8f\u5217\u70b9\u7ea6\u675f\u8868\u8fbe\u5f0f"},{"location":"Expressions-And-Operators/#Sequence-Points-and-Signal-Delivery","text":"\u4fe1\u53f7\u4e3b\u8981\u8bb0\u5f55\u5728 GNU C Library \u624b\u518c\u91cc\uff0c\u5c3d\u7ba1 C \u6807\u51c6\u628a\u7f16\u8bd1\u5668\u548c C \u5e93\u4e00\u8d77\u770b\u505a\u662f\u5b9e\u73b0\u3002 \u4fe1\u53f7\u63a5\u6536\u4f1a\u53d1\u751f\u5728 2 \u4e2a\u5e8f\u5217\u70b9\u4e4b\u95f4\u3002\u524d\u9762\u5e8f\u5217\u70b9\u4e4b\u524d\u7684 volatile \u5bf9\u8c61\u7684\u526f\u4f5c\u7528\u5c06\u5df2\u7ecf\u5b8c\u6210\uff0c\u4f46\u5176\u4ed6\u66f4\u65b0\u53ef\u80fd\u8fd8\u6ca1\u6709\u53d1\u751f\u3002\u8fd9\u751a\u81f3\u4f1a\u51fa\u73b0\u5728\u76f4\u63a5\u8d4b\u503c\u8bed\u53e5\uff0c\u5982\u679c x = 0; \uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8bed\u53e5\u751f\u6210\u4ee3\u7801\u53ef\u80fd\u5305\u542b\u4e0d\u6b62\u4e00\u6761\u6307\u4ee4\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5b83\u53ef\u80fd\u88ab\u4fe1\u53f7\u4f20\u9012\u4e2d\u65ad\u3002 C \u6807\u51c6\u5bf9\u4f55\u79cd\u6570\u636e\u8bbf\u95ee\u53ef\u4ee5\u51fa\u73b0\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u505a\u4e86\u76f8\u5f53\u5927\u7684\u7ea6\u675f\u3002\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528 auto \u53d8\u91cf\uff0c\u4f46\u6839\u636e\u662f\u8bfb\u6216\u5199\u5176\u4ed6\u5bf9\u8c61\uff0c\u5fc5\u987b\u662f volatile sig_atomic_t \u3002 volatile \u7c7b\u578b\u9650\u5236\u7b26\u786e\u4fdd\u4e86\u8bbf\u95ee\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u53d8\u91cf\u4e0d\u4f1a\u8de8\u8d8a\u5e8f\u5217\u70b9\uff1b\u5e76\u4e14\u4f7f\u7528 sig_atomic_t \u7c7b\u578b\u53ef\u4ee5\u786e\u4fdd\u5728\u4fe1\u53f7\u4f20\u9012\u65f6\u5bf9\u53d8\u91cf\u7684\u4fee\u6539\u662f\u539f\u5b50\u7684\u3002 POSIX \u6807\u51c6\u4e5f\u5141\u8bb8\u4e00\u5c0f\u90e8\u5206\u5e93\u51fd\u6570\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u88ab\u8c03\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u5b89\u5168\u7684\u3002\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u53ea\u5728 POSIX \u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u4f60\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u4fe1\u53f7\u5904\u7406\u91cc\u9762\u8c03\u7528\u5b83\u4eec\u3002","title":"3.20.4 \u5e8f\u5217\u70b9\u548c\u4fe1\u53f7\u4f20\u9012"},{"location":"Function/","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u6765\u5c06\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5206\u79bb\u51fa\u6765\uff0c\u4f5c\u4e3a\u5355\u72ec\u7684\u5b50\u8fc7\u7a0b\u3002\u8981\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u81f3\u5c11\u5fc5\u987b\u8981\u5b9a\u4e49\u5b83\u3002\u663e\u5f0f\u51fd\u6570\u58f0\u660e\u662f\u4e2a\u597d\u4e60\u60ef\uff1b\u4f60\u53ef\u4ee5\u4e0d\u58f0\u660e\uff0c\u4f46\u9ed8\u8ba4\u7684\u9690\u5f0f\u58f0\u660e\u53ef\u80fd\u5339\u914d\u4e0d\u5230\u51fd\u6570\u5b9a\u4e49\u3002\u8fd9\u6837\u4f60\u6536\u5230\u7f16\u8bd1\u65f6\u8b66\u544a\u3002 \u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u53eb\u505a main \u7684\u51fd\u6570\u3002\u8fd9\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u3002 5.1 \u51fd\u6570\u58f0\u660e \u00b6 \u51fd\u6570\u58f0\u660e\u6307\u5b9a\u4e86\u51fd\u6570\u7684\u540d\u5b57\u3001\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u8981\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a return-type function-name (parameter-list); return-type \u6307\u793a\u4e86\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7684\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e\u4e00\u4e2a\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\u7684\u51fd\u6570\u3002 function-name \u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u3002\uff08\u8be6\u89c1 \u6807\u8bc6\u7b26 \uff09 parameter-list \u5305\u542b 0 \u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u7528\u9017\u53f7\u9694\u5f00\u3002\u4e00\u4e2a\u53c2\u6570\u901a\u5e38\u5305\u542b\u6570\u636e\u7c7b\u578b\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u540d\u5b57\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u62e5\u6709\u53ef\u53d8\u53c2\u6570\u4e2a\u6570\u7684\u51fd\u6570\uff08\u8be6\u89c1 \u53ef\u53d8\u53c2\u6570\u5217\u8868 \uff09\uff0c\u6216\u8005\u4f7f\u7528 void \u58f0\u660e\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u3002\u4e0d\u5199 parameter-list \u7684\u8bdd\u4e5f\u8868\u793a\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u6700\u597d\u4f7f\u7528 void \u6307\u660e\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u5e26\u6709 2 \u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff1a int foo (int, double); \u5982\u679c\u8981\u7ed9\u4e00\u4e2a\u53c2\u6570\u52a0\u4e0a\u540d\u5b57\uff0c\u90a3\u540d\u5b57\u8981\u7d27\u8ddf\u6570\u636e\u7c7b\u578b\uff1a int foo (int x, double y); \u53c2\u6570\u540d\u5b57\u53ef\u4ee5\u662f\u4efb\u610f\u6807\u8bc6\u7b26\uff08\u8be6\u89c1 \u6807\u8bc6\u7b26 \uff09\uff0c\u5e76\u4e14\u5982\u679c\u6709\u591a\u4e2a\u53c2\u6570\u4f60\u4e0d\u80fd\u5728\u4e00\u4e2a\u58f0\u660e\u91cc\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\u3002\u8fd9\u91cc\u7684\u53c2\u6570\u540d\u5b57\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u4e2d\u7684\u540d\u5b57\u5339\u914d\u3002 \u4f60\u8981\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u4e4b\u524d\u58f0\u660e\u5b83\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u5728\u4f7f\u7528\u8be5\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u4e2d\u7528 #include \u6307\u4ee4\u6765\u5305\u542b\u8be5\u51fd\u6570\u58f0\u660e\u3002 5.2 \u51fd\u6570\u5b9a\u4e49 \u00b6 \u51fd\u6570\u5b9a\u4e49\u6307\u660e\u8be5\u51fd\u6570\u5b9e\u9645\u90fd\u5e72\u4ec0\u4e48\u3002\u51fd\u6570\u5b9a\u4e49\u5305\u542b\u7684\u4fe1\u606f\u6709\uff1a\u51fd\u6570\u540d\uff0c\u8fd4\u56de\u7c7b\u578b\uff0c\u53c2\u6570\u7684\u7c7b\u578b\u548c\u540d\u5b57\uff0c\u4ee5\u53ca\u51fd\u6570\u4f53\u3002\u51fd\u6570\u4f53\u662f\u4e00\u7cfb\u5217\u7531\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u7684\u8bed\u53e5\uff1b\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff08\u8be6\u89c1 \u4ee3\u7801\u5757 \uff09\u3002 \u5176\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a return-type function-name (parameter-list) { function-body } return-type \u548c function-name \u548c \u51fd\u6570\u58f0\u660e\u4e2d\u7684\u662f\u4e00\u6837\u7684\uff08\u8be6\u89c1 \u51fd\u6570\u58f0\u660e \uff09\u3002 parameter-list \u57fa\u672c\u548c\u51fd\u6570\u58f0\u660e\u4e2d\u7684\u4e00\u6837\uff08\u8be6\u89c1 \u51fd\u6570\u58f0\u660e \uff09\uff0c\u9664\u4e86\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u4f60\u5fc5\u987b\u8981\u6307\u5b9a\u53c2\u6570\u540d\u5b57\u3002 \u4e0b\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 -- \u5b83\u9700\u8981 2 \u4e2a\u6574\u578b\u53c2\u6570\uff0c\u5e76\u628a\u5b83\u4eec\u7684\u548c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff1a int add_values (int x, int y) { return x + y; } \u4e3a\u4e86\u517c\u5bb9 C \u8bed\u8a00\u7684\u521d\u59cb\u8bbe\u8ba1\uff0c\u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u7684\u53f3\u62ec\u53f7\u540e\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\u3002\u5982\u4e0b\uff1a int add_values (x, y) int x, int y; { return x + y; } \u7136\u800c\uff0c\u6211\u4eec\u5f3a\u70c8\u4e0d\u63a8\u8350\u8fd9\u79cd\u4ee3\u7801\u98ce\u683c\uff1b\u8fd9\u6837\u5199\u4f1a\u9020\u6210\u7ec6\u5fae\u7684\u7c7b\u578b\u8f6c\u6362\u95ee\u9898\uff0c\u53ca\u5176\u4ed6\u95ee\u9898\u3002 5.3 \u8c03\u7528\u51fd\u6570 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u5b57\u6765\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u4e14\u8981\u63d0\u4f9b\u5176\u9700\u8981\u7684\u53c2\u6570\u3002\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a function-name (parameters) \u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u8bed\u53e5\uff0c\u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f5c\u4e3a\u5b8c\u6574\u8bed\u53e5\u7684\u4f8b\u5b50\uff1a foo (5); \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 foo \u88ab\u8c03\u7528\uff0c\u5e76\u4f20\u7ed9\u4e86\u53c2\u6570 5 \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f5c\u4e3a\u5b50\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50\uff1a a = square (5); \u5047\u8bbe\u51fd\u6570 square \u5e73\u65b9\u4e86\u5b83\u7684\u53c2\u6570\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u628a\u503c 25 \u8d4b\u7ed9 a \u3002 \u5982\u679c\u53c2\u6570\u5217\u8868\u4e0d\u53ea\u4e00\u4e2a\u53c2\u6570\uff0c\u4f60\u8981\u7528\u9017\u53f7\u5206\u5272\uff1a a = quux (5, 10); 5.4 \u51fd\u6570\u53c2\u6570 \u00b6 \u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f -- \u4e00\u4e2a\u5e38\u91cf\u503c\u3001\u4e00\u4e2a\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3001\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u6216\u8005\u7531\u5b83\u4eec\u6784\u6210\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u5728\u51fd\u6570\u4f53\u5185\uff0c\u8fd9\u4e9b\u53c2\u6570\u662f\u4f60\u4f20\u8fdb\u53bb\u7684\u503c\u7684\u5c40\u90e8\u62f7\u8d1d\uff1b\u4f60\u4e0d\u80fd\u901a\u8fc7\u6539\u53d8\u8be5\u5c40\u90e8\u62f7\u8d1d\u6765\u4fee\u6539\u4f60\u4f20\u8fc7\u53bb\u7684\u503c\u3002 int x = 23; foo (x); \u2026 /* Definition for function foo. */ int foo (int a) { a = 2 * a; return a; } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u53c2\u6570 a \u5728\u51fd\u6570 foo \u4e2d\u88ab\u4fee\u6539\uff0c\u4f46\u4f60\u4f20\u8fdb\u53bb\u53d8\u91cf x \u7684\u503c\u5e76\u6ca1\u6709\u4fee\u6539\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4fee\u6539 x \u7684\u539f\u59cb\u503c\uff0c\u90a3\u4f60\u5fc5\u987b\u628a\u51fd\u6570\u8c03\u7528\u5199\u8fdb\u8d4b\u503c\u8bed\u53e5\uff1a x = foo (x); \u5982\u679c\u4f60\u4f20\u8fdb\u53bb\u7684\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u6307\u9488\uff09\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8bbf\u95ee\uff08\u548c\u4fee\u6539\uff09\u5b58\u5728\u8be5\u5730\u5740\u7684\u6570\u636e\u3002\u8fd9\u76f8\u5f53\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u5f15\u7528\u4f20\u9012\uff0c\u4f46\u5e76\u4e0d\u76f8\u540c\uff1a\u5185\u5b58\u5730\u5740\u53ea\u662f\u4e00\u4e2a\u503c\uff0c\u5c31\u50cf\u5176\u4ed6\u503c\u4e00\u6837\uff0c\u5b83\u81ea\u5df1\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u3002\u4f20\u4e00\u4e2a\u6307\u9488\u548c\u4f20\u4e00\u4e2a\u6574\u6570\u7684\u5dee\u522b\u5728\u4e8e\u4f60\u60f3\u8981\u5728\u51fd\u6570\u4e2d\u505a\u4ec0\u4e48\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f7f\u7528\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u6765\u8c03\u7528\u51fd\u6570\uff1a void foo (int *x) { *x = *x + 42; } \u2026 int a = 15; foo (&a); \u8fd9\u4e2a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u662f\u6307\u5411 int \u7c7b\u578b\u7684\u6307\u9488\u3002\u6211\u4eec\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u8981\u4f20\u7ed9\u5b83\u4e00\u4e2a int \u7c7b\u578b\u53d8\u91cf\u7684\u5730\u5740\u3002\u5728\u51fd\u6570\u7528\u89e3\u5f15\u7528\u8fd9\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u548c\u4fee\u6539\u5b58\u50a8\u5728\u8be5\u5730\u5740\u7684\u503c\u3002\u4e0a\u9762\u5c31\u628a a \u7684\u503c\u4fee\u6539\u4e3a\u4e86 57 \u3002 \u5373\u4f7f\u4f60\u4e0d\u60f3\u6539\u53d8\u5b58\u50a8\u5728\u4e00\u4e2a\u5730\u5740\u7684\u503c\uff0c\u5982\u679c\u4f60\u8981\u4f20\u9012\u7684\u53d8\u91cf\u7c7b\u578b\u975e\u5e38\u5927\uff0c\u901a\u5e38\u4f20\u9012\u6307\u9488\u5c31\u6bd4\u4f20\u9012\u53d8\u91cf\u672c\u8eab\u6709\u7528\uff0c\u5c24\u5176\u5728\u4f60\u9700\u8981\u8282\u7701\u5185\u5b58\u6216\u8005\u51cf\u5c11\u53c2\u6570\u62f7\u8d1d\u7684\u6d88\u8017\u3002\u4f8b\u5982\uff1a struct foo { int x; float y; double z; }; void bar (const struct foo *a); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9664\u975e\u4f60\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u5185\u5b58\u5f88\u5927\uff08\u4e0d\u5728\u4e4e\u5185\u5b58\u6d88\u8017\uff09\uff0c\u4f20\u9012\u6307\u5411\u8be5\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u6307\u9488\u4f7f\u7528\u7684\u5185\u5b58\u8981\u6bd4\u4f20\u7edf\u7ed3\u6784\u4f53\u5b9e\u4f8b\u672c\u8eab\u8981\u5c11\u5f97\u591a\u3002 \u6570\u7ec4\u603b\u662f\u4f1a\u4f5c\u4e3a\u6307\u9488\u4f20\u9012\u3002 void foo (int a[]); \u2026 int x[100]; foo (x); \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8c03\u7528\u5e26\u6709\u53c2\u6570 a \u7684\u51fd\u6570 foo \u4e0d\u4f1a\u590d\u5236\u6574\u4e2a\u6570\u7ec4\u5230 foo \u91cc\u9762\u7684\u5c40\u90e8\u53c2\u6570\uff0c\u800c\u662f\u5c06 x \u4f5c\u4e3a\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570 x \u7684\u6307\u9488\u4f20\u8fc7\u53bb\u3002\u8981\u6ce8\u610f\uff0c\u4f60\u5728\u51fd\u6570\u91cc\u9762\u4e0d\u80fd\u4f7f\u7528 sizeof \u6765\u6c42\u6570\u7ec4 x \u7684\u5927\u5c0f\uff0c\u56e0\u4e3a sizeof \u4f1a\u544a\u8bc9\u4f60\u6307\u9488 x \u7684\u5927\u5c0f\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a void foo (int *a); \u2026 int x[100]; foo (x); \u660e\u786e\u5730\u5728\u53c2\u6570\u4e2d\u6307\u660e\u6570\u7ec4\u7684\u957f\u5ea6\u89c6\u6ca1\u6709\u7528\u7684\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981\u628a\u6570\u7ec4\u4f5c\u4e3a\u503c\u4f20\u9012\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5305\u88f9\u5728\u7ed3\u6784\u4f53\u91cc\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u6ca1\u5565\u7528\uff08\u4f20\u9012\u4e00\u4e2a const \u4fee\u9970\u7684\u6307\u9488\u901a\u5e38\u8db3\u4ee5\u8bf4\u660e\u8c03\u7528\u8005\u4e0d\u5e94\u8be5\u4fee\u6539\u8be5\u6570\u7ec4\uff09\u3002 5.5 \u53ef\u53d8\u53c2\u6570\u5217\u8868 \u00b6 \u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53d7\u53ef\u53d8\u53c2\u6570\u6570\u91cf\u7684\u51fd\u6570\uff1b\u8fd9\u79cd\u51fd\u6570\u88ab\u79f0\u4f5c \u53ef\u53d8\u51fd\u6570 \u3002\u8981\u5b9a\u4e49\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5df2\u77e5\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5176\u4ed6\u53c2\u6570\u662f\u53ef\u9009\u7684\uff1b\u5e76\u4e14\u6570\u91cf\u548c\u6570\u636e\u7c7b\u578b\u90fd\u662f\u53ef\u53d8\u7684\u3002 \u4f60\u5148\u6b63\u5e38\u5217\u51fa\u521d\u59cb\u53c2\u6570\uff0c\u968f\u540e\u4f7f\u7528\u4e00\u4e2a\u7701\u7565\u53f7 ... \u3002\u4e0b\u9762\u662f\u5176\u539f\u578b\uff1a int add_multiple_values (int number, ...); \u8981\u4f7f\u5176\u5de5\u4f5c\uff0c\u9700\u8981\u7528\u5230\u5e93\u5934\u6587\u4ef6 <stdarg.h> \u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u5305\u542b\u5b83\u3002\u8981\u83b7\u5f97\u8fd9\u4e9b\u5b8f\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8be6\u89c1 The GNU C Library \u624b\u518c\u5173\u4e8e\u53ef\u53d8\u51fd\u6570\u7684\u7ae0\u8282\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a int add_multiple_values (int number, ...) { int counter, total = 0; /* Declare a variable of type \u2018va_list\u2019. */ va_list parameters; /* Call the \u2018va_start\u2019 function. */ va_start (parameters, number); for (counter = 0; counter < number; counter++) { /* Get the values of the optional parameters. */ total += va_arg (parameters, int); } /* End use of the \u2018parameters\u2019 variable. */ va_end (parameters); return total; } \u8981\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u4f60\u9700\u8981\u77e5\u9053\u5b83\u4eec\u6709\u591a\u5c11\u4e2a\u3002\u56e0\u4e3a\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u786c\u7f16\u7801\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u53c2\u6570\uff0c\u90a3\u4f60\u5c31\u5f88\u96be\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u4f7f\u7528 va_arg \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 add_multiple_values \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 number \u662f\u5b9e\u9645\u4f20\u8fc7\u6765\u7684\u53ef\u53d8\u53c2\u6570\u7684\u4e2a\u6570\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528\u5b83\uff1a sum = add_multiple_values (3, 12, 34, 190); \u7b2c\u4e00\u4e2a\u53c2\u6570\u4ee3\u8868\u4e86\u5b83\u540e\u9762\u6709\u591a\u5c11\u53ef\u53d8\u53c2\u6570\u3002 \u6b64\u5916\u8981\u6ce8\u610f\uff0c\u4f60\u5b9e\u9645\u4e0d\u9700\u8981\u4f7f\u7528 va_end \u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0cGCC \u4e2d\u8fd9\u4e2a\u51fd\u6570\u6839\u672c\u5565\u4e5f\u4e0d\u505a\u3002\u7136\u800c\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5\u6700\u5927\u5316\u5730\u517c\u5bb9\u5176\u4ed6\u7f16\u8bd1\u5668\u3002 \u53c2\u89c1 The GNU C Library Reference Manual \u4e2d\u7684 Variadic Functions \u7ae0\u8282\u3002 5.6 \u901a\u8fc7\u51fd\u6570\u6307\u9488\u8c03\u7528\u51fd\u6570 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6307\u9488\u6765\u8c03\u7528\u51fd\u6570\u3002\u8fd9\u65f6\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 * \u662f\u53ef\u9009\u7684\u3002 #include <stdio.h> void foo (int i) { printf (\"foo %d!\\n\", i); } void bar (int i) { printf (\"%d bar!\\n\", i); } void message (void (*func)(int), int times) { int j; for (j=0; j<times; ++j) func (j); /* (*func) (j); would be equivalent. */ } void example (int want_foo) { void (*pf)(int) = &bar; /* The & is optional. */ if (want_foo) pf = foo; message (pf, 5); } 5.7 main \u51fd\u6570 \u00b6 \u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u81f3\u5c11\u9700\u8981\u7684\u4e00\u4e2a\u51fd\u6570\u53eb\u505a main \u51fd\u6570\u3002\u5b83\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u5165\u53e3\u3002\u4f60\u4e0d\u9700\u8981\u4e3a main \u5199\u58f0\u660e\u6216\u539f\u578b\uff0c\u4f46\u662f\u4f60\u8981\u5b9a\u4e49\u5b83\u3002 main \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u662f int \u3002\u4f60\u53ef\u4ee5\u4e0d\u5fc5\u4e3a main \u51fd\u6570\u6307\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u7136\u800c\uff0c\u5982\u679c\u8981\u6307\u5b9a\u53ea\u80fd\u662f int \u3002 \u901a\u5e38\uff0c main \u7684\u8fd4\u56de\u503c\u4ee3\u8868\u7a0b\u5e8f\u7684\u9000\u51fa\u72b6\u6001\u3002\u503c 0 \u6216\u8005 EXIT_SUCCESS \u4ee3\u8868\u6210\u529f\uff1b EXIT_FAILURE \u4ee3\u8868\u9519\u8bef\u3002\u6b64\u5916\uff0c\u8be5\u8fd4\u56de\u503c\u7684\u610f\u4e49\u7531\u5b9e\u73b0\u5b9a\u4e49\u3002 \u76f4\u5230 main \u51fd\u6570\u7ed3\u5c3e\u7684 } \u90fd\u6ca1\u6709 return \u8bed\u53e5\uff0c\u6216\u8005\u6267\u884c\u4e86\u4e00\u4e2a\u6ca1\u6709\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\uff08\u4e5f\u5c31\u662f return; \uff09\u662f\u4e00\u6837\u7684\u3002\u5728 C89 \u4e2d\uff0c\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u4f46\u5728 C99 \u4e2d\u7b49\u6548\u4e8e return 0; \u3002 \u4f60\u7684 main \u53ef\u4ee5\u4e0d\u5e26\u53c2\u6570\uff08\u4e5f\u5c31\u662f int main(void) \uff09\uff0c\u6216\u8005\u8981\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6ca1\u6709\u53c2\u6570\u7684\uff1a int main (void) { puts (\"Hi there!\"); return 0; } \u8981\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u53c2\u6570\uff0c\u4f60\u7684 main \u8981\u6709 2 \u4e2a\u53c2\u6570\uff0c int argc \u548c char *argv[] \u3002\u540d\u5b57\u53ef\u4ee5\u53d8\uff0c\u4f46\u7c7b\u578b\u4e00\u5b9a\u8981\u662f int \u7c7b\u578b\u548c\u6307\u5411 char \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u3002 argc \u662f\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u7684\u53c2\u6570\u7684\u4e2a\u6570\uff0c\u5305\u542b\u7a0b\u5e8f\u540d\u5b57\u672c\u8eab\u3002 argv \u662f\u53c2\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u662f\u5b57\u7b26\u4e32\u3002\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 argv[0] \u662f\u4f60\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7684\u7a0b\u5e8f\u7684\u540d\u5b57 1 \uff1b\u540e\u9762\u7684\u6570\u7ec4\u5143\u7d20\u662f\u8ddf\u5728\u7a0b\u5e8f\u540d\u5b57\u540e\u9762\u7684\u53c2\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u63a5\u6536\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4f8b\u5b50\uff0c\u4f1a\u628a\u8fd9\u4e9b\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a int main (int argc, char *argv[]) { int counter; for (counter = 0; counter < argc; counter++) printf (\"%s\\n\", argv[counter]); return 0; } 5.8 \u9012\u5f52\u51fd\u6570 \u00b6 \u4f60\u53ef\u4ee5\u5b9a\u4e49\u9012\u5f52\u6027\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8ba1\u7b97\u6574\u6570\u9636\u4e58\u7684\u4f8b\u5b50\uff1a int factorial (int x) { if (x < 1) return 1; else return (x * factorial (x - 1)); } \u6ce8\u610f\uff0c\u4f60\u4e0d\u8981\u5199\u4e00\u4e2a\u65e0\u9650\u9012\u5f52\u7684\u51fd\u6570\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u65e6 x \u4e3a 1\uff0c\u9012\u5f52\u5c31\u7ed3\u675f\u4e86\u3002\u7136\u800c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9012\u5f52\u4e0d\u4f1a\u505c\u6b62\uff0c\u76f4\u5230\u7a0b\u5e8f\u88ab\u7ec8\u6b62\u6216\u8005\u5185\u5b58\u88ab\u8017\u5c3d\uff1a int watermelon (int x) { return (watermelon (x)); } \u51fd\u6570\u5f53\u7136\u4e5f\u53ef\u4ee5\u95f4\u63a5\u5730\u9012\u5f52\u3002 5.9 \u9759\u6001\u51fd\u6570 \u00b6 \u5982\u679c\u4f60\u60f3\u5b9a\u4e49\u4e00\u4e2a\u53ea\u5728\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5b9a\u4e49\u6210\u9759\u6001\u7684\uff1a static int foo (int x) { return x + 42; } \u5982\u679c\u4f60\u8981\u6784\u5efa\u4e00\u4e2a\u53ef\u91cd\u7528\u7684\u51fd\u6570\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u4e0d\u5e0c\u671b\u7ec8\u7aef\u7528\u6237\u8c03\u7528\u7684\u5b50\u4f8b\u7a0b\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u8bf4\u6210\u662f \u9759\u6001\u8fde\u63a5\u7684 \u3002\u4e0d\u5e78\u7684\u662f\uff0c static \u8fd9\u4e2a\u5173\u952e\u5b57\u5177\u6709\u591a\u91cd\u542b\u4e49\uff1b\u53c2\u89c1 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26 5.10 \u5d4c\u5957\u51fd\u6570 \u00b6 \u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u5d4c\u5957\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u5b9a\u4e49\u7684\u5c3e\u9012\u5f52\u9636\u4e58\u51fd\u6570\uff1a int factorial (int x) { int factorial_helper (int a, int b) { if (a < 1) { return b; } else { return factorial_helper ((a - 1), (a * b)); } } return factorial_helper (x, 1); } \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5d4c\u5957\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u53d8\u91cf\u58f0\u660e\u4e00\u8d77\u5199\u5728\u51fd\u6570\u5f00\u5934\uff0c\u6240\u6709\u7684\u5176\u4ed6\u8bed\u53e5\u8ddf\u5728\u540e\u9762\u3002 \u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c argv[0] \u53ef\u4ee5\u662f\u7a7a\u6307\u9488\uff08\u8fd9\u65f6 argc \u662f 0\uff09\uff1b\u6216\u8005 argv[0][0] \u53ef\u4ee5\u662f\u7a7a\u6307\u9488\u3002\u4f46\u4e0d\u7ba1\u600e\u6837 argv[argc] \u4e00\u5b9a\u662f\u7a7a\u6307\u9488\u3002 \u21a9","title":"5. \u51fd\u6570"},{"location":"Function/#Function-Declarations","text":"\u51fd\u6570\u58f0\u660e\u6307\u5b9a\u4e86\u51fd\u6570\u7684\u540d\u5b57\u3001\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u4e00\u4e2a\u51fd\u6570\u58f0\u660e\u8981\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a return-type function-name (parameter-list); return-type \u6307\u793a\u4e86\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7684\u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 void \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\u58f0\u660e\u4e00\u4e2a\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\u7684\u51fd\u6570\u3002 function-name \u53ef\u4ee5\u662f\u4efb\u4f55\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u3002\uff08\u8be6\u89c1 \u6807\u8bc6\u7b26 \uff09 parameter-list \u5305\u542b 0 \u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u7528\u9017\u53f7\u9694\u5f00\u3002\u4e00\u4e2a\u53c2\u6570\u901a\u5e38\u5305\u542b\u6570\u636e\u7c7b\u578b\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u540d\u5b57\u3002\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u62e5\u6709\u53ef\u53d8\u53c2\u6570\u4e2a\u6570\u7684\u51fd\u6570\uff08\u8be6\u89c1 \u53ef\u53d8\u53c2\u6570\u5217\u8868 \uff09\uff0c\u6216\u8005\u4f7f\u7528 void \u58f0\u660e\u4e00\u4e2a\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u3002\u4e0d\u5199 parameter-list \u7684\u8bdd\u4e5f\u8868\u793a\u6ca1\u6709\u53c2\u6570\uff0c\u4f46\u6700\u597d\u4f7f\u7528 void \u6307\u660e\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u58f0\u660e\u4e86\u4e00\u4e2a\u5e26\u6709 2 \u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff1a int foo (int, double); \u5982\u679c\u8981\u7ed9\u4e00\u4e2a\u53c2\u6570\u52a0\u4e0a\u540d\u5b57\uff0c\u90a3\u540d\u5b57\u8981\u7d27\u8ddf\u6570\u636e\u7c7b\u578b\uff1a int foo (int x, double y); \u53c2\u6570\u540d\u5b57\u53ef\u4ee5\u662f\u4efb\u610f\u6807\u8bc6\u7b26\uff08\u8be6\u89c1 \u6807\u8bc6\u7b26 \uff09\uff0c\u5e76\u4e14\u5982\u679c\u6709\u591a\u4e2a\u53c2\u6570\u4f60\u4e0d\u80fd\u5728\u4e00\u4e2a\u58f0\u660e\u91cc\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\u3002\u8fd9\u91cc\u7684\u53c2\u6570\u540d\u5b57\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u4e2d\u7684\u540d\u5b57\u5339\u914d\u3002 \u4f60\u8981\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u4e4b\u524d\u58f0\u660e\u5b83\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u5728\u4f7f\u7528\u8be5\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u4e2d\u7528 #include \u6307\u4ee4\u6765\u5305\u542b\u8be5\u51fd\u6570\u58f0\u660e\u3002","title":"5.1 \u51fd\u6570\u58f0\u660e"},{"location":"Function/#Function-Definitions","text":"\u51fd\u6570\u5b9a\u4e49\u6307\u660e\u8be5\u51fd\u6570\u5b9e\u9645\u90fd\u5e72\u4ec0\u4e48\u3002\u51fd\u6570\u5b9a\u4e49\u5305\u542b\u7684\u4fe1\u606f\u6709\uff1a\u51fd\u6570\u540d\uff0c\u8fd4\u56de\u7c7b\u578b\uff0c\u53c2\u6570\u7684\u7c7b\u578b\u548c\u540d\u5b57\uff0c\u4ee5\u53ca\u51fd\u6570\u4f53\u3002\u51fd\u6570\u4f53\u662f\u4e00\u7cfb\u5217\u7531\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u7684\u8bed\u53e5\uff1b\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff08\u8be6\u89c1 \u4ee3\u7801\u5757 \uff09\u3002 \u5176\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a return-type function-name (parameter-list) { function-body } return-type \u548c function-name \u548c \u51fd\u6570\u58f0\u660e\u4e2d\u7684\u662f\u4e00\u6837\u7684\uff08\u8be6\u89c1 \u51fd\u6570\u58f0\u660e \uff09\u3002 parameter-list \u57fa\u672c\u548c\u51fd\u6570\u58f0\u660e\u4e2d\u7684\u4e00\u6837\uff08\u8be6\u89c1 \u51fd\u6570\u58f0\u660e \uff09\uff0c\u9664\u4e86\u5728\u51fd\u6570\u5b9a\u4e49\u65f6\u4f60\u5fc5\u987b\u8981\u6307\u5b9a\u53c2\u6570\u540d\u5b57\u3002 \u4e0b\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 -- \u5b83\u9700\u8981 2 \u4e2a\u6574\u578b\u53c2\u6570\uff0c\u5e76\u628a\u5b83\u4eec\u7684\u548c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff1a int add_values (int x, int y) { return x + y; } \u4e3a\u4e86\u517c\u5bb9 C \u8bed\u8a00\u7684\u521d\u59cb\u8bbe\u8ba1\uff0c\u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u7684\u53f3\u62ec\u53f7\u540e\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\u3002\u5982\u4e0b\uff1a int add_values (x, y) int x, int y; { return x + y; } \u7136\u800c\uff0c\u6211\u4eec\u5f3a\u70c8\u4e0d\u63a8\u8350\u8fd9\u79cd\u4ee3\u7801\u98ce\u683c\uff1b\u8fd9\u6837\u5199\u4f1a\u9020\u6210\u7ec6\u5fae\u7684\u7c7b\u578b\u8f6c\u6362\u95ee\u9898\uff0c\u53ca\u5176\u4ed6\u95ee\u9898\u3002","title":"5.2 \u51fd\u6570\u5b9a\u4e49"},{"location":"Function/#Calling-Functions","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u5b57\u6765\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u4e14\u8981\u63d0\u4f9b\u5176\u9700\u8981\u7684\u53c2\u6570\u3002\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a function-name (parameters) \u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u8bed\u53e5\uff0c\u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f5c\u4e3a\u5b8c\u6574\u8bed\u53e5\u7684\u4f8b\u5b50\uff1a foo (5); \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 foo \u88ab\u8c03\u7528\uff0c\u5e76\u4f20\u7ed9\u4e86\u53c2\u6570 5 \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f5c\u4e3a\u5b50\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50\uff1a a = square (5); \u5047\u8bbe\u51fd\u6570 square \u5e73\u65b9\u4e86\u5b83\u7684\u53c2\u6570\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u628a\u503c 25 \u8d4b\u7ed9 a \u3002 \u5982\u679c\u53c2\u6570\u5217\u8868\u4e0d\u53ea\u4e00\u4e2a\u53c2\u6570\uff0c\u4f60\u8981\u7528\u9017\u53f7\u5206\u5272\uff1a a = quux (5, 10);","title":"5.3 \u8c03\u7528\u51fd\u6570"},{"location":"Function/#Function-Parameters","text":"\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u662f\u4efb\u4f55\u8868\u8fbe\u5f0f -- \u4e00\u4e2a\u5e38\u91cf\u503c\u3001\u4e00\u4e2a\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684\u503c\u3001\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u6216\u8005\u7531\u5b83\u4eec\u6784\u6210\u7684\u590d\u6742\u8868\u8fbe\u5f0f\u3002 \u5728\u51fd\u6570\u4f53\u5185\uff0c\u8fd9\u4e9b\u53c2\u6570\u662f\u4f60\u4f20\u8fdb\u53bb\u7684\u503c\u7684\u5c40\u90e8\u62f7\u8d1d\uff1b\u4f60\u4e0d\u80fd\u901a\u8fc7\u6539\u53d8\u8be5\u5c40\u90e8\u62f7\u8d1d\u6765\u4fee\u6539\u4f60\u4f20\u8fc7\u53bb\u7684\u503c\u3002 int x = 23; foo (x); \u2026 /* Definition for function foo. */ int foo (int a) { a = 2 * a; return a; } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u53c2\u6570 a \u5728\u51fd\u6570 foo \u4e2d\u88ab\u4fee\u6539\uff0c\u4f46\u4f60\u4f20\u8fdb\u53bb\u53d8\u91cf x \u7684\u503c\u5e76\u6ca1\u6709\u4fee\u6539\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4fee\u6539 x \u7684\u539f\u59cb\u503c\uff0c\u90a3\u4f60\u5fc5\u987b\u628a\u51fd\u6570\u8c03\u7528\u5199\u8fdb\u8d4b\u503c\u8bed\u53e5\uff1a x = foo (x); \u5982\u679c\u4f60\u4f20\u8fdb\u53bb\u7684\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u6307\u9488\uff09\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8bbf\u95ee\uff08\u548c\u4fee\u6539\uff09\u5b58\u5728\u8be5\u5730\u5740\u7684\u6570\u636e\u3002\u8fd9\u76f8\u5f53\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u5f15\u7528\u4f20\u9012\uff0c\u4f46\u5e76\u4e0d\u76f8\u540c\uff1a\u5185\u5b58\u5730\u5740\u53ea\u662f\u4e00\u4e2a\u503c\uff0c\u5c31\u50cf\u5176\u4ed6\u503c\u4e00\u6837\uff0c\u5b83\u81ea\u5df1\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u3002\u4f20\u4e00\u4e2a\u6307\u9488\u548c\u4f20\u4e00\u4e2a\u6574\u6570\u7684\u5dee\u522b\u5728\u4e8e\u4f60\u60f3\u8981\u5728\u51fd\u6570\u4e2d\u505a\u4ec0\u4e48\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f7f\u7528\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u6765\u8c03\u7528\u51fd\u6570\uff1a void foo (int *x) { *x = *x + 42; } \u2026 int a = 15; foo (&a); \u8fd9\u4e2a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u662f\u6307\u5411 int \u7c7b\u578b\u7684\u6307\u9488\u3002\u6211\u4eec\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u8981\u4f20\u7ed9\u5b83\u4e00\u4e2a int \u7c7b\u578b\u53d8\u91cf\u7684\u5730\u5740\u3002\u5728\u51fd\u6570\u7528\u89e3\u5f15\u7528\u8fd9\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u548c\u4fee\u6539\u5b58\u50a8\u5728\u8be5\u5730\u5740\u7684\u503c\u3002\u4e0a\u9762\u5c31\u628a a \u7684\u503c\u4fee\u6539\u4e3a\u4e86 57 \u3002 \u5373\u4f7f\u4f60\u4e0d\u60f3\u6539\u53d8\u5b58\u50a8\u5728\u4e00\u4e2a\u5730\u5740\u7684\u503c\uff0c\u5982\u679c\u4f60\u8981\u4f20\u9012\u7684\u53d8\u91cf\u7c7b\u578b\u975e\u5e38\u5927\uff0c\u901a\u5e38\u4f20\u9012\u6307\u9488\u5c31\u6bd4\u4f20\u9012\u53d8\u91cf\u672c\u8eab\u6709\u7528\uff0c\u5c24\u5176\u5728\u4f60\u9700\u8981\u8282\u7701\u5185\u5b58\u6216\u8005\u51cf\u5c11\u53c2\u6570\u62f7\u8d1d\u7684\u6d88\u8017\u3002\u4f8b\u5982\uff1a struct foo { int x; float y; double z; }; void bar (const struct foo *a); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9664\u975e\u4f60\u5de5\u4f5c\u7684\u8ba1\u7b97\u673a\u5185\u5b58\u5f88\u5927\uff08\u4e0d\u5728\u4e4e\u5185\u5b58\u6d88\u8017\uff09\uff0c\u4f20\u9012\u6307\u5411\u8be5\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u6307\u9488\u4f7f\u7528\u7684\u5185\u5b58\u8981\u6bd4\u4f20\u7edf\u7ed3\u6784\u4f53\u5b9e\u4f8b\u672c\u8eab\u8981\u5c11\u5f97\u591a\u3002 \u6570\u7ec4\u603b\u662f\u4f1a\u4f5c\u4e3a\u6307\u9488\u4f20\u9012\u3002 void foo (int a[]); \u2026 int x[100]; foo (x); \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8c03\u7528\u5e26\u6709\u53c2\u6570 a \u7684\u51fd\u6570 foo \u4e0d\u4f1a\u590d\u5236\u6574\u4e2a\u6570\u7ec4\u5230 foo \u91cc\u9762\u7684\u5c40\u90e8\u53c2\u6570\uff0c\u800c\u662f\u5c06 x \u4f5c\u4e3a\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570 x \u7684\u6307\u9488\u4f20\u8fc7\u53bb\u3002\u8981\u6ce8\u610f\uff0c\u4f60\u5728\u51fd\u6570\u91cc\u9762\u4e0d\u80fd\u4f7f\u7528 sizeof \u6765\u6c42\u6570\u7ec4 x \u7684\u5927\u5c0f\uff0c\u56e0\u4e3a sizeof \u4f1a\u544a\u8bc9\u4f60\u6307\u9488 x \u7684\u5927\u5c0f\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a void foo (int *a); \u2026 int x[100]; foo (x); \u660e\u786e\u5730\u5728\u53c2\u6570\u4e2d\u6307\u660e\u6570\u7ec4\u7684\u957f\u5ea6\u89c6\u6ca1\u6709\u7528\u7684\u3002\u5982\u679c\u4f60\u771f\u7684\u60f3\u8981\u628a\u6570\u7ec4\u4f5c\u4e3a\u503c\u4f20\u9012\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5305\u88f9\u5728\u7ed3\u6784\u4f53\u91cc\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u6ca1\u5565\u7528\uff08\u4f20\u9012\u4e00\u4e2a const \u4fee\u9970\u7684\u6307\u9488\u901a\u5e38\u8db3\u4ee5\u8bf4\u660e\u8c03\u7528\u8005\u4e0d\u5e94\u8be5\u4fee\u6539\u8be5\u6570\u7ec4\uff09\u3002","title":"5.4 \u51fd\u6570\u53c2\u6570"},{"location":"Function/#Variable-Length-Parameter-Lists","text":"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53d7\u53ef\u53d8\u53c2\u6570\u6570\u91cf\u7684\u51fd\u6570\uff1b\u8fd9\u79cd\u51fd\u6570\u88ab\u79f0\u4f5c \u53ef\u53d8\u51fd\u6570 \u3002\u8981\u5b9a\u4e49\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u5df2\u77e5\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5176\u4ed6\u53c2\u6570\u662f\u53ef\u9009\u7684\uff1b\u5e76\u4e14\u6570\u91cf\u548c\u6570\u636e\u7c7b\u578b\u90fd\u662f\u53ef\u53d8\u7684\u3002 \u4f60\u5148\u6b63\u5e38\u5217\u51fa\u521d\u59cb\u53c2\u6570\uff0c\u968f\u540e\u4f7f\u7528\u4e00\u4e2a\u7701\u7565\u53f7 ... \u3002\u4e0b\u9762\u662f\u5176\u539f\u578b\uff1a int add_multiple_values (int number, ...); \u8981\u4f7f\u5176\u5de5\u4f5c\uff0c\u9700\u8981\u7528\u5230\u5e93\u5934\u6587\u4ef6 <stdarg.h> \u4e2d\u5b9a\u4e49\u7684\u5b8f\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u5305\u542b\u5b83\u3002\u8981\u83b7\u5f97\u8fd9\u4e9b\u5b8f\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u8be6\u89c1 The GNU C Library \u624b\u518c\u5173\u4e8e\u53ef\u53d8\u51fd\u6570\u7684\u7ae0\u8282\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a int add_multiple_values (int number, ...) { int counter, total = 0; /* Declare a variable of type \u2018va_list\u2019. */ va_list parameters; /* Call the \u2018va_start\u2019 function. */ va_start (parameters, number); for (counter = 0; counter < number; counter++) { /* Get the values of the optional parameters. */ total += va_arg (parameters, int); } /* End use of the \u2018parameters\u2019 variable. */ va_end (parameters); return total; } \u8981\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u4f60\u9700\u8981\u77e5\u9053\u5b83\u4eec\u6709\u591a\u5c11\u4e2a\u3002\u56e0\u4e3a\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u786c\u7f16\u7801\uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u4e2a\u53c2\u6570\uff0c\u90a3\u4f60\u5c31\u5f88\u96be\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u4f7f\u7528 va_arg \u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 add_multiple_values \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 number \u662f\u5b9e\u9645\u4f20\u8fc7\u6765\u7684\u53ef\u53d8\u53c2\u6570\u7684\u4e2a\u6570\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528\u5b83\uff1a sum = add_multiple_values (3, 12, 34, 190); \u7b2c\u4e00\u4e2a\u53c2\u6570\u4ee3\u8868\u4e86\u5b83\u540e\u9762\u6709\u591a\u5c11\u53ef\u53d8\u53c2\u6570\u3002 \u6b64\u5916\u8981\u6ce8\u610f\uff0c\u4f60\u5b9e\u9645\u4e0d\u9700\u8981\u4f7f\u7528 va_end \u51fd\u6570\u3002\u5b9e\u9645\u4e0a\uff0cGCC \u4e2d\u8fd9\u4e2a\u51fd\u6570\u6839\u672c\u5565\u4e5f\u4e0d\u505a\u3002\u7136\u800c\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5\u6700\u5927\u5316\u5730\u517c\u5bb9\u5176\u4ed6\u7f16\u8bd1\u5668\u3002 \u53c2\u89c1 The GNU C Library Reference Manual \u4e2d\u7684 Variadic Functions \u7ae0\u8282\u3002","title":"5.5 \u53ef\u53d8\u53c2\u6570\u5217\u8868"},{"location":"Function/#Calling-Functions-Through-Function-Pointers","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6307\u9488\u6765\u8c03\u7528\u51fd\u6570\u3002\u8fd9\u65f6\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 * \u662f\u53ef\u9009\u7684\u3002 #include <stdio.h> void foo (int i) { printf (\"foo %d!\\n\", i); } void bar (int i) { printf (\"%d bar!\\n\", i); } void message (void (*func)(int), int times) { int j; for (j=0; j<times; ++j) func (j); /* (*func) (j); would be equivalent. */ } void example (int want_foo) { void (*pf)(int) = &bar; /* The & is optional. */ if (want_foo) pf = foo; message (pf, 5); }","title":"5.6 \u901a\u8fc7\u51fd\u6570\u6307\u9488\u8c03\u7528\u51fd\u6570"},{"location":"Function/#The-main-Function","text":"\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u81f3\u5c11\u9700\u8981\u7684\u4e00\u4e2a\u51fd\u6570\u53eb\u505a main \u51fd\u6570\u3002\u5b83\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u5165\u53e3\u3002\u4f60\u4e0d\u9700\u8981\u4e3a main \u5199\u58f0\u660e\u6216\u539f\u578b\uff0c\u4f46\u662f\u4f60\u8981\u5b9a\u4e49\u5b83\u3002 main \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u662f int \u3002\u4f60\u53ef\u4ee5\u4e0d\u5fc5\u4e3a main \u51fd\u6570\u6307\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u7136\u800c\uff0c\u5982\u679c\u8981\u6307\u5b9a\u53ea\u80fd\u662f int \u3002 \u901a\u5e38\uff0c main \u7684\u8fd4\u56de\u503c\u4ee3\u8868\u7a0b\u5e8f\u7684\u9000\u51fa\u72b6\u6001\u3002\u503c 0 \u6216\u8005 EXIT_SUCCESS \u4ee3\u8868\u6210\u529f\uff1b EXIT_FAILURE \u4ee3\u8868\u9519\u8bef\u3002\u6b64\u5916\uff0c\u8be5\u8fd4\u56de\u503c\u7684\u610f\u4e49\u7531\u5b9e\u73b0\u5b9a\u4e49\u3002 \u76f4\u5230 main \u51fd\u6570\u7ed3\u5c3e\u7684 } \u90fd\u6ca1\u6709 return \u8bed\u53e5\uff0c\u6216\u8005\u6267\u884c\u4e86\u4e00\u4e2a\u6ca1\u6709\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\uff08\u4e5f\u5c31\u662f return; \uff09\u662f\u4e00\u6837\u7684\u3002\u5728 C89 \u4e2d\uff0c\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u4f46\u5728 C99 \u4e2d\u7b49\u6548\u4e8e return 0; \u3002 \u4f60\u7684 main \u53ef\u4ee5\u4e0d\u5e26\u53c2\u6570\uff08\u4e5f\u5c31\u662f int main(void) \uff09\uff0c\u6216\u8005\u8981\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u6ca1\u6709\u53c2\u6570\u7684\uff1a int main (void) { puts (\"Hi there!\"); return 0; } \u8981\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u53c2\u6570\uff0c\u4f60\u7684 main \u8981\u6709 2 \u4e2a\u53c2\u6570\uff0c int argc \u548c char *argv[] \u3002\u540d\u5b57\u53ef\u4ee5\u53d8\uff0c\u4f46\u7c7b\u578b\u4e00\u5b9a\u8981\u662f int \u7c7b\u578b\u548c\u6307\u5411 char \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\u3002 argc \u662f\u4ece\u547d\u4ee4\u884c\u63a5\u6536\u7684\u53c2\u6570\u7684\u4e2a\u6570\uff0c\u5305\u542b\u7a0b\u5e8f\u540d\u5b57\u672c\u8eab\u3002 argv \u662f\u53c2\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u662f\u5b57\u7b26\u4e32\u3002\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 argv[0] \u662f\u4f60\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u7684\u7a0b\u5e8f\u7684\u540d\u5b57 1 \uff1b\u540e\u9762\u7684\u6570\u7ec4\u5143\u7d20\u662f\u8ddf\u5728\u7a0b\u5e8f\u540d\u5b57\u540e\u9762\u7684\u53c2\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u63a5\u6536\u547d\u4ee4\u884c\u53c2\u6570\u7684\u4f8b\u5b50\uff0c\u4f1a\u628a\u8fd9\u4e9b\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a int main (int argc, char *argv[]) { int counter; for (counter = 0; counter < argc; counter++) printf (\"%s\\n\", argv[counter]); return 0; }","title":"5.7 main \u51fd\u6570"},{"location":"Function/#Recursive-Functions","text":"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u9012\u5f52\u6027\u7684\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8ba1\u7b97\u6574\u6570\u9636\u4e58\u7684\u4f8b\u5b50\uff1a int factorial (int x) { if (x < 1) return 1; else return (x * factorial (x - 1)); } \u6ce8\u610f\uff0c\u4f60\u4e0d\u8981\u5199\u4e00\u4e2a\u65e0\u9650\u9012\u5f52\u7684\u51fd\u6570\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u65e6 x \u4e3a 1\uff0c\u9012\u5f52\u5c31\u7ed3\u675f\u4e86\u3002\u7136\u800c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9012\u5f52\u4e0d\u4f1a\u505c\u6b62\uff0c\u76f4\u5230\u7a0b\u5e8f\u88ab\u7ec8\u6b62\u6216\u8005\u5185\u5b58\u88ab\u8017\u5c3d\uff1a int watermelon (int x) { return (watermelon (x)); } \u51fd\u6570\u5f53\u7136\u4e5f\u53ef\u4ee5\u95f4\u63a5\u5730\u9012\u5f52\u3002","title":"5.8 \u9012\u5f52\u51fd\u6570"},{"location":"Function/#Static-Functions","text":"\u5982\u679c\u4f60\u60f3\u5b9a\u4e49\u4e00\u4e2a\u53ea\u5728\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u5b9a\u4e49\u6210\u9759\u6001\u7684\uff1a static int foo (int x) { return x + 42; } \u5982\u679c\u4f60\u8981\u6784\u5efa\u4e00\u4e2a\u53ef\u91cd\u7528\u7684\u51fd\u6570\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u4e0d\u5e0c\u671b\u7ec8\u7aef\u7528\u6237\u8c03\u7528\u7684\u5b50\u4f8b\u7a0b\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u8bf4\u6210\u662f \u9759\u6001\u8fde\u63a5\u7684 \u3002\u4e0d\u5e78\u7684\u662f\uff0c static \u8fd9\u4e2a\u5173\u952e\u5b57\u5177\u6709\u591a\u91cd\u542b\u4e49\uff1b\u53c2\u89c1 \u5b58\u50a8\u7c7b\u522b\u8bf4\u660e\u7b26","title":"5.9 \u9759\u6001\u51fd\u6570"},{"location":"Function/#Nested-Functions","text":"\u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u9762\u5b9a\u4e49\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u5d4c\u5957\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u5b9a\u4e49\u7684\u5c3e\u9012\u5f52\u9636\u4e58\u51fd\u6570\uff1a int factorial (int x) { int factorial_helper (int a, int b) { if (a < 1) { return b; } else { return factorial_helper ((a - 1), (a * b)); } } return factorial_helper (x, 1); } \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5d4c\u5957\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u53d8\u91cf\u58f0\u660e\u4e00\u8d77\u5199\u5728\u51fd\u6570\u5f00\u5934\uff0c\u6240\u6709\u7684\u5176\u4ed6\u8bed\u53e5\u8ddf\u5728\u540e\u9762\u3002 \u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c argv[0] \u53ef\u4ee5\u662f\u7a7a\u6307\u9488\uff08\u8fd9\u65f6 argc \u662f 0\uff09\uff1b\u6216\u8005 argv[0][0] \u53ef\u4ee5\u662f\u7a7a\u6307\u9488\u3002\u4f46\u4e0d\u7ba1\u600e\u6837 argv[argc] \u4e00\u5b9a\u662f\u7a7a\u6307\u9488\u3002 \u21a9","title":"5.10 \u5d4c\u5957\u51fd\u6570"},{"location":"Lexical-Elements/","text":"\u672c\u7ae0\u63cf\u8ff0\u4e86\u5728\u9884\u5904\u7406\u4e4b\u540e\u7ec4\u6210 C \u6e90\u4ee3\u7801\u7684\u8bcd\u6c47\u5143\u7d20\u3002\u8fd9\u4e9b\u5143\u7d20\u88ab\u79f0\u4e3a token\u3002\u5171\u6709 5 \u79cd\u7c7b\u578b\u7684 token\uff1a\u5173\u952e\u5b57\u3001\u6807\u8bc6\u7b26\u3001\u5e38\u91cf\u3001\u64cd\u4f5c\u7b26\u4ee5\u53ca\u5206\u9694\u7b26\u3002\u7a7a\u767d\u7b26\uff0c\u6709\u65f6\u5019\u4e5f\u7528\u6765\u5206\u5272 token\uff0c\u4f1a\u5728\u672c\u7ae0\u63d0\u5230\u3002 1.1 \u6807\u8bc6\u7b26 \u00b6 \u6807\u8bc6\u7b26\u662f\u4e00\u79cd\u4e3a\u53d8\u91cf\u3001\u51fd\u6570\u3001\u65b0\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u9884\u5904\u7406\u5b8f\u547d\u540d\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u4f60\u53ef\u4ee5\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf '_'\u3002 \u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57\u3002 \u5927\u5c0f\u5199\u5b57\u6bcd\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\uff0c foo \u548c FOO \u662f\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002 \u5728\u4f7f\u7528 GNU \u6269\u5c55\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f8e\u5143\u7b26\u53f7 '$' 1.2 \u5173\u952e\u5b57 \u00b6 \u5173\u952e\u5b57\u662f\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff0c\u88ab\u4fdd\u7559\u4f5c\u4e3a\u8bed\u8a00\u672c\u8eab\u7684\u4e00\u90e8\u5206\u3002\u4f60\u4e0d\u80fd\u632a\u4e3a\u4ed6\u7528\u3002 \u8fd9\u91cc\u5217\u51fa C89 \u8bc6\u522b\u7684\u5173\u952e\u5b57\uff1a auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while ISO C99 \u589e\u52a0\u4e86\u4ee5\u4e0b\u5173\u952e\u5b57\uff1a inline _Bool _Complex _Imaginary GNU \u6269\u5c55\u589e\u52a0\u4e86\u4ee5\u4e0b\u5173\u952e\u5b57\uff1a __FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ __asm __asm__ __attribute __attribute__ __builtin_offsetof __builtin_va_arg __complex __complex__ __const __extension__ __func__ __imag __imag__ __inline __inline__ __label__ __null __real __real__ __restrict __restrict__ __signed __signed__ __thread __typeof __volatile __volatile__ C89 \u548c C99 \u7684 GNU \u6269\u5c55\u90fd\u53ef\u4ee5\u8bc6\u522b\u4e0b\u9762\u8fd9\u4e2a\u5173\u952e\u5b57\uff1a restrict 1.3 \u5e38\u91cf \u00b6 \u5e38\u91cf\u5c31\u662f\u6570\u5b57\u6216\u8005\u5b57\u7b26\u7684\u5b57\u9762\u91cf\uff0c\u5982 5 \u3001 'm' \u3002\u6240\u6709\u5e38\u91cf\u90fd\u6709\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\uff1b\u4f60\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u6765\u660e\u786e\u6307\u5b9a\u4e00\u4e2a\u5e38\u91cf\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8ba9\u7f16\u8bd1\u5668\u6839\u636e\u5e38\u91cf\u503c\u4f7f\u7528\u9ed8\u8ba4\u7c7b\u578b\u3002 1.3.1 \u6574\u5f62\u5e38\u91cf \u00b6 \u6574\u5f62\u5e38\u91cf\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53ef\u9009\u7684\u524d\u7f00\u6765\u6307\u793a\u8fdb\u5236\u3002 \u5982\u679c\u6570\u5b57\u5e8f\u5217\u524d\u5e26\u6709 0x \u6216 0X \uff08zero x \u6216\u8005 zero X\uff09\uff0c\u8fd9\u4e2a\u5e38\u91cf\u5c31\u662f\u5341\u516d\u8fdb\u5236\u7684\uff08base 16\uff09\u3002\u5341\u516d\u8fdb\u5236\u6570\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57 0~9 \u8fd8\u6709 \u5b57\u6bcd a~f \u4ee5\u53ca A~F \u3002\u4f8b\u5982\uff1a 0x2f 0x88 0xAB43 0xAbCd 0x1 \u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u4f4d\u662f 0 \uff08zero\uff09\u5e76\u4e14\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f x \u6216 X \uff0c\u5219\u8fd9\u4e2a\u5e38\u91cf\u5c31\u662f\u516b\u8fdb\u5236\u7684\uff08base 8\uff09\u3002\u516b\u8fdb\u5236\u7684\u503c\u53ea\u80fd\u4f7f\u7528\u6570\u5b57 0~7 \uff1b 8 \u548c 9 \u4e0d\u5141\u8bb8\u4f7f\u7528\u3002\u4f8b\u5982\uff1a 057 012 03 0241 \u4e0d\u662f\u4ee5\u4e0a\u4e24\u79cd\u7684\u8bdd\uff0c\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\u5c31\u88ab\u8ba4\u4e3a\u662f\u5341\u8fdb\u5236\u7684\uff08base 10\uff09\u3002\u5341\u8fdb\u5236\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57 0~9 \u3002\u4f8b\u5982\uff1a 459 23901 8 12 \u6709\u4e0d\u540c\u7684\u6574\u6570\u7c7b\u578b\uff0c\u5982\u77ed\u6574\u578b\uff08short\uff09\u3001\u957f\u6574\u578b\uff08long\uff09\u3001\u6709\u7b26\u53f7\u6574\u578b\uff08signed\uff09\u548c\u65e0\u7b26\u53f7\u6574\u578b\uff08unsigned\uff09\u3002\u4f60\u53ef\u4ee5\u5728\u5e38\u91cf\u540e\u9762\u52a0\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bcd\u5f3a\u5236\u5c06\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u53d8\u6210\u957f\u6574\u578b \u548c/\u6216 \u65e0\u7b26\u53f7\u6574\u578b\uff1a u U \u65e0\u7b26\u53f7\u6574\u578b\u3002 l L \u957f\u6574\u5f62\u3002 \u4f8b\u5982\uff0c 45U \u662f\u4e00\u4e2a unsigned int \u5e38\u91cf\u3002\u4f60\u4e5f\u53ef\u4ee5\u7ec4\u5408\u5b57\u6bcd\uff1a 45UL \u5c31\u662f\u4e00\u4e2a unsigned long int \u5e38\u91cf\u4e86\uff08\u5b57\u7b26\u53ef\u4ee5\u662f\u4efb\u610f\u987a\u5e8f\uff09\u3002 ISO C99 \u548c GNU C \u6269\u5c55\u90fd\u589e\u52a0\u4e86 long long int \u548c unsigned long long int \u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 2 \u4e2a L \u6765\u5f97\u5230\u4e00\u4e2a long long int \u5e38\u91cf\uff1b\u589e\u52a0\u4e00\u4e2a 'U' \u5c06\u5f97\u5230\u4e00\u4e2a unsigned long long int \u5e38\u91cf\u3002\u4f8b\u5982\uff0c 45ULL \u3002 1.3.2 \u5b57\u7b26\u5e38\u91cf \u00b6 \u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u901a\u5e38\u662f\u4e00\u4e2a\u88ab\u5355\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5355\u4e2a\u5b57\u7b26\uff0c\u5982 'Q' \u3002\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u9ed8\u8ba4\u662f int \u7c7b\u578b\u3002 \u4e00\u4e9b\u5b57\u7b26\uff0c\u5982\u5355\u5f15\u53f7\u672c\u8eab\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u8fd9\u6837\u7684\u5b57\u7b26\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u201c\u8f6c\u4e49\u5e8f\u5217\u201d\uff1a \\\\ \u53cd\u659c\u7ebf \\? \u95ee\u53f7 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u58f0\u97f3\u8b66\u62a5 \\b \u9000\u683c\u5b57\u7b26 \\e <ESC> \u5b57\u7b26\u3002\uff08\u8fd9\u4e2a\u662f GNU \u6269\u5c55\uff09 \\f \u9988\u9875 \\n \u6362\u884c \\r \u56de\u8f66 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\v \u5782\u76f4\u5236\u8868\u7b26 \\o, \\oo, \\ooo \u516b\u8fdb\u5236\u6570 \\xh, \\xhh, \\xhhh, \u2026 \u5341\u516d\u8fdb\u5236\u6570 \u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u8f6c\u4e49\u5e8f\u5217\u90fd\u8981\u4f7f\u7528\u5355\u5f15\u53f7\u5f15\u8d77\u6765\uff0c\u5e76\u50cf\u5bf9\u5f85\u5176\u4ed6\u5b57\u7b26\u4e00\u6837\u3002\u4f8b\u5982\uff1a\u5b57\u6bcd m \u662f 'm'\uff1b\u6362\u884c\u7b26\u662f '\\n'\u3002 \u516b\u8fdb\u5236\u6570\u8f6c\u4e49\u5e8f\u5217\u662f\u4e00\u4e2a\u53cd\u659c\u6760\u8ddf\u7740 1 \u4e2a\u30012 \u4e2a\u6216\u8005 3 \u4e2a\u516b\u8fdb\u5236\u6570\u5b57\uff080~7\uff09\u3002\u4f8b\u5982\uff0c\u516b\u8fdb\u5236 101 \u7b49\u4e8e\u5341\u8fdb\u5236\u7684 65\uff0c\u5373 ASCII\u5b57\u7b26 'A'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u5e38\u91cf '\\101' \u8ddf\u5b57\u7b26\u5e38\u91cf 'A' \u662f\u4e00\u6837\u7684\u3002 \u5341\u516d\u8fdb\u5236\u8f6c\u4e49\u5e8f\u5217\u662f\u4e00\u4e2a\u53cd\u659c\u6760\u8ddf\u7740\u4e00\u4e2a x \u4ee5\u53ca\u65e0\u9650\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\uff080~9, a~f, A~F\uff09\u3002 \u867d\u7136\u53ef\u80fd\u7684\u5341\u516d\u8fdb\u5236\u6570\u5b57\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u65e0\u9650\u5236\u7684\uff0c\u4f46\u662f\u4efb\u4f55\u7ed9\u5b9a\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\u5e38\u91cf\u7684\u6570\u91cf\u90fd\u4e0d\u662f\u65e0\u9650\u7684\u3002\uff08\u4f8b\u5982\uff0c\u7ecf\u5e38\u4f7f\u7528\u7684\u6269\u5c55\u7684ASCII\u5b57\u7b26\u4e32\u53ea\u6709 256 \u4e2a\u5b57\u7b26\uff09\u5982\u679c\u4f60\u8bd5\u56fe\u4f7f\u7528\u4e00\u4e2a\u8d85\u8fc7\u8fd9\u4e2a\u5b57\u7b26\u8303\u56f4\u7684\u5341\u516d\u8fdb\u5236\u503c\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u7684\u3002 1.3.3 \u5b9e\u6570\u5e38\u91cf \u00b6 \u5b9e\u6570\u5e38\u91cf\u662f\u4e00\u4e2a\u8868\u793a\u5206\u6570\uff08\u6d6e\u70b9\u6570\uff09\u7684\u503c\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u8868\u793a\u8be5\u6570\u6574\u6570\u90e8\u5206\uff08\u6216\u8005\u8be5\u6570\uff09\u7684\u6570\u5b57\u5e8f\u5217\uff0c\u4e00\u4e2a\u5c0f\u6570\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2a\u8868\u793a\u5206\u6570\u90e8\u5206\u7684\u6570\u5b57\u5e8f\u5217\u3002 \u6574\u6570\u90e8\u5206\u6216\u8005\u5206\u6570\u90e8\u5206\u53ef\u4ee5\u7f3a\u7701\uff0c\u4f46\u4e0d\u80fd\u90fd\u6ca1\u6709\u3002\u4f8b\u5982\uff1a double a, b, c, d, e, f; a = 4.7; b = 4.; c = 4; d = .7; e = 0.7; \uff08\u5728\u7b2c\u4e09\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\uff0c\u6574\u6570\u5e38\u91cf 4 \u88ab\u81ea\u52a8\u4ece int \u8f6c\u4e3a double\uff09 \u5b9e\u6570\u5e38\u91cf\u4e5f\u53ef\u4ee5\u8ddf\u4e00\u4e2a e \u6216 E\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u6574\u6570\u6307\u6570\u3002\u8fd9\u4e2a\u6307\u6570\u53ef\u6b63\u53ef\u8d1f\u3002 double x, y; x = 5e2; /* x is 5 * 100, or 500.0. */ y = 5e-2; /* y is 5 * (1/100), or 0.05. */ \u4f60\u53ef\u4ee5\u5728\u5b9e\u6570\u5e38\u91cf\u5c3e\u90e8\u52a0\u4e00\u4e2a\u5b57\u6bcd\u8ba9\u5b83\u62e5\u6709\u660e\u786e\u7684\u7c7b\u578b\u3002\u5982\u679c\u4f60\u52a0\u4e86\u4e00\u4e2a F\uff08\u6216\u8005 f\uff09\u5b83\u5c31\u662f float \u7c7b\u578b\u4e86\uff1b\u5982\u679c\u4f60\u52a0\u4e86 L\uff08\u6216\u8005 l\uff09\u90a3\u5b83\u5c31\u662f double \u7c7b\u578b\u4e86\u3002\u5982\u679c\u4e0d\u52a0\uff0c\u9ed8\u8ba4\u662f double \u3002 1.3.4 \u5b57\u7b26\u4e32\u5e38\u91cf \u00b6 \u5b57\u7b26\u4e32\u5e38\u91cf\u662f 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u3001\u6570\u5b57\u4ee5\u53ca\u8f6c\u4e49\u5b57\u7b26\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u88ab\u53cc\u5f15\u53f7\u5f15\u8d77\u6765\u3002\u5b57\u7b26\u4e32\u5e38\u91cf\u7b97\u662f\u201c\u5b57\u7b26\u6570\u7ec4\u201d\u7c7b\u578b\u3002\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u90fd\u5305\u542b\u4e00\u4e2a null \u7ec8\u6b62\u7b26\uff08 \\0 \uff09\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u7b26\u6570\u7ec4\u6765\u5b58\u50a8\uff0c\u4f46\u4e0d\u5305\u542b\u5176\u5927\u5c0f\u5c5e\u6027\u3002null \u7ec8\u6b62\u7b26\u544a\u8bc9\u5b57\u7b26\u4e32\u5904\u7406\u51fd\u6570\u5b57\u7b26\u4e32\u5728\u54ea\u91cc\u7ed3\u675f\u3002 \u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u4f1a\u88ab\u62fc\u63a5\uff08\u5408\u5e76\uff09\u79f0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5728\u5c3e\u90e8\u52a0\u4e0a null \u7ec8\u6b62\u7b26\u3002 \u5b57\u7b26\u4e32\u4e0d\u80fd\u5305\u542b\u53cc\u5f15\u53f7\uff0c\u8fd9\u662f\u56e0\u4e3a\u53cc\u5f15\u53f7\u7528\u6765\u5f15\u4f4f\u5b57\u7b26\u4e32\u3002\u4e3a\u4e86\u80fd\u591f\u5728\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u53cc\u5f15\u53f7\uff0c\u5fc5\u987b\u4f7f\u7528 \\\" \u8f6c\u4e49\u5e8f\u5217\u3002\u4f60\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u4efb\u4f55\u5728\u5b57\u7b26\u5e38\u91cf\u4e2d\u4f7f\u7528\u7684\u8f6c\u4e49\u5e8f\u5217\u3002\u4e0b\u9762\u662f\u51e0\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u4f8b\u5b50\uff1a /* This is a single string constant. */ \"tutti frutti ice cream\" /* These string constants will be concatenated, same as above. */ \"tutti \" \"frutti\" \" ice \" \"cream\" /* This one uses two escape sequences. */ \"\\\"hello, world!\\\"\" \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u592a\u957f\u5bfc\u81f4\u4e00\u884c\u653e\u4e0d\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u7ebf \\ \u6765\u5206\u5272\u6210\u591a\u884c\u3002 \"Today's special is a pastrami sandwich on rye bread with \\ a potato knish and a cherry soda.\" \u56e0\u4e3a\u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u88ab\u81ea\u52a8\u62fc\u63a5\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u628a\u957f\u5b57\u7b26\u4e32\u8de8\u8d8a\u591a\u884c\u5199\u6210\u5206\u79bb\u7684\u76f8\u90bb\u7684\u591a\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a \"Tomorrow's special is a corned beef sandwich on \" \"pumpernickel bread with a kasha knish and seltzer water.\" \u548c\u4e0b\u9762\u8fd9\u6837\u5199\u662f\u4e00\u6837\u7684\uff1a \"Tomorrow's special is a corned beef sandwich on \\ pumpernickel bread with a kasha knish and seltzer water.\" \u4e3a\u4e86\u63d2\u5165\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u4f7f\u5f97\u5f53\u6253\u5370\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u80fd\u88ab\u6253\u5370\u5728 2 \u884c\uff0c\u4f60\u8981\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217 '\\n'\u3002 printf (\"potato\\nknish\"); \u4f1a\u88ab\u6253\u5370\u6210 potato knish 1.4 \u64cd\u4f5c\u7b26 \u00b6 \u64cd\u4f5c\u7b26\u662f\u4e00\u79cd\u7279\u6b8a\u7684 token\uff0c\u7528\u6765\u5bf9\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u8005\u4e09\u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u8fd0\u7b97\uff0c\u5982\u52a0\u53f7\uff08 + \uff09\u6216\u8005\u51cf\u53f7\uff08 - \uff09\u3002\u64cd\u4f5c\u7b26\u7684\u5168\u90e8\u5185\u5bb9\u53ef\u4ee5\u5728\u540e\u9762\u7ae0\u8282\u627e\u5230\u3002\u8be6\u89c1 \u8868\u8fbe\u5f0f\u4e0e\u64cd\u4f5c\u7b26 1.5 \u5206\u9694\u7b26 \u00b6 \u5206\u9694\u7b26\u7528\u6765\u5206\u5272 token\u3002\u7a7a\u767d\u7b26\uff08\u89c1\u4e0b\u8282\uff09\u662f\u4e00\u79cd\u5206\u9694\u7b26\uff0c\u4f46\u5b83\u5374\u4e0d\u662f\u4e00\u4e2a token\u3002\u5176\u4ed6\u5206\u9694\u7b26\u672c\u8eab\u90fd\u662f\u5355\u5b57\u7b26 token\uff1a ( ) [ ] { } ; , . : 1.6 \u7a7a\u767d\u7b26 \u00b6 \u7a7a\u767d\u7b26\u662f\u7528\u4e8e\u8fd9\u51e0\u79cd\u5b57\u7b26\u7684\u96c6\u4f53\u540d\u8bcd\uff1a\u7a7a\u683c\u7b26\u3001\u6c34\u5e73\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u3001\u5782\u76f4\u5236\u8868\u7b26\u4ee5\u53ca\u9988\u9875\u7b26\u3002\u7a7a\u767d\u7b26\u4f1a\u88ab\u5ffd\u7565\u6389\uff08\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u548c\u5b57\u7b26\u5e38\u91cf\u5916\u9762\u7684\uff09\u56e0\u6b64\u5b83\u4eec\u662f\u53ef\u6709\u53ef\u65e0\uff0c\u9664\u975e\u4ed6\u4eec\u88ab\u7528\u4e8e\u5206\u5272 token\u3002\u8fd9\u610f\u5473\u7740 #include <stdio.h> int main() { printf( \"hello, world\\n\" ); return 0; } \u548c #include <stdio.h> int main(){printf(\"hello, world\\n\"); return 0;} \u5728\u529f\u80fd\u4e0a\u662f\u76f8\u540c\u7684\u7a0b\u5e8f\u3002 \u5c3d\u7ba1\u4f60\u5fc5\u987b\u4f7f\u7528\u7a7a\u767d\u7b26\u6765\u5206\u5272\u8bb8\u591a token\uff0c\u4f46\u64cd\u4f5c\u7b26\u548c\u64cd\u4f5c\u6570\u4e4b\u95f4\u4e0d\u9700\u8981\u7a7a\u767d\u7b26\uff0c\u5176\u4ed6\u5206\u9694\u7b26\u4e0e\u4ed6\u4eec\u5206\u5272\u7684\u5185\u5bb9\u4e4b\u95f4\u4e5f\u4e0d\u9700\u8981\u7a7a\u767d\u7b26\u3002 /* \u4e0b\u9762\u8fd9\u4e9b\u90fd\u662f\u6b63\u786e\u7684 */ x++; x ++ ; x=y+z; x = y + z ; x=array[2]; x = array [ 2 ] ; fraction=numerator / *denominator_ptr; fraction = numerator / * denominator_ptr ; \u6b64\u5916\uff0c\u4efb\u4f55\u5141\u8bb8\u4f7f\u7528\u4e00\u4e2a\u7a7a\u767d\u7b26\u7684\u5730\u65b9\uff0c\u4e00\u5b9a\u5141\u8bb8\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u7a7a\u767d\u7b26\u3002 /* These two statements are functionally identical. */ x++; x ++ ; \u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u4e2d\uff0c\u7a7a\u683c\u548c\u6c34\u5e73\u5236\u8868\u7b26\u4e0d\u80fd\u88ab\u5ffd\u7565\uff1b\u786e\u5207\u8bf4\uff0c\u4ed6\u4eec\u662f\u8be5\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64 \"potato knish\" \u548c \"potato knish\" \u662f\u4e0d\u4e00\u6837\u7684\u3002","title":"1. \u8bcd\u6cd5\u5143\u7d20"},{"location":"Lexical-Elements/#Identifiers","text":"\u6807\u8bc6\u7b26\u662f\u4e00\u79cd\u4e3a\u53d8\u91cf\u3001\u51fd\u6570\u3001\u65b0\u6570\u636e\u7c7b\u578b\u4ee5\u53ca\u9884\u5904\u7406\u5b8f\u547d\u540d\u7684\u5b57\u7b26\u5e8f\u5217\u3002\u4f60\u53ef\u4ee5\u5728\u6807\u8bc6\u7b26\u4e2d\u4f7f\u7528\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf '_'\u3002 \u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u662f\u6570\u5b57\u3002 \u5927\u5c0f\u5199\u5b57\u6bcd\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u6b64\uff0c foo \u548c FOO \u662f\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002 \u5728\u4f7f\u7528 GNU \u6269\u5c55\u65f6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f8e\u5143\u7b26\u53f7 '$'","title":"1.1 \u6807\u8bc6\u7b26"},{"location":"Lexical-Elements/#Keywords","text":"\u5173\u952e\u5b57\u662f\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff0c\u88ab\u4fdd\u7559\u4f5c\u4e3a\u8bed\u8a00\u672c\u8eab\u7684\u4e00\u90e8\u5206\u3002\u4f60\u4e0d\u80fd\u632a\u4e3a\u4ed6\u7528\u3002 \u8fd9\u91cc\u5217\u51fa C89 \u8bc6\u522b\u7684\u5173\u952e\u5b57\uff1a auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while ISO C99 \u589e\u52a0\u4e86\u4ee5\u4e0b\u5173\u952e\u5b57\uff1a inline _Bool _Complex _Imaginary GNU \u6269\u5c55\u589e\u52a0\u4e86\u4ee5\u4e0b\u5173\u952e\u5b57\uff1a __FUNCTION__ __PRETTY_FUNCTION__ __alignof __alignof__ __asm __asm__ __attribute __attribute__ __builtin_offsetof __builtin_va_arg __complex __complex__ __const __extension__ __func__ __imag __imag__ __inline __inline__ __label__ __null __real __real__ __restrict __restrict__ __signed __signed__ __thread __typeof __volatile __volatile__ C89 \u548c C99 \u7684 GNU \u6269\u5c55\u90fd\u53ef\u4ee5\u8bc6\u522b\u4e0b\u9762\u8fd9\u4e2a\u5173\u952e\u5b57\uff1a restrict","title":"1.2 \u5173\u952e\u5b57"},{"location":"Lexical-Elements/#Constants","text":"\u5e38\u91cf\u5c31\u662f\u6570\u5b57\u6216\u8005\u5b57\u7b26\u7684\u5b57\u9762\u91cf\uff0c\u5982 5 \u3001 'm' \u3002\u6240\u6709\u5e38\u91cf\u90fd\u6709\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\uff1b\u4f60\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u6765\u660e\u786e\u6307\u5b9a\u4e00\u4e2a\u5e38\u91cf\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8ba9\u7f16\u8bd1\u5668\u6839\u636e\u5e38\u91cf\u503c\u4f7f\u7528\u9ed8\u8ba4\u7c7b\u578b\u3002","title":"1.3 \u5e38\u91cf"},{"location":"Lexical-Elements/#Integer-Constants","text":"\u6574\u5f62\u5e38\u91cf\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u53ef\u4ee5\u5e26\u4e00\u4e2a\u53ef\u9009\u7684\u524d\u7f00\u6765\u6307\u793a\u8fdb\u5236\u3002 \u5982\u679c\u6570\u5b57\u5e8f\u5217\u524d\u5e26\u6709 0x \u6216 0X \uff08zero x \u6216\u8005 zero X\uff09\uff0c\u8fd9\u4e2a\u5e38\u91cf\u5c31\u662f\u5341\u516d\u8fdb\u5236\u7684\uff08base 16\uff09\u3002\u5341\u516d\u8fdb\u5236\u6570\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57 0~9 \u8fd8\u6709 \u5b57\u6bcd a~f \u4ee5\u53ca A~F \u3002\u4f8b\u5982\uff1a 0x2f 0x88 0xAB43 0xAbCd 0x1 \u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u4f4d\u662f 0 \uff08zero\uff09\u5e76\u4e14\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f x \u6216 X \uff0c\u5219\u8fd9\u4e2a\u5e38\u91cf\u5c31\u662f\u516b\u8fdb\u5236\u7684\uff08base 8\uff09\u3002\u516b\u8fdb\u5236\u7684\u503c\u53ea\u80fd\u4f7f\u7528\u6570\u5b57 0~7 \uff1b 8 \u548c 9 \u4e0d\u5141\u8bb8\u4f7f\u7528\u3002\u4f8b\u5982\uff1a 057 012 03 0241 \u4e0d\u662f\u4ee5\u4e0a\u4e24\u79cd\u7684\u8bdd\uff0c\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\u5c31\u88ab\u8ba4\u4e3a\u662f\u5341\u8fdb\u5236\u7684\uff08base 10\uff09\u3002\u5341\u8fdb\u5236\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57 0~9 \u3002\u4f8b\u5982\uff1a 459 23901 8 12 \u6709\u4e0d\u540c\u7684\u6574\u6570\u7c7b\u578b\uff0c\u5982\u77ed\u6574\u578b\uff08short\uff09\u3001\u957f\u6574\u578b\uff08long\uff09\u3001\u6709\u7b26\u53f7\u6574\u578b\uff08signed\uff09\u548c\u65e0\u7b26\u53f7\u6574\u578b\uff08unsigned\uff09\u3002\u4f60\u53ef\u4ee5\u5728\u5e38\u91cf\u540e\u9762\u52a0\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bcd\u5f3a\u5236\u5c06\u4e00\u4e2a\u6574\u578b\u5e38\u91cf\u53d8\u6210\u957f\u6574\u578b \u548c/\u6216 \u65e0\u7b26\u53f7\u6574\u578b\uff1a u U \u65e0\u7b26\u53f7\u6574\u578b\u3002 l L \u957f\u6574\u5f62\u3002 \u4f8b\u5982\uff0c 45U \u662f\u4e00\u4e2a unsigned int \u5e38\u91cf\u3002\u4f60\u4e5f\u53ef\u4ee5\u7ec4\u5408\u5b57\u6bcd\uff1a 45UL \u5c31\u662f\u4e00\u4e2a unsigned long int \u5e38\u91cf\u4e86\uff08\u5b57\u7b26\u53ef\u4ee5\u662f\u4efb\u610f\u987a\u5e8f\uff09\u3002 ISO C99 \u548c GNU C \u6269\u5c55\u90fd\u589e\u52a0\u4e86 long long int \u548c unsigned long long int \u7c7b\u578b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 2 \u4e2a L \u6765\u5f97\u5230\u4e00\u4e2a long long int \u5e38\u91cf\uff1b\u589e\u52a0\u4e00\u4e2a 'U' \u5c06\u5f97\u5230\u4e00\u4e2a unsigned long long int \u5e38\u91cf\u3002\u4f8b\u5982\uff0c 45ULL \u3002","title":"1.3.1 \u6574\u5f62\u5e38\u91cf"},{"location":"Lexical-Elements/#Character-Constants","text":"\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u901a\u5e38\u662f\u4e00\u4e2a\u88ab\u5355\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5355\u4e2a\u5b57\u7b26\uff0c\u5982 'Q' \u3002\u4e00\u4e2a\u5b57\u7b26\u5e38\u91cf\u9ed8\u8ba4\u662f int \u7c7b\u578b\u3002 \u4e00\u4e9b\u5b57\u7b26\uff0c\u5982\u5355\u5f15\u53f7\u672c\u8eab\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u3002\u4e3a\u4e86\u8868\u793a\u8fd9\u6837\u7684\u5b57\u7b26\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u201c\u8f6c\u4e49\u5e8f\u5217\u201d\uff1a \\\\ \u53cd\u659c\u7ebf \\? \u95ee\u53f7 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\a \u58f0\u97f3\u8b66\u62a5 \\b \u9000\u683c\u5b57\u7b26 \\e <ESC> \u5b57\u7b26\u3002\uff08\u8fd9\u4e2a\u662f GNU \u6269\u5c55\uff09 \\f \u9988\u9875 \\n \u6362\u884c \\r \u56de\u8f66 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\v \u5782\u76f4\u5236\u8868\u7b26 \\o, \\oo, \\ooo \u516b\u8fdb\u5236\u6570 \\xh, \\xhh, \\xhhh, \u2026 \u5341\u516d\u8fdb\u5236\u6570 \u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u8f6c\u4e49\u5e8f\u5217\u90fd\u8981\u4f7f\u7528\u5355\u5f15\u53f7\u5f15\u8d77\u6765\uff0c\u5e76\u50cf\u5bf9\u5f85\u5176\u4ed6\u5b57\u7b26\u4e00\u6837\u3002\u4f8b\u5982\uff1a\u5b57\u6bcd m \u662f 'm'\uff1b\u6362\u884c\u7b26\u662f '\\n'\u3002 \u516b\u8fdb\u5236\u6570\u8f6c\u4e49\u5e8f\u5217\u662f\u4e00\u4e2a\u53cd\u659c\u6760\u8ddf\u7740 1 \u4e2a\u30012 \u4e2a\u6216\u8005 3 \u4e2a\u516b\u8fdb\u5236\u6570\u5b57\uff080~7\uff09\u3002\u4f8b\u5982\uff0c\u516b\u8fdb\u5236 101 \u7b49\u4e8e\u5341\u8fdb\u5236\u7684 65\uff0c\u5373 ASCII\u5b57\u7b26 'A'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u5e38\u91cf '\\101' \u8ddf\u5b57\u7b26\u5e38\u91cf 'A' \u662f\u4e00\u6837\u7684\u3002 \u5341\u516d\u8fdb\u5236\u8f6c\u4e49\u5e8f\u5217\u662f\u4e00\u4e2a\u53cd\u659c\u6760\u8ddf\u7740\u4e00\u4e2a x \u4ee5\u53ca\u65e0\u9650\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\uff080~9, a~f, A~F\uff09\u3002 \u867d\u7136\u53ef\u80fd\u7684\u5341\u516d\u8fdb\u5236\u6570\u5b57\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u65e0\u9650\u5236\u7684\uff0c\u4f46\u662f\u4efb\u4f55\u7ed9\u5b9a\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\u5e38\u91cf\u7684\u6570\u91cf\u90fd\u4e0d\u662f\u65e0\u9650\u7684\u3002\uff08\u4f8b\u5982\uff0c\u7ecf\u5e38\u4f7f\u7528\u7684\u6269\u5c55\u7684ASCII\u5b57\u7b26\u4e32\u53ea\u6709 256 \u4e2a\u5b57\u7b26\uff09\u5982\u679c\u4f60\u8bd5\u56fe\u4f7f\u7528\u4e00\u4e2a\u8d85\u8fc7\u8fd9\u4e2a\u5b57\u7b26\u8303\u56f4\u7684\u5341\u516d\u8fdb\u5236\u503c\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u7684\u3002","title":"1.3.2 \u5b57\u7b26\u5e38\u91cf"},{"location":"Lexical-Elements/#Real-Number-Constants","text":"\u5b9e\u6570\u5e38\u91cf\u662f\u4e00\u4e2a\u8868\u793a\u5206\u6570\uff08\u6d6e\u70b9\u6570\uff09\u7684\u503c\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u8868\u793a\u8be5\u6570\u6574\u6570\u90e8\u5206\uff08\u6216\u8005\u8be5\u6570\uff09\u7684\u6570\u5b57\u5e8f\u5217\uff0c\u4e00\u4e2a\u5c0f\u6570\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2a\u8868\u793a\u5206\u6570\u90e8\u5206\u7684\u6570\u5b57\u5e8f\u5217\u3002 \u6574\u6570\u90e8\u5206\u6216\u8005\u5206\u6570\u90e8\u5206\u53ef\u4ee5\u7f3a\u7701\uff0c\u4f46\u4e0d\u80fd\u90fd\u6ca1\u6709\u3002\u4f8b\u5982\uff1a double a, b, c, d, e, f; a = 4.7; b = 4.; c = 4; d = .7; e = 0.7; \uff08\u5728\u7b2c\u4e09\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\uff0c\u6574\u6570\u5e38\u91cf 4 \u88ab\u81ea\u52a8\u4ece int \u8f6c\u4e3a double\uff09 \u5b9e\u6570\u5e38\u91cf\u4e5f\u53ef\u4ee5\u8ddf\u4e00\u4e2a e \u6216 E\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u6574\u6570\u6307\u6570\u3002\u8fd9\u4e2a\u6307\u6570\u53ef\u6b63\u53ef\u8d1f\u3002 double x, y; x = 5e2; /* x is 5 * 100, or 500.0. */ y = 5e-2; /* y is 5 * (1/100), or 0.05. */ \u4f60\u53ef\u4ee5\u5728\u5b9e\u6570\u5e38\u91cf\u5c3e\u90e8\u52a0\u4e00\u4e2a\u5b57\u6bcd\u8ba9\u5b83\u62e5\u6709\u660e\u786e\u7684\u7c7b\u578b\u3002\u5982\u679c\u4f60\u52a0\u4e86\u4e00\u4e2a F\uff08\u6216\u8005 f\uff09\u5b83\u5c31\u662f float \u7c7b\u578b\u4e86\uff1b\u5982\u679c\u4f60\u52a0\u4e86 L\uff08\u6216\u8005 l\uff09\u90a3\u5b83\u5c31\u662f double \u7c7b\u578b\u4e86\u3002\u5982\u679c\u4e0d\u52a0\uff0c\u9ed8\u8ba4\u662f double \u3002","title":"1.3.3 \u5b9e\u6570\u5e38\u91cf"},{"location":"Lexical-Elements/#String-Constants","text":"\u5b57\u7b26\u4e32\u5e38\u91cf\u662f 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u3001\u6570\u5b57\u4ee5\u53ca\u8f6c\u4e49\u5b57\u7b26\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u88ab\u53cc\u5f15\u53f7\u5f15\u8d77\u6765\u3002\u5b57\u7b26\u4e32\u5e38\u91cf\u7b97\u662f\u201c\u5b57\u7b26\u6570\u7ec4\u201d\u7c7b\u578b\u3002\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u90fd\u5305\u542b\u4e00\u4e2a null \u7ec8\u6b62\u7b26\uff08 \\0 \uff09\u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u7b26\u6570\u7ec4\u6765\u5b58\u50a8\uff0c\u4f46\u4e0d\u5305\u542b\u5176\u5927\u5c0f\u5c5e\u6027\u3002null \u7ec8\u6b62\u7b26\u544a\u8bc9\u5b57\u7b26\u4e32\u5904\u7406\u51fd\u6570\u5b57\u7b26\u4e32\u5728\u54ea\u91cc\u7ed3\u675f\u3002 \u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u4f1a\u88ab\u62fc\u63a5\uff08\u5408\u5e76\uff09\u79f0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5728\u5c3e\u90e8\u52a0\u4e0a null \u7ec8\u6b62\u7b26\u3002 \u5b57\u7b26\u4e32\u4e0d\u80fd\u5305\u542b\u53cc\u5f15\u53f7\uff0c\u8fd9\u662f\u56e0\u4e3a\u53cc\u5f15\u53f7\u7528\u6765\u5f15\u4f4f\u5b57\u7b26\u4e32\u3002\u4e3a\u4e86\u80fd\u591f\u5728\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u53cc\u5f15\u53f7\uff0c\u5fc5\u987b\u4f7f\u7528 \\\" \u8f6c\u4e49\u5e8f\u5217\u3002\u4f60\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u4efb\u4f55\u5728\u5b57\u7b26\u5e38\u91cf\u4e2d\u4f7f\u7528\u7684\u8f6c\u4e49\u5e8f\u5217\u3002\u4e0b\u9762\u662f\u51e0\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u4f8b\u5b50\uff1a /* This is a single string constant. */ \"tutti frutti ice cream\" /* These string constants will be concatenated, same as above. */ \"tutti \" \"frutti\" \" ice \" \"cream\" /* This one uses two escape sequences. */ \"\\\"hello, world!\\\"\" \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u592a\u957f\u5bfc\u81f4\u4e00\u884c\u653e\u4e0d\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u7ebf \\ \u6765\u5206\u5272\u6210\u591a\u884c\u3002 \"Today's special is a pastrami sandwich on rye bread with \\ a potato knish and a cherry soda.\" \u56e0\u4e3a\u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u88ab\u81ea\u52a8\u62fc\u63a5\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u628a\u957f\u5b57\u7b26\u4e32\u8de8\u8d8a\u591a\u884c\u5199\u6210\u5206\u79bb\u7684\u76f8\u90bb\u7684\u591a\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a \"Tomorrow's special is a corned beef sandwich on \" \"pumpernickel bread with a kasha knish and seltzer water.\" \u548c\u4e0b\u9762\u8fd9\u6837\u5199\u662f\u4e00\u6837\u7684\uff1a \"Tomorrow's special is a corned beef sandwich on \\ pumpernickel bread with a kasha knish and seltzer water.\" \u4e3a\u4e86\u63d2\u5165\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u4f7f\u5f97\u5f53\u6253\u5370\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u80fd\u88ab\u6253\u5370\u5728 2 \u884c\uff0c\u4f60\u8981\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217 '\\n'\u3002 printf (\"potato\\nknish\"); \u4f1a\u88ab\u6253\u5370\u6210 potato knish","title":"1.3.4 \u5b57\u7b26\u4e32\u5e38\u91cf"},{"location":"Lexical-Elements/#Operators","text":"\u64cd\u4f5c\u7b26\u662f\u4e00\u79cd\u7279\u6b8a\u7684 token\uff0c\u7528\u6765\u5bf9\u4e00\u4e2a\u3001\u4e24\u4e2a\u6216\u8005\u4e09\u4e2a\u64cd\u4f5c\u6570\u8fdb\u884c\u8fd0\u7b97\uff0c\u5982\u52a0\u53f7\uff08 + \uff09\u6216\u8005\u51cf\u53f7\uff08 - \uff09\u3002\u64cd\u4f5c\u7b26\u7684\u5168\u90e8\u5185\u5bb9\u53ef\u4ee5\u5728\u540e\u9762\u7ae0\u8282\u627e\u5230\u3002\u8be6\u89c1 \u8868\u8fbe\u5f0f\u4e0e\u64cd\u4f5c\u7b26","title":"1.4 \u64cd\u4f5c\u7b26"},{"location":"Lexical-Elements/#Separators","text":"\u5206\u9694\u7b26\u7528\u6765\u5206\u5272 token\u3002\u7a7a\u767d\u7b26\uff08\u89c1\u4e0b\u8282\uff09\u662f\u4e00\u79cd\u5206\u9694\u7b26\uff0c\u4f46\u5b83\u5374\u4e0d\u662f\u4e00\u4e2a token\u3002\u5176\u4ed6\u5206\u9694\u7b26\u672c\u8eab\u90fd\u662f\u5355\u5b57\u7b26 token\uff1a ( ) [ ] { } ; , . :","title":"1.5 \u5206\u9694\u7b26"},{"location":"Lexical-Elements/#White-Space","text":"\u7a7a\u767d\u7b26\u662f\u7528\u4e8e\u8fd9\u51e0\u79cd\u5b57\u7b26\u7684\u96c6\u4f53\u540d\u8bcd\uff1a\u7a7a\u683c\u7b26\u3001\u6c34\u5e73\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u3001\u5782\u76f4\u5236\u8868\u7b26\u4ee5\u53ca\u9988\u9875\u7b26\u3002\u7a7a\u767d\u7b26\u4f1a\u88ab\u5ffd\u7565\u6389\uff08\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u548c\u5b57\u7b26\u5e38\u91cf\u5916\u9762\u7684\uff09\u56e0\u6b64\u5b83\u4eec\u662f\u53ef\u6709\u53ef\u65e0\uff0c\u9664\u975e\u4ed6\u4eec\u88ab\u7528\u4e8e\u5206\u5272 token\u3002\u8fd9\u610f\u5473\u7740 #include <stdio.h> int main() { printf( \"hello, world\\n\" ); return 0; } \u548c #include <stdio.h> int main(){printf(\"hello, world\\n\"); return 0;} \u5728\u529f\u80fd\u4e0a\u662f\u76f8\u540c\u7684\u7a0b\u5e8f\u3002 \u5c3d\u7ba1\u4f60\u5fc5\u987b\u4f7f\u7528\u7a7a\u767d\u7b26\u6765\u5206\u5272\u8bb8\u591a token\uff0c\u4f46\u64cd\u4f5c\u7b26\u548c\u64cd\u4f5c\u6570\u4e4b\u95f4\u4e0d\u9700\u8981\u7a7a\u767d\u7b26\uff0c\u5176\u4ed6\u5206\u9694\u7b26\u4e0e\u4ed6\u4eec\u5206\u5272\u7684\u5185\u5bb9\u4e4b\u95f4\u4e5f\u4e0d\u9700\u8981\u7a7a\u767d\u7b26\u3002 /* \u4e0b\u9762\u8fd9\u4e9b\u90fd\u662f\u6b63\u786e\u7684 */ x++; x ++ ; x=y+z; x = y + z ; x=array[2]; x = array [ 2 ] ; fraction=numerator / *denominator_ptr; fraction = numerator / * denominator_ptr ; \u6b64\u5916\uff0c\u4efb\u4f55\u5141\u8bb8\u4f7f\u7528\u4e00\u4e2a\u7a7a\u767d\u7b26\u7684\u5730\u65b9\uff0c\u4e00\u5b9a\u5141\u8bb8\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u7a7a\u767d\u7b26\u3002 /* These two statements are functionally identical. */ x++; x ++ ; \u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u4e2d\uff0c\u7a7a\u683c\u548c\u6c34\u5e73\u5236\u8868\u7b26\u4e0d\u80fd\u88ab\u5ffd\u7565\uff1b\u786e\u5207\u8bf4\uff0c\u4ed6\u4eec\u662f\u8be5\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64 \"potato knish\" \u548c \"potato knish\" \u662f\u4e0d\u4e00\u6837\u7684\u3002","title":"1.6 \u7a7a\u767d\u7b26"},{"location":"License/","text":"GNU Free Documentation License \u00b6 Version 1.3, 3 November 2008 Copyright \u00a9 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. State on the Title page the name of the publisher of the Modified Version, as the publisher. Preserve all the copyright notices of the Document. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. Include an unaltered copy of this License. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u2014for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements.\u201d COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document. RELICENSING \u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents \u00b6 To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) year your name. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ``GNU Free Documentation License''. If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith\u2026Texts.\u201d line with this: with the Invariant Sections being list their titles, with the Front-Cover Texts being list, and with the Back-Cover Texts being list. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"License"},{"location":"License/#gnu-free-documentation-license","text":"Version 1.3, 3 November 2008 Copyright \u00a9 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d. Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body of the text. The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public. A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. State on the Title page the name of the publisher of the Modified Version, as the publisher. Preserve all the copyright notices of the Document. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s license notice. Include an unaltered copy of this License. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct from any other section titles. You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by various parties\u2014for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You must delete all sections Entitled \u201cEndorsements.\u201d COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/ . Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Document. RELICENSING \u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works thus published on the MMC site. \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.","title":"GNU Free Documentation License"},{"location":"License/#addendum-how-to-use-this-license-for-your-documents","text":"To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (C) year your name. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ``GNU Free Documentation License''. If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith\u2026Texts.\u201d line with this: with the Invariant Sections being list their titles, with the Front-Cover Texts being list, and with the Back-Cover Texts being list. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"ADDENDUM: How to use this License for your documents"},{"location":"Preface/","text":"\u524d\u8a00 \u00b6 \u8fd9\u662f\u4e00\u4efd\u7531 GNU Compiler Collection\uff08GCC\uff09\u5b9e\u73b0\u7684 C \u7f16\u7a0b\u8bed\u8a00\u7684\u53c2\u8003\u624b\u518c\u3002\u7279\u522b\u6307\u51fa\uff0c\u8fd9\u4efd\u624b\u518c\u9488\u5bf9\u7684\u662f\uff1a 1989 ANSI C \u6807\u51c6\uff0c\u4fd7\u79f0 \u201cC89\u201d 1999 ISO C \u6807\u51c6\uff0c\u4fd7\u79f0 \u201cC99\u201d\uff0c\u9488\u5bf9 GCC \u5b9e\u73b0\u7684 C99 \u90e8\u5206 \u5f53\u524d\u7684 GNU \u6807\u51c6 C \u6269\u5c55 \u8fd9\u4efd\u624b\u518c\u4ee5 C89 \u4f5c\u4e3a\u57fa\u7840\u3002C99 \u7279\u6027\u4ee5\u53ca GNU \u6269\u5c55\u90fd\u4f1a\u660e\u786e\u6807\u6ce8\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGCC \u4f1a\u628a\u4ee3\u7801\u5f53\u505a C89+GNU \u7279\u5b9a\u6269\u5c55\u6765\u7f16\u8bd1\u3002\u5927\u90e8\u5206 C99 \u7279\u6027\u5df2\u7ecf\u88ab\u652f\u6301\uff1b\u4e00\u65e6\u6240\u6709\u7279\u6027\u53ef\u7528\uff0c\u9ed8\u8ba4\u7f16\u8bd1\u8bed\u8a00\u5c06\u6539\u4e3a C99+GNU \u7279\u5b9a\u6269\u5c55\uff08\u4e00\u4e9b\u9488\u5bf9 C89 \u7684 GNU \u6269\u5c55\u5c06\u88ab\u79fb\u9664\uff0c\u6709\u7684\u505a\u4e86\u8f7b\u5fae\u6539\u52a8\u4ee5\u4f5c\u4e3a C99 \u4e2d\u7684\u6807\u51c6\u7279\u6027\uff09\u3002 C \u8bed\u8a00\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u9884\u5904\u7406\u6307\u4ee4\uff0c\u88ab\u7528\u4e8e\u5b8f\u6587\u672c\u66ff\u6362\uff0c\u6761\u4ef6\u7f16\u8bd1\u4ee5\u53ca\u6587\u4ef6\u5f15\u5165\u3002\u5c3d\u7ba1\u901a\u5e38\u4f1a\u5728 C \u8bed\u8a00\u624b\u518c\u4e2d\u63cf\u8ff0\uff0c\u4f46 GNU C \u9884\u5904\u7406\u5668\u88ab\u5b8c\u5168\u5f52\u6863\u5728\u4e86 C \u9884\u5904\u7406\u5668 \u4e2d\u3002\u8be5\u6587\u6863\u8986\u76d6\u4e86 C\u3001C++ \u4ee5\u53ca Objective-C \u7684\u9884\u5904\u7406\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c06\u4e0d\u518d\u5305\u542b\u8fd9\u4e9b\u5185\u5bb9\u3002 \u81f4\u8c22 \u00b6 \u975e\u5e38\u611f\u8c22\u5e2e\u52a9\u7f16\u8f91\u3001\u6821\u5bf9\u3001\u63d0\u4f9b\u5efa\u8bae\u3001\u6392\u7248\u4ee5\u53ca\u6587\u6848\u7684\u6240\u6709\u4eba\uff0c\u5305\u62ec\uff1aDiego Andres Alvarez Marin, Nelson H. F. Beebe, Karl Berry, Robert Chassell, Hanfeng Chen, Mark de Volld, Antonio Diaz Diaz, dine, Andreas Foerster, Denver Gingerich, Lisa Goldstein, Robert Hansen, Jean-Christophe Helary, Mogens Hetsholm, Teddy Hogeborn, Joe Humphries, J. Wren Hunt, Dutch Ingraham, Adam Johansen, Vladimir Kadlec, Benjamin Kagia, Dright Kayorent, Sugun Kedambadi, Felix Lee, Bjorn Liencres, Steve Morningthunder, Aljosha Papsch, Matthew Plant, Jonathan Sisti, Richard Stallman, J. Otto Tennant, Ole Tetlie, Keith Thompson, T.F. Torrey, James Youngman, and Steve Zachar\u3002Trevis Rothwell \u4f5c\u4e3a\u9879\u76ee\u7ef4\u62a4\u4eba\u5458 \u548c James Youngman \u4e00\u8d77\u5199\u4e86\u5927\u90e8\u5206\u7684\u5185\u5bb9\u3002 \u4e00\u4e9b\u793a\u4f8b\u7a0b\u5e8f\u662f\u57fa\u4e8e Donald Knuth \u7684 \u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u827a\u672f \u4e2d\u7684\u7b97\u6cd5\u3002 bug \u62a5\u544a\u548c\u5efa\u8bae\u8bf7\u53d1\u90ae\u4ef6\u81f3 gnu-c-manual@gnu.org","title":"\u524d\u8a00"},{"location":"Preface/#_1","text":"\u8fd9\u662f\u4e00\u4efd\u7531 GNU Compiler Collection\uff08GCC\uff09\u5b9e\u73b0\u7684 C \u7f16\u7a0b\u8bed\u8a00\u7684\u53c2\u8003\u624b\u518c\u3002\u7279\u522b\u6307\u51fa\uff0c\u8fd9\u4efd\u624b\u518c\u9488\u5bf9\u7684\u662f\uff1a 1989 ANSI C \u6807\u51c6\uff0c\u4fd7\u79f0 \u201cC89\u201d 1999 ISO C \u6807\u51c6\uff0c\u4fd7\u79f0 \u201cC99\u201d\uff0c\u9488\u5bf9 GCC \u5b9e\u73b0\u7684 C99 \u90e8\u5206 \u5f53\u524d\u7684 GNU \u6807\u51c6 C \u6269\u5c55 \u8fd9\u4efd\u624b\u518c\u4ee5 C89 \u4f5c\u4e3a\u57fa\u7840\u3002C99 \u7279\u6027\u4ee5\u53ca GNU \u6269\u5c55\u90fd\u4f1a\u660e\u786e\u6807\u6ce8\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGCC \u4f1a\u628a\u4ee3\u7801\u5f53\u505a C89+GNU \u7279\u5b9a\u6269\u5c55\u6765\u7f16\u8bd1\u3002\u5927\u90e8\u5206 C99 \u7279\u6027\u5df2\u7ecf\u88ab\u652f\u6301\uff1b\u4e00\u65e6\u6240\u6709\u7279\u6027\u53ef\u7528\uff0c\u9ed8\u8ba4\u7f16\u8bd1\u8bed\u8a00\u5c06\u6539\u4e3a C99+GNU \u7279\u5b9a\u6269\u5c55\uff08\u4e00\u4e9b\u9488\u5bf9 C89 \u7684 GNU \u6269\u5c55\u5c06\u88ab\u79fb\u9664\uff0c\u6709\u7684\u505a\u4e86\u8f7b\u5fae\u6539\u52a8\u4ee5\u4f5c\u4e3a C99 \u4e2d\u7684\u6807\u51c6\u7279\u6027\uff09\u3002 C \u8bed\u8a00\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u9884\u5904\u7406\u6307\u4ee4\uff0c\u88ab\u7528\u4e8e\u5b8f\u6587\u672c\u66ff\u6362\uff0c\u6761\u4ef6\u7f16\u8bd1\u4ee5\u53ca\u6587\u4ef6\u5f15\u5165\u3002\u5c3d\u7ba1\u901a\u5e38\u4f1a\u5728 C \u8bed\u8a00\u624b\u518c\u4e2d\u63cf\u8ff0\uff0c\u4f46 GNU C \u9884\u5904\u7406\u5668\u88ab\u5b8c\u5168\u5f52\u6863\u5728\u4e86 C \u9884\u5904\u7406\u5668 \u4e2d\u3002\u8be5\u6587\u6863\u8986\u76d6\u4e86 C\u3001C++ \u4ee5\u53ca Objective-C \u7684\u9884\u5904\u7406\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c06\u4e0d\u518d\u5305\u542b\u8fd9\u4e9b\u5185\u5bb9\u3002","title":"\u524d\u8a00"},{"location":"Preface/#_2","text":"\u975e\u5e38\u611f\u8c22\u5e2e\u52a9\u7f16\u8f91\u3001\u6821\u5bf9\u3001\u63d0\u4f9b\u5efa\u8bae\u3001\u6392\u7248\u4ee5\u53ca\u6587\u6848\u7684\u6240\u6709\u4eba\uff0c\u5305\u62ec\uff1aDiego Andres Alvarez Marin, Nelson H. F. Beebe, Karl Berry, Robert Chassell, Hanfeng Chen, Mark de Volld, Antonio Diaz Diaz, dine, Andreas Foerster, Denver Gingerich, Lisa Goldstein, Robert Hansen, Jean-Christophe Helary, Mogens Hetsholm, Teddy Hogeborn, Joe Humphries, J. Wren Hunt, Dutch Ingraham, Adam Johansen, Vladimir Kadlec, Benjamin Kagia, Dright Kayorent, Sugun Kedambadi, Felix Lee, Bjorn Liencres, Steve Morningthunder, Aljosha Papsch, Matthew Plant, Jonathan Sisti, Richard Stallman, J. Otto Tennant, Ole Tetlie, Keith Thompson, T.F. Torrey, James Youngman, and Steve Zachar\u3002Trevis Rothwell \u4f5c\u4e3a\u9879\u76ee\u7ef4\u62a4\u4eba\u5458 \u548c James Youngman \u4e00\u8d77\u5199\u4e86\u5927\u90e8\u5206\u7684\u5185\u5bb9\u3002 \u4e00\u4e9b\u793a\u4f8b\u7a0b\u5e8f\u662f\u57fa\u4e8e Donald Knuth \u7684 \u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u827a\u672f \u4e2d\u7684\u7b97\u6cd5\u3002 bug \u62a5\u544a\u548c\u5efa\u8bae\u8bf7\u53d1\u90ae\u4ef6\u81f3 gnu-c-manual@gnu.org","title":"\u81f4\u8c22"},{"location":"Program-Structure-And-Scope/","text":"\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 C \u8bed\u8a00\u6240\u6709\u7684\u57fa\u672c\u5143\u7d20\uff0c\u662f\u65f6\u5019\u5b8f\u89c2\u5730\u770b\u4e00\u4e0b\u4e86\u3002 6.1 \u7a0b\u5e8f\u7ed3\u6784 \u00b6 \u4e00\u4e2a C \u7a0b\u5e8f\u53ef\u4ee5\u53ea\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u901a\u5e38\u4f1a\u66f4\u591a\u3002\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u7a0b\u5e8f\u4f1a\u5305\u542b\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u5934\u6587\u4ef6\u548c\u6e90\u6587\u4ef6\uff0c\u4e5f\u4f1a\u5305\u542b\u548c\u94fe\u63a5\u5df2\u5b58\u5728\u7684\u5e93\u6587\u4ef6\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5934\u6587\u4ef6\uff08\u5e26 \u201c.h\u201d \u6269\u5c55\uff09\u5305\u542b\u53d8\u91cf\u548c\u51fd\u6570\u7684\u58f0\u660e\uff0c\u6e90\u6587\u4ef6\uff08\u5e26 \u201c.c\u201d \u6269\u5c55\uff09\u5305\u542b\u5bf9\u5e94\u7684\u5b9a\u4e49\u3002\u5982\u679c\u4e00\u4e9b\u58f0\u660e\u4e0d\u60f3\u88ab\u5176\u4ed6\u6587\u4ef6\u770b\u5230\uff0c\u53ef\u4ee5\u628a\u8be5\u58f0\u660e\u653e\u5230\u6e90\u6587\u4ef6\u4e2d\u3002\u7136\u800c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u5934\u6587\u4ef6\u4e0d\u5e94\u8be5\u5305\u542b\u4efb\u4f55\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5199\u4e86\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u5e76\u4e14\u4f60\u60f3\u8ba9\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u5176\u4ed6\u6587\u4ef6\u8bbf\u95ee\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b9a\u4e49\u5b83\u7684\u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f1a\u628a\u8be5\u51fd\u6570\u7684\u58f0\u660e\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff08\u5e26 \u201c.h\u201d \u6269\u5c55\uff09\uff1a /* sqrt.h */ double computeSqrt (double x); \u8fd9\u4e2a\u5934\u6587\u4ef6\u53ef\u4ee5\u88ab\u5176\u4ed6\u9700\u8981\u8be5\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u5305\u542b\uff0c\u4f46\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5728\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e2d\uff08\u5e26\u6709 \u201c.c\u201d \u6269\u5c55\uff09\uff1a /* sqrt.c */ #include \"sqrt.h\" double computeSqrt (double x) { double result; \u2026 return result; } 6.2 \u4f5c\u7528\u57df \u00b6 \u4f5c\u7528\u57df\u6307\u793a\u4e86\u7a0b\u5e8f\u7684\u54ea\u4e00\u90e8\u5206\u53ef\u4ee5\u201c\u770b\u5230\u201d\u4e00\u4e2a\u58f0\u660e\u8fc7\u7684\u5bf9\u8c61\u3002\u4e00\u4e2a\u58f0\u660e\u8fc7\u7684\u5bf9\u8c61\u53ef\u4ee5\u4ec5\u5728\u7279\u5b9a\u51fd\u6570\u53ef\u89c1\uff0c\u53ef\u4ee5\u5728\u7279\u5b9a\u6587\u4ef6\u53ef\u4ee5\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5305\u542b\u5934\u6587\u4ef6\u5e76\u4f7f\u7528 extern \u58f0\u660e\u6765\u5bf9\u6240\u6709\u6587\u4ef6\u53ef\u89c1\u3002 \u9664\u975e\u663e\u5f0f\u6307\u51fa\uff0c\u5426\u5219\u5728\u6587\u4ef6\u9876\u5c42\u7684\u58f0\u660e\uff08\u5c31\u662f\u4e0d\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u9762\uff09\u5bf9\u6574\u4e2a\u6587\u4ef6\u53ef\u89c1\uff0c\u5305\u62ec\u51fd\u6570\u91cc\u9762\uff0c\u4f46\u662f\u5bf9\u6587\u4ef6\u5916\u4e0d\u53ef\u89c1\u3002 \u5728\u51fd\u6570\u91cc\u9762\u7684\u58f0\u660e\u53ea\u5bf9\u8be5\u51fd\u6570\u5185\u53ef\u89c1\u3002 \u4e00\u4e2a\u58f0\u660e\u5728\u8be5\u540d\u5b57\u58f0\u660e\u4e4b\u524d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f8b\u5982\uff1a int x = 5; int y = x + 10; \u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46 int x = y + 10; int y = 5; \u4e0d\u80fd\u5de5\u4f5c\u3002","title":"6. \u7a0b\u5e8f\u7ed3\u6784\u548c\u4f5c\u7528\u57df"},{"location":"Program-Structure-And-Scope/#Program-Structure","text":"\u4e00\u4e2a C \u7a0b\u5e8f\u53ef\u4ee5\u53ea\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u901a\u5e38\u4f1a\u66f4\u591a\u3002\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u7a0b\u5e8f\u4f1a\u5305\u542b\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u5934\u6587\u4ef6\u548c\u6e90\u6587\u4ef6\uff0c\u4e5f\u4f1a\u5305\u542b\u548c\u94fe\u63a5\u5df2\u5b58\u5728\u7684\u5e93\u6587\u4ef6\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5934\u6587\u4ef6\uff08\u5e26 \u201c.h\u201d \u6269\u5c55\uff09\u5305\u542b\u53d8\u91cf\u548c\u51fd\u6570\u7684\u58f0\u660e\uff0c\u6e90\u6587\u4ef6\uff08\u5e26 \u201c.c\u201d \u6269\u5c55\uff09\u5305\u542b\u5bf9\u5e94\u7684\u5b9a\u4e49\u3002\u5982\u679c\u4e00\u4e9b\u58f0\u660e\u4e0d\u60f3\u88ab\u5176\u4ed6\u6587\u4ef6\u770b\u5230\uff0c\u53ef\u4ee5\u628a\u8be5\u58f0\u660e\u653e\u5230\u6e90\u6587\u4ef6\u4e2d\u3002\u7136\u800c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u5934\u6587\u4ef6\u4e0d\u5e94\u8be5\u5305\u542b\u4efb\u4f55\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5199\u4e86\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u65b9\u6839\uff0c\u5e76\u4e14\u4f60\u60f3\u8ba9\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u5176\u4ed6\u6587\u4ef6\u8bbf\u95ee\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b9a\u4e49\u5b83\u7684\u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f1a\u628a\u8be5\u51fd\u6570\u7684\u58f0\u660e\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff08\u5e26 \u201c.h\u201d \u6269\u5c55\uff09\uff1a /* sqrt.h */ double computeSqrt (double x); \u8fd9\u4e2a\u5934\u6587\u4ef6\u53ef\u4ee5\u88ab\u5176\u4ed6\u9700\u8981\u8be5\u51fd\u6570\u7684\u6e90\u6587\u4ef6\u5305\u542b\uff0c\u4f46\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5728\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e2d\uff08\u5e26\u6709 \u201c.c\u201d \u6269\u5c55\uff09\uff1a /* sqrt.c */ #include \"sqrt.h\" double computeSqrt (double x) { double result; \u2026 return result; }","title":"6.1 \u7a0b\u5e8f\u7ed3\u6784"},{"location":"Program-Structure-And-Scope/#Scope","text":"\u4f5c\u7528\u57df\u6307\u793a\u4e86\u7a0b\u5e8f\u7684\u54ea\u4e00\u90e8\u5206\u53ef\u4ee5\u201c\u770b\u5230\u201d\u4e00\u4e2a\u58f0\u660e\u8fc7\u7684\u5bf9\u8c61\u3002\u4e00\u4e2a\u58f0\u660e\u8fc7\u7684\u5bf9\u8c61\u53ef\u4ee5\u4ec5\u5728\u7279\u5b9a\u51fd\u6570\u53ef\u89c1\uff0c\u53ef\u4ee5\u5728\u7279\u5b9a\u6587\u4ef6\u53ef\u4ee5\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5305\u542b\u5934\u6587\u4ef6\u5e76\u4f7f\u7528 extern \u58f0\u660e\u6765\u5bf9\u6240\u6709\u6587\u4ef6\u53ef\u89c1\u3002 \u9664\u975e\u663e\u5f0f\u6307\u51fa\uff0c\u5426\u5219\u5728\u6587\u4ef6\u9876\u5c42\u7684\u58f0\u660e\uff08\u5c31\u662f\u4e0d\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\u9762\uff09\u5bf9\u6574\u4e2a\u6587\u4ef6\u53ef\u89c1\uff0c\u5305\u62ec\u51fd\u6570\u91cc\u9762\uff0c\u4f46\u662f\u5bf9\u6587\u4ef6\u5916\u4e0d\u53ef\u89c1\u3002 \u5728\u51fd\u6570\u91cc\u9762\u7684\u58f0\u660e\u53ea\u5bf9\u8be5\u51fd\u6570\u5185\u53ef\u89c1\u3002 \u4e00\u4e2a\u58f0\u660e\u5728\u8be5\u540d\u5b57\u58f0\u660e\u4e4b\u524d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f8b\u5982\uff1a int x = 5; int y = x + 10; \u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46 int x = y + 10; int y = 5; \u4e0d\u80fd\u5de5\u4f5c\u3002","title":"6.2 \u4f5c\u7528\u57df"},{"location":"Statement/","text":"\u8bed\u53e5\u7528\u6765\u6267\u884c\u52a8\u4f5c\u4ee5\u53ca\u63a7\u5236\u7a0b\u5e8f\u6d41\u3002\u4f60\u4e5f\u53ef\u4ee5\u5199\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u8bed\u53e5\uff0c\u6216\u505a\u4e00\u4e9b\u4e1d\u6beb\u6ca1\u6709\u7528\u7684\u4e8b\u60c5\u3002 4.1 \u6807\u7b7e \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u6765\u6807\u8bc6\u6e90\u4ee3\u7801\u7684\u4e00\u8282\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u540e\u9762\u7684 goto \u4e2d\u4f7f\u7528\uff08\u8be6\u89c1 goto \u8bed\u53e5 \uff09\u3002\u4e00\u4e2a\u6807\u7b7e\u5305\u542b\u4e00\u4e2a\u6807\u8bc6\u7b26\uff08\u5c31\u50cf\u4e4b\u524d\u7528\u4e8e\u53d8\u91cf\u540d\u7684\u4e00\u6837\uff09\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002\u5982\uff1a treet: \u4f46\u4f60\u8981\u660e\u767d\u6807\u7b7e\u540d\u5b57\u548c\u5176\u4ed6\u6807\u8bc6\u7b26\u540d\u5b57\u662f\u4e0d\u51b2\u7a81\u7684\uff1a int treet = 5; /* treet the variable. */ treet: /* treet the label. */ ISO C \u6807\u51c6\u8981\u6c42\u6807\u7b7e\u540e\u9762\u5fc5\u987b\u81f3\u5c11\u8ddf\u4e00\u4e2a\u8bed\u53e5\uff0c\u5373\u4fbf\u662f\u4e00\u4e2a\u7a7a\u8bed\u53e5\uff08\u8be6\u89c1 \u7a7a\u8bed\u53e5 \uff09\u3002GCC \u5e76\u4e0d\u8981\u6c42\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u8fd9\u6837\u7528\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u6709\u517c\u5bb9\u6027\u95ee\u9898\u3002 4.2 \u8868\u8fbe\u5f0f\u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u8868\u8fbe\u5f0f\u540e\u9762\u52a0\u4e0a\u5206\u53f7\uff0c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u8bed\u53e5\u3002\u4f8b\u5982\uff1a 5; 2 + 2; 10 >= 9; \u5728\u4e0a\u9762\u7684\u5404\u4e2a\u8bed\u53e5\u4e2d\uff0c\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c\u3002\u7136\u800c\u8fd9\u5e76\u6ca1\u4ec0\u4e48\u5375\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u65e2\u6ca1\u6709\u628a\u503c\u5b58\u8d77\u6765\uff0c\u4e5f\u6ca1\u6709\u505a\u4efb\u4f55\u5b9e\u9645\u7684\u4e8b\u60c5\uff0c\u4ec5\u4ec5\u662f\u8ba1\u7b97\u4e86\u5b83\u4eec\u672c\u8eab\u800c\u5df2\u3002\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u6389\u8fd9\u79cd\u8bed\u53e5\u3002 \u8868\u8fbe\u5f0f\u8bed\u53e5\u4ec5\u5728\u6709\u526f\u4f5c\u7528\u65f6\u6709\u7528\uff0c\u5982\u5b58\u50a8\u4e00\u4e2a\u503c\u3001\u51fd\u6570\u8c03\u7528\u6216\u9020\u6210\u4e00\u4e2a\u9519\u8bef\uff08\u8fd9\u53ef\u80fd\u6709\u70b9\u96be\u61c2\uff09\u3002\u4f8b\u5982\uff1a x++; y = x + 25; puts (\"Hello, user!\"); *cucumber; \u6700\u540e\u7684\u8bed\u53e5 *cucumber; \u53ef\u80fd\u4f1a\u9020\u6210\u4e00\u4e2a\u9519\u8bef\uff0c\u5982\u679c cucumber \u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6307\u9488\u6216\u8005\u88ab\u58f0\u660e\u4e3a\u4e86 volatile \u3002 4.3 if \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 if \u8bed\u53e5\u6765\u6709\u6761\u4ef6\u5730\u6267\u884c\u4f60\u7684\u90e8\u5206\u7a0b\u5e8f\uff0c\u6267\u884c\u90e8\u5206\u53d6\u51b3\u4e8e\u4f60\u7ed9\u51fa\u7684\u8868\u8fbe\u5f0f\u7684\u771f\u503c\u3002\u5e38\u7528\u5f62\u5f0f\u5982\u4e0b\uff1a if (test) then-statement else else-statement \u5982\u679c test \u6c42\u503c\u4e3a\u771f\uff0c\u90a3\u4e48\u6267\u884c then-statement \u8bed\u53e5\u800c else-statement \u4e0d\u4f1a\u88ab\u6267\u884c\u3002\u76f8\u53cd\u5982\u679c test \u4e3a\u5047\uff0c\u5219 else-statement \u88ab\u6267\u884c\u800c then-statement \u4e0d\u4f1a\u88ab\u6267\u884c\u3002 else \u4ece\u53e5\u662f\u53ef\u9009\u7684\u3002\u4f8b\u5982\uff1a if (x == 10) puts (\"x is 10\"); \u5982\u679c x == 10 \u662f\u771f\uff0c\u8bed\u53e5 puts (\"x is 10\"); \u88ab\u6267\u884c\u3002\u5982\u679c x == 10 \u662f\u5047\uff0c\u8bed\u53e5 puts (\"x is 10\"); \u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4e0b\u9762\u662f\u4f7f\u7528 else \u7684\u4f8b\u5b50\uff1a if (x == 10) puts (\"x is 10\"); else puts (\"x is not 10\"); \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u7cfb\u5217 if \u8bed\u53e5\u6765\u6d4b\u8bd5\u591a\u4e2a\u6761\u4ef6\uff1a if (x == 1) puts (\"x is 1\"); else if (x == 2) puts (\"x is 2\"); else if (x == 3) puts (\"x is 3\"); else puts (\"x is something else\"); \u4e0b\u9762\u7684\u4ee3\u7801\u6839\u636e\u7ed9\u5b9a\u7684\u5e74 y \u6765\u8ba1\u7b97\u548c\u6253\u5370\u590d\u6d3b\u8282\u7684\u65e5\u671f\uff1a void easterDate (int y) { int n = 0; int g = (y % 19) + 1; int c = (y / 100) + 1; int x = ((3 * c) / 4) - 12; int z = (((8 * c) + 5) / 25) - 5; int d = ((5 * y) / 4) - x - 10; int e = ((11 * g) + 20 + z - x) % 30; if (((e == 25) && (g > 11)) || (e == 24)) e++; n = 44 - e; if (n < 21) n += 30; n = n + 7 - ((d + n) % 7); if (n > 31) printf (\"Easter: %d April %d\", n - 31, y); else printf (\"Easter: %d March %d\", n, y); } 4.4 switch \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 switch \u8bed\u53e5\u6765\u628a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u548c\u5176\u4ed6\u8868\u8fbe\u5f0f\u4f5c\u6bd4\u8f83\uff0c\u7136\u540e\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\u51b3\u5b9a\u662f\u5426\u6267\u884c\u4e00\u7cfb\u5217\u5b50\u8bed\u53e5\u3002\u4e0b\u9762\u662f switch \u7684\u4e00\u822c\u5f62\u5f0f\uff1a switch (test) { case compare-1: if-equal-statement-1 case compare-2: if-equal-statement-2 \u2026 default: default-statement } switch \u8bed\u53e5\u6bd4\u8f83 test \u548c\u6bcf\u4e00\u4e2a compare \u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u548c test \u76f8\u7b49\u7684\u3002\u7136\u540e\u8be5\u5206\u652f\u4e0b\u9762\u7684\u8bed\u53e5\u4f1a\u88ab\u6267\u884c\u3002\u6240\u6709\u88ab\u6bd4\u8f83\u7684\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14 compare-N \u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u6574\u578b\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u5b57\u9762\u91cf\u6574\u6570\u6216\u4e00\u4e2a\u5b57\u9762\u91cf\u6574\u6570\u7ec4\u6210\u7684\u8868\u8fbe\u5f0f\uff09\u3002 \u53ef\u9009\u5730\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u9ed8\u8ba4\uff08default\uff09 \u5206\u652f\u3002\u5982\u679c\u4e0a\u9762\u7684\u5206\u652f\u90fd\u6ca1\u6709\u5339\u914d\u5230\u5c31\u4f1a\u6267\u884c\u8be5\u9ed8\u8ba4\u5206\u652f\u3002\u4e00\u822c default \u90fd\u4f1a\u653e\u5728\u6700\u540e\uff0c\u4f46\u8fd9\u4e0d\u662f\u5f3a\u5236\u7684\u3002 switch (x) { case 0: puts (\"x is 0\"); break; case 1: puts (\"x is 1\"); break; default: puts (\"x is something else\"); break; } \u6ce8\u610f\u5230\uff0c\u4e0a\u9762\u6bcf\u4e2a\u5206\u652f\u90fd\u7528\u4e86\u4e00\u4e2a break \u8bed\u53e5\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u5206\u652f\u88ab\u5339\u914d\u5230\uff0c\u4e0d\u53ea\u662f\u5b83\u7684\u5b50\u53e5\u88ab\u6267\u884c\uff0c\u6240\u6709\u5b83\u4e0b\u9762\u7684\u5206\u652f\u7684\u5b50\u53e5\u4e5f\u4f1a\u6267\u884c\uff1a int x = 0; switch (x) { case 0: puts (\"x is 0\"); case 1: puts (\"x is 1\"); default: puts (\"x is something else\"); } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u8f93\u51fa\u662f\uff1a x is 0 x is 1 x is something else \u8fd9\u901a\u5e38\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u5728\u6bcf\u4e00\u4e2a\u5206\u652f\u540e\u9762\u52a0\u4e00\u4e2a break \u4f1a\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u5f15\u5bfc\u5230 switch \u8bed\u53e5\u4e4b\u540e\u3002 \u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a case \u6807\u7b7e\u91cc\u6307\u5b9a\u4e00\u4e2a\u8fde\u7eed\u7684\u6574\u6570\u503c\u8303\u56f4\uff0c\u5982\uff1a case low ... high: \u8fd9\u4e2a\u628a\u8be5\u8303\u56f4\u5bf9\u5e94\u7684\u5404\u4e2a\u6570\u5b57 -- \u5305\u542b low \u548c high -- \u5199\u5728\u5404\u81ea\u6807\u7b7e\u91cc\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u4e00\u4e2a\u8303\u56f4\u7684 ASCII \u5b57\u7b26\u5c24\u5176\u6709\u7528\uff1a case 'A' ... 'Z': \u8981\u6ce8\u610f\uff0c\u5728 ... \u4e24\u8fb9\u90fd\u6709\u7a7a\u683c\uff1b\u5426\u5219\u4f1a\u89e3\u6790\u51fa\u9519\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a case 1 ... 5: \u800c\u4e0d\u662f case 1...5: \u901a\u5e38\u4f7f\u7528 switch \u8bed\u53e5\u6765\u5904\u7406\u591a\u79cd\u53ef\u80fd\u7684 errno \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u7a0b\u5e8f\u5e94\u8be5\u6ce8\u610f\u5230\u6709\u53ef\u80fd 2 \u4e2a\u4f7f\u7528 errno \u7684\u5b8f\u5b9e\u9645\u5374\u6709\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 EWOULDBLOCK \u548c EAGAIN \u3002 4.5 while \u8bed\u53e5 \u00b6 while \u8bed\u53e5\u662f\u4e00\u79cd\u5728\u5faa\u73af\u5f00\u59cb\u524d\u8fdb\u884c\u9000\u51fa\u6d4b\u8bd5\u7684\u5faa\u73af\u8bed\u53e5\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a while (test) statement while \u8bed\u53e5\u5148\u5bf9 test \u6c42\u503c\u3002\u5982\u679c test \u662f\u771f\uff0c\u5219 s tatement \u88ab\u6267\u884c\uff0c\u7136\u540e\u518d\u6b21\u5bf9 test \u6c42\u503c\u3002\u53ea\u8981 test \u4e3a\u771f\uff0c statement \u4f1a\u7ee7\u7eed\u91cd\u590d\u6267\u884c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6253\u5370\u6574\u6570 0 \u5230 9\uff1a int counter = 0; while (counter < 10) printf (\"%d \", counter++); break \u8bed\u53e5\u53ef\u4ee5\u7ec8\u6b62 while \u5faa\u73af\u3002 4.6 do \u8bed\u53e5 \u00b6 do \u8bed\u53e5\u662f\u5728\u5faa\u73af\u672b\u5c3e\u8fdb\u884c\u9000\u51fa\u6d4b\u8bd5\u7684\u5faa\u73af\u8bed\u53e5\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a do statement while (test); do \u8bed\u53e5\u5148\u6267\u884c statement \u3002\u4e4b\u540e\u5bf9 test \u6c42\u503c\u3002\u5982\u679c test \u4e3a\u771f\uff0c statement \u518d\u6b21\u88ab\u6267\u884c\u3002\u53ea\u8981 test \u4e3a\u771f\uff0c statement \u4f1a\u7ee7\u7eed\u91cd\u590d\u6267\u884c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6253\u5370\u6574\u6570 0 \u5230 9\uff1a int x = 0; do printf (\"%d \", x++); while (x < 10); break \u8bed\u53e5\u53ef\u4ee5\u7ec8\u6b62 do \u5faa\u73af\u3002 4.7 for \u8bed\u53e5 \u00b6 for \u662f\u4e00\u79cd\u5faa\u73af\u8bed\u53e5\uff0c\u5b83\u7684\u7ed3\u6784\u53ef\u4ee5\u7b80\u5355\u5730\u53d8\u91cf\u521d\u59cb\u5316\uff0c\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u4ee5\u53ca\u53d8\u91cf\u4fee\u6539\u3002\u65b9\u4fbf\u4e8e\u8fdb\u884c\u8ba1\u6570\u63a7\u5236\u7684\u5faa\u73af\u3002\u5b83\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a for (initialize; test; step) statement for \u5faa\u73af\u5148\u8ba1\u7b97\u8868\u8fbe\u5f0f initialize \uff0c\u7136\u540e\u5bf9\u8868\u8fbe\u5f0f test \u6c42\u503c\u3002\u5982\u679c test \u4e3a\u5047\uff0c\u5faa\u73af\u7ed3\u675f\u5e76\u4e14\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u6062\u590d\u5230 for \u8bed\u53e5\u4e4b\u540e\uff1b\u5426\u5219\uff0c statement \u88ab\u6267\u884c\u3002\u6700\u540e\uff0c\u8ba1\u7b97 step \u3002\u4e0b\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4f1a\u5148\u518d\u6b21\u5bf9 test \u6c42\u503c\u3002 \u901a\u5e38\uff0c initialize \u4f1a\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\uff0c\u4e00\u822c\u662f\u8ba1\u6570\u5668\uff1b test \u4f1a\u628a\u8fd9\u4e9b\u53d8\u91cf\u548c\u9884\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f\u6bd4\u8f83\uff1b\u800c step \u7528\u6765\u4fee\u6539\u8fd9\u4e9b\u53d8\u91cf\u3002\u4e0b\u9762\u4e5f\u662f\u4e00\u4e2a\u6253\u5370\u6574\u6570 0 ~ 9 \u7684\u4f8b\u5b50\uff1a int x; for (x = 0; x < 10; x++) printf (\"%d \", x); \u9996\u5148\u5bf9 initialize \u6c42\u503c\uff0c\u4e5f\u5c31\u662f\u628a 0 \u8d4b\u7ed9 x \u3002\u7136\u540e\u53ea\u8981 x \u5c0f\u4e8e 10 \u5c31\u4f1a\u628a\u5b83\u6253\u5370\u51fa\u6765\uff08\u5728\u5faa\u73af\u4f53\u4e2d\uff09\u3002\u63a5\u7740 x \u5728 step \u5b50\u53e5\u91cc\u88ab\u9012\u589e\uff0c\u7136\u540e test \u518d\u88ab\u6c42\u503c\u3002 \u8fd9 3 \u4e2a\u8868\u8fbe\u5f0f\u5728 for \u8bed\u53e5\u4e2d\u90fd\u662f\u53ef\u9009\u7684\uff0c\u5176\u4e2d\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\u3002\u65e2\u7136\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ea\u88ab\u6c42\u503c\u4e00\u6b21\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u88ab\u7701\u7565\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a int x = 1; for (; x <= 10; x++) printf (\"%d \", x); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c x \u5728 for \u8bed\u53e5\u4e4b\u524d\u5c31\u88ab\u8d4b\u503c\u4e86\u3002 \u5982\u679c\u4f60\u4e0d\u5199 test \u8868\u8fbe\u5f0f\uff0c\u90a3 for \u8bed\u53e5\u5c31\u53d8\u6210\u65e0\u9650\u5faa\u73af\u4e86\uff08\u9664\u975e\u4f60\u5728 for \u8bed\u53e5\u4e2d\u4f7f\u7528\u4e86 break \u6216\u8005 goto \u8bed\u53e5\uff09\u3002\u8fd9\u548c test \u4e3a 1 \u662f\u4e00\u6837\u7684\uff0c\u6c38\u8fdc\u4e3a\u771f\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4ece 1 \u5f00\u59cb\u6253\u5370\u6240\u6709\u7684\u6b63\u6574\u6570\uff1a for (x = 1; ; x++) printf (\"%d \", x); \u5982\u679c\u4f60\u4e0d\u5199 step \u8868\u8fbe\u5f0f\uff0c\u5c31\u6ca1\u6709\u4e86\u5b8c\u6210\u5faa\u73af\u7684\u6b65\u8fdb -- \u81f3\u5c11\u4e0d\u50cf for \u8bed\u53e5\u6b63\u5e38\u671f\u671b\u7684\u90a3\u6837\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f1a\u4e0d\u505c\u5730\u6253\u5370 1\uff1a for (x = 1; x <= 10;) printf (\"%d \", x); \u53ef\u80fd\u4f1a\u5f15\u8d77\u56f0\u60d1\u7684\u662f\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u9017\u53f7\u8fd0\u7b97\u7b26\uff08\u8be6\u89c1 \u9017\u53f7\u64cd\u4f5c\u7b26 \uff09\u5728\u540c\u4e00\u4e2a for \u8bed\u53e5\u4e2d\u76d1\u63a7\u591a\u4e2a\u53d8\u91cf\uff0c\u56e0\u4e3a\u901a\u5e38\u9017\u53f7\u8fd0\u7b97\u7b26\u4f1a\u4e22\u5f03\u5b83\u7684\u5de6\u64cd\u4f5c\u6570\u7684\u7ed3\u679c\u3002\u5982\uff1a int x, y; for (x = 1, y = 10; x <= 10, y >= 1; x+=2, y--) printf (\"%d %d\\n\", x, y); \u8f93\u51fa\u662f\uff1a 1 10 3 9 5 8 7 7 9 6 11 5 13 4 15 3 17 2 19 1 \u5982\u679c\u4f60\u8981\u6d4b\u8bd5 2 \u4e2a\u6761\u4ef6\uff0c\u4f60\u9700\u8981\u7528 && \u8fd0\u7b97\u7b26\uff1a int x, y; for (x = 1, y = 10; x <= 10 && y >= 1; x+=2, y--) printf (\"%d %d\\n\", x, y); break \u8bed\u53e5\u4e5f\u53ef\u4ee5\u7ec8\u6b62 for \u5faa\u73af\uff1a \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u8ba1\u7b97\u5e73\u65b9\u548c\u7684\u51fd\u6570\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u8d77\u59cb\u6570\uff0c\u4e00\u4e2a\u7ec8\u6b62\u6570\uff0c\u6765\u8ba1\u7b97\u4e2d\u95f4\u6240\u6709\u6570\u7684\u5e73\u65b9\u548c\uff1a int sum_of_squares (int start, int end) { int i, sum = 0; for (i = start; i <= end; i++) sum += i * i; return sum; } 4.8 \u4ee3\u7801\u5757 \u00b6 \u4e00\u4e2a\u4ee3\u7801\u5757\u662f 0 \u4e2a\u6216\u591a\u4e2a\u7528\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u7684\u8bed\u53e5\uff0c\u4e5f\u53eb\u505a\u7ec4\u5408\u8bed\u53e5\u3002\u901a\u5e38\u4ee3\u7801\u5757\u7528\u5728\u6761\u4ef6\u8bed\u53e5\u548c\u5faa\u73af\u8bed\u53e5\u7684\u4e3b\u4f53\u90e8\u5206\uff0c\u7528\u6765\u5c06\u4e00\u7ec4\u8bed\u53e5\u653e\u5728\u4e00\u8d77\u3002 for (x = 1; x <= 10; x++) { printf (\"x is %d\\n\", x); if ((x % 2) == 0) printf (\"%d is even\\n\", x); else printf (\"%d is odd\\n\", x); } \u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957\uff1a for (x = 1; x <= 10; x++) { if ((x % 2) == 0) { printf (\"x is %d\\n\", x); printf (\"%d is even\\n\", x); } else { printf (\"x is %d\\n\", x); printf (\"%d is odd\\n\", x); } } \u4f60\u53ef\u4ee5\u5728\u4ee3\u7801\u5757\u5185\u58f0\u660e\u53d8\u91cf\uff1b\u8fd9\u6837\u7684\u53d8\u91cf\u662f\u8be5\u5757\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5728 C89 \u6807\u51c6\u4e2d\uff0c\u58f0\u660e\u8bed\u53e5\u5fc5\u987b\u653e\u5728\u5176\u4ed6\u8bed\u53e5\u524d\uff0c\u6240\u4ee5\u6709\u65f6\u5f15\u5165\u8bed\u53e5\u5757\u6765\u5b9a\u4e49\u53d8\u91cf\u5c31\u5f88\u6709\u7528\uff1a { int x = 5; printf (\"%d\\n\", x); } printf (\"%d\\n\", x); /* Compilation error! x exists only in the preceding block. */ 4.9 \u7a7a\u8bed\u53e5 \u00b6 \u7a7a\u8bed\u53e5\u53ea\u6709\u4e00\u4e2a\u5206\u53f7\u3002 ; \u7a7a\u8bed\u53e5\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u4e0d\u5728\u4efb\u4f55\u5730\u65b9\u5b58\u503c\u3002\u7a0b\u5e8f\u6267\u884c\u65f6\u4e0d\u4f1a\u8017\u65f6\u3002 \u901a\u5e38\uff0c\u7a7a\u8bed\u53e5\u4f1a\u7528\u505a\u5faa\u73af\u8bed\u53e5\u7684\u5faa\u73af\u4f53\uff0c\u6216\u8005\u4f5c\u4e3a for \u8bed\u53e5\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u8fbe\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7a7a\u8bed\u53e5\u4f5c\u4e3a for \u5faa\u73af\u7684\u5faa\u73af\u4f53\u7684\u4f8b\u5b50\uff08\u987a\u4fbf\u8ba1\u7b97\u4e00\u4e0b n \u7684\u6574\u6570\u5e73\u65b9\u6839\uff0c\u4f9b\u541b\u4e00\u7b11\uff09\uff1a for (i = 1; i*i < n; i++) ; \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u7528\u4f5c for \u5faa\u73af\u4f53\u7684\u4f8b\u5b50\uff0c\u4f46\u662f\u4f1a\u4ea7\u751f\u8f93\u51fa\uff1a for (x = 1; x <= 5; printf (\"x is now %d\\n\", x), x++) ; \u7a7a\u8bed\u53e5\u6709\u65f6\u4e5f\u4f1a\u8ddf\u5728\u4e00\u4e2a\u6807\u7b7e\u540e\u9762\uff0c\u7528\u4f5c\u8be5\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u3002 4.10 goto \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 goto \u8bed\u53e5\u5728\u7a0b\u5e8f\u4e2d\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002\u5f62\u5f0f\u4e00\u822c\u4e3a\uff1a goto label; \u4f60\u5fc5\u987b\u6307\u5b9a\u76ee\u7684\u6807\u7b7e\uff1b\u5728 goto \u8bed\u53e5\u6267\u884c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u8df3\u5230\u4e86\u8be5\u6807\u7b7e\u5904\u3002\u8be6\u89c1 \u6807\u7b7e \u4e00\u8282\u3002\u8fd9\u91cc\u6709\u4e2a\u4f8b\u5b50\uff1a goto end_of_program; \u2026 end_of_program: \u6807\u7b7e\u53ef\u4ee5\u5728\u540c\u4e00\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u4f46 goto \u8df3\u4e0d\u5230\u5176\u5b83\u51fd\u6570\u3002 \u4f60 \u53ef\u4ee5 \u7528 goto \u6765\u6a21\u62df\u5faa\u73af\uff0c\u4f46\u6211\u4eec\u4e0d\u63a8\u8350\u8fd9\u6837\u505a -- \u5b83\u8ba9\u7a0b\u5e8f\u96be\u4ee5\u7406\u89e3\uff0c\u5e76\u4e14 GCC \u65e0\u6cd5\u5f88\u597d\u5730\u4f18\u5316\u5b83\u3002\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528 for \u3001 while \u4ee5\u53ca do \u8bed\u53e5\u6765\u5b9e\u73b0\u5faa\u73af\u3002 GCC \u6269\u5c55\u5141\u8bb8 goto \u8bed\u53e5\u8df3\u5230 void* \u6307\u5411\u7684\u5730\u5740\u3002\u8981\u8fd9\u6837\u505a\uff0c\u4f60\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 && \uff08\u4e0d\u662f & \uff09\u62ff\u5230\u6807\u7b7e\u7684\u5730\u5740\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u778e\u9020\u7684\u4f8b\u5b50\uff1a enum Play { ROCK=0, PAPER=1, SCISSORS=2 }; enum Result { WIN, LOSE, DRAW }; static enum Result turn (void) { const void * const jumptable[] = {&&rock, &&paper, &&scissors}; enum Play opp; /* opponent\u2019s play */ goto *jumptable[select_option (&opp)]; rock: return opp == ROCK ? DRAW : (opp == PAPER ? LOSE : WIN); paper: return opp == ROCK ? WIN : (opp == PAPER ? DRAW : LOSE); scissors: return opp == ROCK ? LOSE : (opp == PAPER ? WIN : DRAW); } 4.11 break \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\u6765\u7ec8\u6b62 while \u3001 do \u3001 for \u548c switch \u8bed\u53e5\u3002\u4f8b\u5982\uff1a int x; for (x = 1; x <= 10; x++) { if (x == 8) break; else printf (\"%d \", x); } \u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u6253\u5370 1 \u5230 7\u3002\u5f53 x \u81ea\u589e\u5230 8 \u65f6\uff0c x == 8 \u4e3a\u771f\uff0c\u56e0\u6b64 break \u8bed\u53e5\u88ab\u6267\u884c\uff0c for \u5faa\u73af\u4e5f\u5c31\u88ab\u7ec8\u6b62\u4e86\u3002 \u5982\u679c\u4f60\u628a break \u653e\u5728\u4e86\u5d4c\u5957\u5faa\u73af\u6216 switch \u7684\u5185\u5c42\u5faa\u73af\u6216\u5185\u5c42 switch \u4e2d\uff0c\u90a3 break \u53ea\u4f1a\u7ec8\u6b62\u6700\u5185\u5c42\u7684\u5faa\u73af\u6216 switch \u3002 4.12 continue \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 continue \u8bed\u53e5\u6765\u7ec8\u6b62\u5faa\u73af\u7684\u5f53\u524d\u4e00\u6b21\u8fed\u4ee3\uff0c\u7136\u540e\u5f00\u59cb\u4e0b\u4e00\u6b21\u8fed\u4ee3\u3002\u4f8b\u5982\uff1a for (x = 0; x < 100; x++) { if (x % 2 == 0) continue; else sum_of_odd_numbers + = x; } \u5982\u679c\u4f60\u628a continue \u653e\u5728\u4e86\u5d4c\u5957\u5faa\u73af\u7684\u5185\u5c42\u5faa\u73af\u4e2d\uff0c\u90a3 continue \u53ea\u4f1a\u7ec8\u6b62\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 4.13 return \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 return \u8bed\u53e5\u6765\u7ed3\u675f\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u7a0b\u5e8f\u7684\u63a7\u5236\u4ea4\u8fd8\u5230\u8be5\u51fd\u6570\u7684\u8c03\u7528\u5904\u3002\u4e0b\u9762\u662f return \u8bed\u53e5\u7684\u4e00\u822c\u5f62\u5f0f\uff1a return return-value; return-value \u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f void \uff0c\u90a3\u8fd4\u56de\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5c31\u662f\u975e\u6cd5\u7684\uff1b\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u3002 \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u548c return-value \u7684\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u65e0\u6cd5\u8fdb\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff0c\u90a3\u8fd4\u56de\u8be5 return-value \u662f\u975e\u6cd5\u7684\u3002 \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u662f void \uff0c\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u503c\u88ab\u6307\u5b9a\uff0c\u90a3\u8be5 return \u8bed\u53e5\u662f\u5408\u6cd5\u7684\uff0c\u9664\u975e\u5728\u51fd\u6570\u88ab\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a x = cosine (y); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 cosine \u88ab\u8c03\u7528\u5904\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9 x \u3002 \u5373\u4f7f\u4e0a\u4e0b\u6587\u4e0d\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u7f3a\u7701\u8fd4\u56de\u503c\u4e3a\u975e void \u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u662f\u4e2a\u597d\u4e60\u60ef\u3002GCC \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570 -Wreturn-type \uff0c\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4e2d\u7f3a\u7701\u8fd4\u56de\u503c\u4f1a\u53d1\u51fa\u8b66\u544a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5728 void \u548c\u975e void \u51fd\u6570\u4e2d\u4f7f\u7528 return \u8bed\u53e5\uff1a void print_plus_five (int x) { printf (\"%d \", x + 5); return; } int square_value (int x) { return x * x; } 4.14 typedef \u8bed\u53e5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 typedef \u8bed\u53e5\u6765\u7ed9\u6570\u636e\u7c7b\u578b\u521b\u5efa\u522b\u540d\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a typedef old-type-name new-type-name old-type-name \u662f\u8be5\u7c7b\u578b\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u5b57\uff0c\u53ef\u80fd\u7531\u4e0d\u53ea\u4e00\u4e2a\u6807\u8bb0\u7ec4\u6210\uff08\u5982 unsigned long int \uff09\u3002 new-type-name \u662f\u8be5\u7c7b\u578b\u7684\u65b0\u540d\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u521b\u5efa\u65b0\u540d\u5b57\u540e\u65e7\u540d\u5b57\u540c\u6837\u53ef\u7528\u3002\u4f8b\u5982\uff1a typedef unsigned char byte_type; typedef double real_number_type; \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8be5\u7c7b\u578b\u65f6\u5c31\u7ed9\u5b83\u8d77\u4e00\u4e2a\u65b0\u540d\u5b57\uff1a typedef struct fish { float weight; float length; float probability_of_being_caught; } fish_type; \u8981\u7ed9\u4e00\u4e2a\u6570\u7ec4\u5b9a\u4e49\u7c7b\u578b\uff0c\u4f60\u5f97\u5148\u7ed9\u51fa\u5176\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u672b\u5c3e\u63a5\u4e0a\u5143\u7d20\u4e2a\u6570\uff1a typedef char array_of_bytes [5]; array_of_bytes five_bytes = {0, 1, 2, 3, 4}; \u5728\u9009\u62e9\u7c7b\u578b\u7684\u540d\u5b57\u65f6\uff0c\u4f60\u8981\u907f\u514d\u4f7f\u7528 _t \u540e\u7f00\u3002\u867d\u7136\u7f16\u8bd1\u5668\u5141\u8bb8\u8fd9\u4e48\u505a\uff0c\u4f46 POSIX \u6807\u51c6\u5c06\u5176\u4fdd\u7559\u4f5c\u4e3a\u6807\u51c6\u5e93\u91cc\u7684\u7c7b\u578b\u540d\u5b57\u3002","title":"4. \u8bed\u53e5"},{"location":"Statement/#Labels","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u6765\u6807\u8bc6\u6e90\u4ee3\u7801\u7684\u4e00\u8282\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u540e\u9762\u7684 goto \u4e2d\u4f7f\u7528\uff08\u8be6\u89c1 goto \u8bed\u53e5 \uff09\u3002\u4e00\u4e2a\u6807\u7b7e\u5305\u542b\u4e00\u4e2a\u6807\u8bc6\u7b26\uff08\u5c31\u50cf\u4e4b\u524d\u7528\u4e8e\u53d8\u91cf\u540d\u7684\u4e00\u6837\uff09\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002\u5982\uff1a treet: \u4f46\u4f60\u8981\u660e\u767d\u6807\u7b7e\u540d\u5b57\u548c\u5176\u4ed6\u6807\u8bc6\u7b26\u540d\u5b57\u662f\u4e0d\u51b2\u7a81\u7684\uff1a int treet = 5; /* treet the variable. */ treet: /* treet the label. */ ISO C \u6807\u51c6\u8981\u6c42\u6807\u7b7e\u540e\u9762\u5fc5\u987b\u81f3\u5c11\u8ddf\u4e00\u4e2a\u8bed\u53e5\uff0c\u5373\u4fbf\u662f\u4e00\u4e2a\u7a7a\u8bed\u53e5\uff08\u8be6\u89c1 \u7a7a\u8bed\u53e5 \uff09\u3002GCC \u5e76\u4e0d\u8981\u6c42\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u8fd9\u6837\u7528\uff0c\u4f60\u7684\u4ee3\u7801\u4f1a\u6709\u517c\u5bb9\u6027\u95ee\u9898\u3002","title":"4.1 \u6807\u7b7e"},{"location":"Statement/#Expression-Statements","text":"\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u8868\u8fbe\u5f0f\u540e\u9762\u52a0\u4e0a\u5206\u53f7\uff0c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u8bed\u53e5\u3002\u4f8b\u5982\uff1a 5; 2 + 2; 10 >= 9; \u5728\u4e0a\u9762\u7684\u5404\u4e2a\u8bed\u53e5\u4e2d\uff0c\u8868\u8fbe\u5f0f\u90fd\u4f1a\u88ab\u6c42\u503c\u3002\u7136\u800c\u8fd9\u5e76\u6ca1\u4ec0\u4e48\u5375\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u65e2\u6ca1\u6709\u628a\u503c\u5b58\u8d77\u6765\uff0c\u4e5f\u6ca1\u6709\u505a\u4efb\u4f55\u5b9e\u9645\u7684\u4e8b\u60c5\uff0c\u4ec5\u4ec5\u662f\u8ba1\u7b97\u4e86\u5b83\u4eec\u672c\u8eab\u800c\u5df2\u3002\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u6389\u8fd9\u79cd\u8bed\u53e5\u3002 \u8868\u8fbe\u5f0f\u8bed\u53e5\u4ec5\u5728\u6709\u526f\u4f5c\u7528\u65f6\u6709\u7528\uff0c\u5982\u5b58\u50a8\u4e00\u4e2a\u503c\u3001\u51fd\u6570\u8c03\u7528\u6216\u9020\u6210\u4e00\u4e2a\u9519\u8bef\uff08\u8fd9\u53ef\u80fd\u6709\u70b9\u96be\u61c2\uff09\u3002\u4f8b\u5982\uff1a x++; y = x + 25; puts (\"Hello, user!\"); *cucumber; \u6700\u540e\u7684\u8bed\u53e5 *cucumber; \u53ef\u80fd\u4f1a\u9020\u6210\u4e00\u4e2a\u9519\u8bef\uff0c\u5982\u679c cucumber \u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6307\u9488\u6216\u8005\u88ab\u58f0\u660e\u4e3a\u4e86 volatile \u3002","title":"4.2 \u8868\u8fbe\u5f0f\u8bed\u53e5"},{"location":"Statement/#The-if-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 if \u8bed\u53e5\u6765\u6709\u6761\u4ef6\u5730\u6267\u884c\u4f60\u7684\u90e8\u5206\u7a0b\u5e8f\uff0c\u6267\u884c\u90e8\u5206\u53d6\u51b3\u4e8e\u4f60\u7ed9\u51fa\u7684\u8868\u8fbe\u5f0f\u7684\u771f\u503c\u3002\u5e38\u7528\u5f62\u5f0f\u5982\u4e0b\uff1a if (test) then-statement else else-statement \u5982\u679c test \u6c42\u503c\u4e3a\u771f\uff0c\u90a3\u4e48\u6267\u884c then-statement \u8bed\u53e5\u800c else-statement \u4e0d\u4f1a\u88ab\u6267\u884c\u3002\u76f8\u53cd\u5982\u679c test \u4e3a\u5047\uff0c\u5219 else-statement \u88ab\u6267\u884c\u800c then-statement \u4e0d\u4f1a\u88ab\u6267\u884c\u3002 else \u4ece\u53e5\u662f\u53ef\u9009\u7684\u3002\u4f8b\u5982\uff1a if (x == 10) puts (\"x is 10\"); \u5982\u679c x == 10 \u662f\u771f\uff0c\u8bed\u53e5 puts (\"x is 10\"); \u88ab\u6267\u884c\u3002\u5982\u679c x == 10 \u662f\u5047\uff0c\u8bed\u53e5 puts (\"x is 10\"); \u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4e0b\u9762\u662f\u4f7f\u7528 else \u7684\u4f8b\u5b50\uff1a if (x == 10) puts (\"x is 10\"); else puts (\"x is not 10\"); \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u7cfb\u5217 if \u8bed\u53e5\u6765\u6d4b\u8bd5\u591a\u4e2a\u6761\u4ef6\uff1a if (x == 1) puts (\"x is 1\"); else if (x == 2) puts (\"x is 2\"); else if (x == 3) puts (\"x is 3\"); else puts (\"x is something else\"); \u4e0b\u9762\u7684\u4ee3\u7801\u6839\u636e\u7ed9\u5b9a\u7684\u5e74 y \u6765\u8ba1\u7b97\u548c\u6253\u5370\u590d\u6d3b\u8282\u7684\u65e5\u671f\uff1a void easterDate (int y) { int n = 0; int g = (y % 19) + 1; int c = (y / 100) + 1; int x = ((3 * c) / 4) - 12; int z = (((8 * c) + 5) / 25) - 5; int d = ((5 * y) / 4) - x - 10; int e = ((11 * g) + 20 + z - x) % 30; if (((e == 25) && (g > 11)) || (e == 24)) e++; n = 44 - e; if (n < 21) n += 30; n = n + 7 - ((d + n) % 7); if (n > 31) printf (\"Easter: %d April %d\", n - 31, y); else printf (\"Easter: %d March %d\", n, y); }","title":"4.3 if \u8bed\u53e5"},{"location":"Statement/#The-switch-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 switch \u8bed\u53e5\u6765\u628a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u548c\u5176\u4ed6\u8868\u8fbe\u5f0f\u4f5c\u6bd4\u8f83\uff0c\u7136\u540e\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\u51b3\u5b9a\u662f\u5426\u6267\u884c\u4e00\u7cfb\u5217\u5b50\u8bed\u53e5\u3002\u4e0b\u9762\u662f switch \u7684\u4e00\u822c\u5f62\u5f0f\uff1a switch (test) { case compare-1: if-equal-statement-1 case compare-2: if-equal-statement-2 \u2026 default: default-statement } switch \u8bed\u53e5\u6bd4\u8f83 test \u548c\u6bcf\u4e00\u4e2a compare \u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u548c test \u76f8\u7b49\u7684\u3002\u7136\u540e\u8be5\u5206\u652f\u4e0b\u9762\u7684\u8bed\u53e5\u4f1a\u88ab\u6267\u884c\u3002\u6240\u6709\u88ab\u6bd4\u8f83\u7684\u8868\u8fbe\u5f0f\u5fc5\u987b\u662f\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14 compare-N \u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u6574\u578b\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u5b57\u9762\u91cf\u6574\u6570\u6216\u4e00\u4e2a\u5b57\u9762\u91cf\u6574\u6570\u7ec4\u6210\u7684\u8868\u8fbe\u5f0f\uff09\u3002 \u53ef\u9009\u5730\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u9ed8\u8ba4\uff08default\uff09 \u5206\u652f\u3002\u5982\u679c\u4e0a\u9762\u7684\u5206\u652f\u90fd\u6ca1\u6709\u5339\u914d\u5230\u5c31\u4f1a\u6267\u884c\u8be5\u9ed8\u8ba4\u5206\u652f\u3002\u4e00\u822c default \u90fd\u4f1a\u653e\u5728\u6700\u540e\uff0c\u4f46\u8fd9\u4e0d\u662f\u5f3a\u5236\u7684\u3002 switch (x) { case 0: puts (\"x is 0\"); break; case 1: puts (\"x is 1\"); break; default: puts (\"x is something else\"); break; } \u6ce8\u610f\u5230\uff0c\u4e0a\u9762\u6bcf\u4e2a\u5206\u652f\u90fd\u7528\u4e86\u4e00\u4e2a break \u8bed\u53e5\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u5206\u652f\u88ab\u5339\u914d\u5230\uff0c\u4e0d\u53ea\u662f\u5b83\u7684\u5b50\u53e5\u88ab\u6267\u884c\uff0c\u6240\u6709\u5b83\u4e0b\u9762\u7684\u5206\u652f\u7684\u5b50\u53e5\u4e5f\u4f1a\u6267\u884c\uff1a int x = 0; switch (x) { case 0: puts (\"x is 0\"); case 1: puts (\"x is 1\"); default: puts (\"x is something else\"); } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u8f93\u51fa\u662f\uff1a x is 0 x is 1 x is something else \u8fd9\u901a\u5e38\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u5728\u6bcf\u4e00\u4e2a\u5206\u652f\u540e\u9762\u52a0\u4e00\u4e2a break \u4f1a\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u5f15\u5bfc\u5230 switch \u8bed\u53e5\u4e4b\u540e\u3002 \u4f5c\u4e3a GNU C \u6269\u5c55\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a case \u6807\u7b7e\u91cc\u6307\u5b9a\u4e00\u4e2a\u8fde\u7eed\u7684\u6574\u6570\u503c\u8303\u56f4\uff0c\u5982\uff1a case low ... high: \u8fd9\u4e2a\u628a\u8be5\u8303\u56f4\u5bf9\u5e94\u7684\u5404\u4e2a\u6570\u5b57 -- \u5305\u542b low \u548c high -- \u5199\u5728\u5404\u81ea\u6807\u7b7e\u91cc\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u4e00\u4e2a\u8303\u56f4\u7684 ASCII \u5b57\u7b26\u5c24\u5176\u6709\u7528\uff1a case 'A' ... 'Z': \u8981\u6ce8\u610f\uff0c\u5728 ... \u4e24\u8fb9\u90fd\u6709\u7a7a\u683c\uff1b\u5426\u5219\u4f1a\u89e3\u6790\u51fa\u9519\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a case 1 ... 5: \u800c\u4e0d\u662f case 1...5: \u901a\u5e38\u4f7f\u7528 switch \u8bed\u53e5\u6765\u5904\u7406\u591a\u79cd\u53ef\u80fd\u7684 errno \u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u7a0b\u5e8f\u5e94\u8be5\u6ce8\u610f\u5230\u6709\u53ef\u80fd 2 \u4e2a\u4f7f\u7528 errno \u7684\u5b8f\u5b9e\u9645\u5374\u6709\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 EWOULDBLOCK \u548c EAGAIN \u3002","title":"4.4 switch \u8bed\u53e5"},{"location":"Statement/#The-while-Statement","text":"while \u8bed\u53e5\u662f\u4e00\u79cd\u5728\u5faa\u73af\u5f00\u59cb\u524d\u8fdb\u884c\u9000\u51fa\u6d4b\u8bd5\u7684\u5faa\u73af\u8bed\u53e5\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a while (test) statement while \u8bed\u53e5\u5148\u5bf9 test \u6c42\u503c\u3002\u5982\u679c test \u662f\u771f\uff0c\u5219 s tatement \u88ab\u6267\u884c\uff0c\u7136\u540e\u518d\u6b21\u5bf9 test \u6c42\u503c\u3002\u53ea\u8981 test \u4e3a\u771f\uff0c statement \u4f1a\u7ee7\u7eed\u91cd\u590d\u6267\u884c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6253\u5370\u6574\u6570 0 \u5230 9\uff1a int counter = 0; while (counter < 10) printf (\"%d \", counter++); break \u8bed\u53e5\u53ef\u4ee5\u7ec8\u6b62 while \u5faa\u73af\u3002","title":"4.5 while \u8bed\u53e5"},{"location":"Statement/#The-do-Statement","text":"do \u8bed\u53e5\u662f\u5728\u5faa\u73af\u672b\u5c3e\u8fdb\u884c\u9000\u51fa\u6d4b\u8bd5\u7684\u5faa\u73af\u8bed\u53e5\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a do statement while (test); do \u8bed\u53e5\u5148\u6267\u884c statement \u3002\u4e4b\u540e\u5bf9 test \u6c42\u503c\u3002\u5982\u679c test \u4e3a\u771f\uff0c statement \u518d\u6b21\u88ab\u6267\u884c\u3002\u53ea\u8981 test \u4e3a\u771f\uff0c statement \u4f1a\u7ee7\u7eed\u91cd\u590d\u6267\u884c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6253\u5370\u6574\u6570 0 \u5230 9\uff1a int x = 0; do printf (\"%d \", x++); while (x < 10); break \u8bed\u53e5\u53ef\u4ee5\u7ec8\u6b62 do \u5faa\u73af\u3002","title":"4.6 do \u8bed\u53e5"},{"location":"Statement/#The-for-Statement","text":"for \u662f\u4e00\u79cd\u5faa\u73af\u8bed\u53e5\uff0c\u5b83\u7684\u7ed3\u6784\u53ef\u4ee5\u7b80\u5355\u5730\u53d8\u91cf\u521d\u59cb\u5316\uff0c\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u4ee5\u53ca\u53d8\u91cf\u4fee\u6539\u3002\u65b9\u4fbf\u4e8e\u8fdb\u884c\u8ba1\u6570\u63a7\u5236\u7684\u5faa\u73af\u3002\u5b83\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a for (initialize; test; step) statement for \u5faa\u73af\u5148\u8ba1\u7b97\u8868\u8fbe\u5f0f initialize \uff0c\u7136\u540e\u5bf9\u8868\u8fbe\u5f0f test \u6c42\u503c\u3002\u5982\u679c test \u4e3a\u5047\uff0c\u5faa\u73af\u7ed3\u675f\u5e76\u4e14\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u7a0b\u6062\u590d\u5230 for \u8bed\u53e5\u4e4b\u540e\uff1b\u5426\u5219\uff0c statement \u88ab\u6267\u884c\u3002\u6700\u540e\uff0c\u8ba1\u7b97 step \u3002\u4e0b\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4f1a\u5148\u518d\u6b21\u5bf9 test \u6c42\u503c\u3002 \u901a\u5e38\uff0c initialize \u4f1a\u7ed9\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u8d4b\u503c\uff0c\u4e00\u822c\u662f\u8ba1\u6570\u5668\uff1b test \u4f1a\u628a\u8fd9\u4e9b\u53d8\u91cf\u548c\u9884\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f\u6bd4\u8f83\uff1b\u800c step \u7528\u6765\u4fee\u6539\u8fd9\u4e9b\u53d8\u91cf\u3002\u4e0b\u9762\u4e5f\u662f\u4e00\u4e2a\u6253\u5370\u6574\u6570 0 ~ 9 \u7684\u4f8b\u5b50\uff1a int x; for (x = 0; x < 10; x++) printf (\"%d \", x); \u9996\u5148\u5bf9 initialize \u6c42\u503c\uff0c\u4e5f\u5c31\u662f\u628a 0 \u8d4b\u7ed9 x \u3002\u7136\u540e\u53ea\u8981 x \u5c0f\u4e8e 10 \u5c31\u4f1a\u628a\u5b83\u6253\u5370\u51fa\u6765\uff08\u5728\u5faa\u73af\u4f53\u4e2d\uff09\u3002\u63a5\u7740 x \u5728 step \u5b50\u53e5\u91cc\u88ab\u9012\u589e\uff0c\u7136\u540e test \u518d\u88ab\u6c42\u503c\u3002 \u8fd9 3 \u4e2a\u8868\u8fbe\u5f0f\u5728 for \u8bed\u53e5\u4e2d\u90fd\u662f\u53ef\u9009\u7684\uff0c\u5176\u4e2d\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\u3002\u65e2\u7136\u7b2c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ea\u88ab\u6c42\u503c\u4e00\u6b21\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u88ab\u7701\u7565\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a int x = 1; for (; x <= 10; x++) printf (\"%d \", x); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c x \u5728 for \u8bed\u53e5\u4e4b\u524d\u5c31\u88ab\u8d4b\u503c\u4e86\u3002 \u5982\u679c\u4f60\u4e0d\u5199 test \u8868\u8fbe\u5f0f\uff0c\u90a3 for \u8bed\u53e5\u5c31\u53d8\u6210\u65e0\u9650\u5faa\u73af\u4e86\uff08\u9664\u975e\u4f60\u5728 for \u8bed\u53e5\u4e2d\u4f7f\u7528\u4e86 break \u6216\u8005 goto \u8bed\u53e5\uff09\u3002\u8fd9\u548c test \u4e3a 1 \u662f\u4e00\u6837\u7684\uff0c\u6c38\u8fdc\u4e3a\u771f\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4ece 1 \u5f00\u59cb\u6253\u5370\u6240\u6709\u7684\u6b63\u6574\u6570\uff1a for (x = 1; ; x++) printf (\"%d \", x); \u5982\u679c\u4f60\u4e0d\u5199 step \u8868\u8fbe\u5f0f\uff0c\u5c31\u6ca1\u6709\u4e86\u5b8c\u6210\u5faa\u73af\u7684\u6b65\u8fdb -- \u81f3\u5c11\u4e0d\u50cf for \u8bed\u53e5\u6b63\u5e38\u671f\u671b\u7684\u90a3\u6837\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4f1a\u4e0d\u505c\u5730\u6253\u5370 1\uff1a for (x = 1; x <= 10;) printf (\"%d \", x); \u53ef\u80fd\u4f1a\u5f15\u8d77\u56f0\u60d1\u7684\u662f\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u9017\u53f7\u8fd0\u7b97\u7b26\uff08\u8be6\u89c1 \u9017\u53f7\u64cd\u4f5c\u7b26 \uff09\u5728\u540c\u4e00\u4e2a for \u8bed\u53e5\u4e2d\u76d1\u63a7\u591a\u4e2a\u53d8\u91cf\uff0c\u56e0\u4e3a\u901a\u5e38\u9017\u53f7\u8fd0\u7b97\u7b26\u4f1a\u4e22\u5f03\u5b83\u7684\u5de6\u64cd\u4f5c\u6570\u7684\u7ed3\u679c\u3002\u5982\uff1a int x, y; for (x = 1, y = 10; x <= 10, y >= 1; x+=2, y--) printf (\"%d %d\\n\", x, y); \u8f93\u51fa\u662f\uff1a 1 10 3 9 5 8 7 7 9 6 11 5 13 4 15 3 17 2 19 1 \u5982\u679c\u4f60\u8981\u6d4b\u8bd5 2 \u4e2a\u6761\u4ef6\uff0c\u4f60\u9700\u8981\u7528 && \u8fd0\u7b97\u7b26\uff1a int x, y; for (x = 1, y = 10; x <= 10 && y >= 1; x+=2, y--) printf (\"%d %d\\n\", x, y); break \u8bed\u53e5\u4e5f\u53ef\u4ee5\u7ec8\u6b62 for \u5faa\u73af\uff1a \u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u8ba1\u7b97\u5e73\u65b9\u548c\u7684\u51fd\u6570\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u8d77\u59cb\u6570\uff0c\u4e00\u4e2a\u7ec8\u6b62\u6570\uff0c\u6765\u8ba1\u7b97\u4e2d\u95f4\u6240\u6709\u6570\u7684\u5e73\u65b9\u548c\uff1a int sum_of_squares (int start, int end) { int i, sum = 0; for (i = start; i <= end; i++) sum += i * i; return sum; }","title":"4.7 for \u8bed\u53e5"},{"location":"Statement/#Blocks","text":"\u4e00\u4e2a\u4ee3\u7801\u5757\u662f 0 \u4e2a\u6216\u591a\u4e2a\u7528\u82b1\u62ec\u53f7\u5305\u8d77\u6765\u7684\u8bed\u53e5\uff0c\u4e5f\u53eb\u505a\u7ec4\u5408\u8bed\u53e5\u3002\u901a\u5e38\u4ee3\u7801\u5757\u7528\u5728\u6761\u4ef6\u8bed\u53e5\u548c\u5faa\u73af\u8bed\u53e5\u7684\u4e3b\u4f53\u90e8\u5206\uff0c\u7528\u6765\u5c06\u4e00\u7ec4\u8bed\u53e5\u653e\u5728\u4e00\u8d77\u3002 for (x = 1; x <= 10; x++) { printf (\"x is %d\\n\", x); if ((x % 2) == 0) printf (\"%d is even\\n\", x); else printf (\"%d is odd\\n\", x); } \u4ee3\u7801\u5757\u53ef\u4ee5\u5d4c\u5957\uff1a for (x = 1; x <= 10; x++) { if ((x % 2) == 0) { printf (\"x is %d\\n\", x); printf (\"%d is even\\n\", x); } else { printf (\"x is %d\\n\", x); printf (\"%d is odd\\n\", x); } } \u4f60\u53ef\u4ee5\u5728\u4ee3\u7801\u5757\u5185\u58f0\u660e\u53d8\u91cf\uff1b\u8fd9\u6837\u7684\u53d8\u91cf\u662f\u8be5\u5757\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5728 C89 \u6807\u51c6\u4e2d\uff0c\u58f0\u660e\u8bed\u53e5\u5fc5\u987b\u653e\u5728\u5176\u4ed6\u8bed\u53e5\u524d\uff0c\u6240\u4ee5\u6709\u65f6\u5f15\u5165\u8bed\u53e5\u5757\u6765\u5b9a\u4e49\u53d8\u91cf\u5c31\u5f88\u6709\u7528\uff1a { int x = 5; printf (\"%d\\n\", x); } printf (\"%d\\n\", x); /* Compilation error! x exists only in the preceding block. */","title":"4.8 \u4ee3\u7801\u5757"},{"location":"Statement/#The-Null-Statement","text":"\u7a7a\u8bed\u53e5\u53ea\u6709\u4e00\u4e2a\u5206\u53f7\u3002 ; \u7a7a\u8bed\u53e5\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u4e0d\u5728\u4efb\u4f55\u5730\u65b9\u5b58\u503c\u3002\u7a0b\u5e8f\u6267\u884c\u65f6\u4e0d\u4f1a\u8017\u65f6\u3002 \u901a\u5e38\uff0c\u7a7a\u8bed\u53e5\u4f1a\u7528\u505a\u5faa\u73af\u8bed\u53e5\u7684\u5faa\u73af\u4f53\uff0c\u6216\u8005\u4f5c\u4e3a for \u8bed\u53e5\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u8fbe\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7a7a\u8bed\u53e5\u4f5c\u4e3a for \u5faa\u73af\u7684\u5faa\u73af\u4f53\u7684\u4f8b\u5b50\uff08\u987a\u4fbf\u8ba1\u7b97\u4e00\u4e0b n \u7684\u6574\u6570\u5e73\u65b9\u6839\uff0c\u4f9b\u541b\u4e00\u7b11\uff09\uff1a for (i = 1; i*i < n; i++) ; \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u7528\u4f5c for \u5faa\u73af\u4f53\u7684\u4f8b\u5b50\uff0c\u4f46\u662f\u4f1a\u4ea7\u751f\u8f93\u51fa\uff1a for (x = 1; x <= 5; printf (\"x is now %d\\n\", x), x++) ; \u7a7a\u8bed\u53e5\u6709\u65f6\u4e5f\u4f1a\u8ddf\u5728\u4e00\u4e2a\u6807\u7b7e\u540e\u9762\uff0c\u7528\u4f5c\u8be5\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u3002","title":"4.9 \u7a7a\u8bed\u53e5"},{"location":"Statement/#The-goto-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 goto \u8bed\u53e5\u5728\u7a0b\u5e8f\u4e2d\u65e0\u6761\u4ef6\u8df3\u8f6c\u3002\u5f62\u5f0f\u4e00\u822c\u4e3a\uff1a goto label; \u4f60\u5fc5\u987b\u6307\u5b9a\u76ee\u7684\u6807\u7b7e\uff1b\u5728 goto \u8bed\u53e5\u6267\u884c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u8df3\u5230\u4e86\u8be5\u6807\u7b7e\u5904\u3002\u8be6\u89c1 \u6807\u7b7e \u4e00\u8282\u3002\u8fd9\u91cc\u6709\u4e2a\u4f8b\u5b50\uff1a goto end_of_program; \u2026 end_of_program: \u6807\u7b7e\u53ef\u4ee5\u5728\u540c\u4e00\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u4f46 goto \u8df3\u4e0d\u5230\u5176\u5b83\u51fd\u6570\u3002 \u4f60 \u53ef\u4ee5 \u7528 goto \u6765\u6a21\u62df\u5faa\u73af\uff0c\u4f46\u6211\u4eec\u4e0d\u63a8\u8350\u8fd9\u6837\u505a -- \u5b83\u8ba9\u7a0b\u5e8f\u96be\u4ee5\u7406\u89e3\uff0c\u5e76\u4e14 GCC \u65e0\u6cd5\u5f88\u597d\u5730\u4f18\u5316\u5b83\u3002\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528 for \u3001 while \u4ee5\u53ca do \u8bed\u53e5\u6765\u5b9e\u73b0\u5faa\u73af\u3002 GCC \u6269\u5c55\u5141\u8bb8 goto \u8bed\u53e5\u8df3\u5230 void* \u6307\u5411\u7684\u5730\u5740\u3002\u8981\u8fd9\u6837\u505a\uff0c\u4f60\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 && \uff08\u4e0d\u662f & \uff09\u62ff\u5230\u6807\u7b7e\u7684\u5730\u5740\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u778e\u9020\u7684\u4f8b\u5b50\uff1a enum Play { ROCK=0, PAPER=1, SCISSORS=2 }; enum Result { WIN, LOSE, DRAW }; static enum Result turn (void) { const void * const jumptable[] = {&&rock, &&paper, &&scissors}; enum Play opp; /* opponent\u2019s play */ goto *jumptable[select_option (&opp)]; rock: return opp == ROCK ? DRAW : (opp == PAPER ? LOSE : WIN); paper: return opp == ROCK ? WIN : (opp == PAPER ? DRAW : LOSE); scissors: return opp == ROCK ? LOSE : (opp == PAPER ? WIN : DRAW); }","title":"4.10 goto \u8bed\u53e5"},{"location":"Statement/#The-break-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\u6765\u7ec8\u6b62 while \u3001 do \u3001 for \u548c switch \u8bed\u53e5\u3002\u4f8b\u5982\uff1a int x; for (x = 1; x <= 10; x++) { if (x == 8) break; else printf (\"%d \", x); } \u8fd9\u4e2a\u4f8b\u5b50\u4f1a\u6253\u5370 1 \u5230 7\u3002\u5f53 x \u81ea\u589e\u5230 8 \u65f6\uff0c x == 8 \u4e3a\u771f\uff0c\u56e0\u6b64 break \u8bed\u53e5\u88ab\u6267\u884c\uff0c for \u5faa\u73af\u4e5f\u5c31\u88ab\u7ec8\u6b62\u4e86\u3002 \u5982\u679c\u4f60\u628a break \u653e\u5728\u4e86\u5d4c\u5957\u5faa\u73af\u6216 switch \u7684\u5185\u5c42\u5faa\u73af\u6216\u5185\u5c42 switch \u4e2d\uff0c\u90a3 break \u53ea\u4f1a\u7ec8\u6b62\u6700\u5185\u5c42\u7684\u5faa\u73af\u6216 switch \u3002","title":"4.11 break \u8bed\u53e5"},{"location":"Statement/#The-continue-Statement","text":"\u4f60\u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 continue \u8bed\u53e5\u6765\u7ec8\u6b62\u5faa\u73af\u7684\u5f53\u524d\u4e00\u6b21\u8fed\u4ee3\uff0c\u7136\u540e\u5f00\u59cb\u4e0b\u4e00\u6b21\u8fed\u4ee3\u3002\u4f8b\u5982\uff1a for (x = 0; x < 100; x++) { if (x % 2 == 0) continue; else sum_of_odd_numbers + = x; } \u5982\u679c\u4f60\u628a continue \u653e\u5728\u4e86\u5d4c\u5957\u5faa\u73af\u7684\u5185\u5c42\u5faa\u73af\u4e2d\uff0c\u90a3 continue \u53ea\u4f1a\u7ec8\u6b62\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002","title":"4.12 continue \u8bed\u53e5"},{"location":"Statement/#The-return-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 return \u8bed\u53e5\u6765\u7ed3\u675f\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u7a0b\u5e8f\u7684\u63a7\u5236\u4ea4\u8fd8\u5230\u8be5\u51fd\u6570\u7684\u8c03\u7528\u5904\u3002\u4e0b\u9762\u662f return \u8bed\u53e5\u7684\u4e00\u822c\u5f62\u5f0f\uff1a return return-value; return-value \u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f void \uff0c\u90a3\u8fd4\u56de\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5c31\u662f\u975e\u6cd5\u7684\uff1b\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u8fd4\u56de\u503c\u7684 return \u8bed\u53e5\u3002 \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u548c return-value \u7684\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u65e0\u6cd5\u8fdb\u884c\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff0c\u90a3\u8fd4\u56de\u8be5 return-value \u662f\u975e\u6cd5\u7684\u3002 \u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u662f void \uff0c\u5e76\u4e14\u6ca1\u6709\u8fd4\u56de\u503c\u88ab\u6307\u5b9a\uff0c\u90a3\u8be5 return \u8bed\u53e5\u662f\u5408\u6cd5\u7684\uff0c\u9664\u975e\u5728\u51fd\u6570\u88ab\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a x = cosine (y); \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 cosine \u88ab\u8c03\u7528\u5904\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9 x \u3002 \u5373\u4f7f\u4e0a\u4e0b\u6587\u4e0d\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u7f3a\u7701\u8fd4\u56de\u503c\u4e3a\u975e void \u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u662f\u4e2a\u597d\u4e60\u60ef\u3002GCC \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570 -Wreturn-type \uff0c\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4e2d\u7f3a\u7701\u8fd4\u56de\u503c\u4f1a\u53d1\u51fa\u8b66\u544a\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5728 void \u548c\u975e void \u51fd\u6570\u4e2d\u4f7f\u7528 return \u8bed\u53e5\uff1a void print_plus_five (int x) { printf (\"%d \", x + 5); return; } int square_value (int x) { return x * x; }","title":"4.13 return \u8bed\u53e5"},{"location":"Statement/#The-typedef-Statement","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 typedef \u8bed\u53e5\u6765\u7ed9\u6570\u636e\u7c7b\u578b\u521b\u5efa\u522b\u540d\u3002\u4e0b\u9762\u662f\u5176\u4e00\u822c\u5f62\u5f0f\uff1a typedef old-type-name new-type-name old-type-name \u662f\u8be5\u7c7b\u578b\u5df2\u7ecf\u5b58\u5728\u7684\u540d\u5b57\uff0c\u53ef\u80fd\u7531\u4e0d\u53ea\u4e00\u4e2a\u6807\u8bb0\u7ec4\u6210\uff08\u5982 unsigned long int \uff09\u3002 new-type-name \u662f\u8be5\u7c7b\u578b\u7684\u65b0\u540d\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002\u521b\u5efa\u65b0\u540d\u5b57\u540e\u65e7\u540d\u5b57\u540c\u6837\u53ef\u7528\u3002\u4f8b\u5982\uff1a typedef unsigned char byte_type; typedef double real_number_type; \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u8be5\u7c7b\u578b\u65f6\u5c31\u7ed9\u5b83\u8d77\u4e00\u4e2a\u65b0\u540d\u5b57\uff1a typedef struct fish { float weight; float length; float probability_of_being_caught; } fish_type; \u8981\u7ed9\u4e00\u4e2a\u6570\u7ec4\u5b9a\u4e49\u7c7b\u578b\uff0c\u4f60\u5f97\u5148\u7ed9\u51fa\u5176\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u672b\u5c3e\u63a5\u4e0a\u5143\u7d20\u4e2a\u6570\uff1a typedef char array_of_bytes [5]; array_of_bytes five_bytes = {0, 1, 2, 3, 4}; \u5728\u9009\u62e9\u7c7b\u578b\u7684\u540d\u5b57\u65f6\uff0c\u4f60\u8981\u907f\u514d\u4f7f\u7528 _t \u540e\u7f00\u3002\u867d\u7136\u7f16\u8bd1\u5668\u5141\u8bb8\u8fd9\u4e48\u505a\uff0c\u4f46 POSIX \u6807\u51c6\u5c06\u5176\u4fdd\u7559\u4f5c\u4e3a\u6807\u51c6\u5e93\u91cc\u7684\u7c7b\u578b\u540d\u5b57\u3002","title":"4.14 typedef \u8bed\u53e5"}]}